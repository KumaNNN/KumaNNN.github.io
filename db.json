{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"source/images/avatar3.jpg","path":"images/avatar3.jpg","modified":0,"renderable":0},{"_id":"source/images/avatar2.jpg","path":"images/avatar2.jpg","modified":0,"renderable":0},{"_id":"source/images/avatar.png","path":"images/avatar.png","modified":0,"renderable":0}],"Cache":[{"_id":"themes/next/.all-contributorsrc","hash":"0ca0200bb5cba4cd157f2cb74703c4cb4c29cda5","modified":1541960969449},{"_id":"themes/next/.editorconfig","hash":"211d2c92bfdddb3e81ea946f4ca7a539f150f4da","modified":1541960969501},{"_id":"themes/next/.bowerrc","hash":"334da94ca6f024d60d012cc26ea655681e724ad8","modified":1541960969449},{"_id":"themes/next/.eslintrc.json","hash":"d3c11de434171d55d70daadd3914bc33544b74b8","modified":1541960969502},{"_id":"themes/next/.git","hash":"042ff34da0707513a5681580b37513c890c671ef","modified":1541960968606},{"_id":"themes/next/.gitattributes","hash":"8454b9313cb1a97b63fb87e2d29daee497ce6249","modified":1541960969502},{"_id":"themes/next/.gitignore","hash":"0378adb9c2dc4855b3198184df4863cb30e4059c","modified":1541960969647},{"_id":"themes/next/.stylintrc","hash":"3b7f9785e9ad0dab764e1c535b40df02f4ff5fd6","modified":1541960969647},{"_id":"themes/next/.travis.yml","hash":"fb9ac54e875f6ea16d5c83db497f6bd70ae83198","modified":1541960969648},{"_id":"themes/next/LICENSE.md","hash":"f0190c7d83a98464549a6b3a51bb206148d88e1b","modified":1541960969648},{"_id":"themes/next/README.md","hash":"5cc097c71ba6e99aaf4b19955a4df3951879d8c9","modified":1541960969649},{"_id":"themes/next/_config.yml","hash":"a4fcc390cd49e292e0a9c02be86698b5cf533b46","modified":1542354836038},{"_id":"themes/next/bower.json","hash":"fc93e1d0cf28f06b98e1b384874152287413603c","modified":1541960969650},{"_id":"themes/next/crowdin.yml","hash":"4a53f5985e545c635cb56b2a57ed290cb8cf8942","modified":1541960969650},{"_id":"themes/next/gulpfile.coffee","hash":"67eaf2515100971f6195b60eeebbfe5e8de895ab","modified":1541960969667},{"_id":"themes/next/package.json","hash":"59b83042198b870dd89e0a8c026a62645d81b2b8","modified":1541960969739},{"_id":"themes/next/.github/CODE_OF_CONDUCT.md","hash":"22f2ccc5522563b67c8663849fc1d6cbae93a8ff","modified":1541960969503},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"40b0fd9fdb8586fab98e23f713940e7a2f80e2f9","modified":1541960969504},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"1e212fe229bd659726b4a3bcf4b5b14e0310ba3a","modified":1541960969645},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"36201119490a04107c8179b10202548a9d0e5e60","modified":1541960969645},{"_id":"themes/next/.github/browserstack_logo.png","hash":"a6c43887f64a7f48a2814e3714eaa1215e542037","modified":1541960969646},{"_id":"themes/next/.github/stale.yml","hash":"dbd5e6bf89b76ad1f2b081578b239c7ae32755af","modified":1541960969646},{"_id":"themes/next/docs/AGPL3.md","hash":"f463f95b169d64983f59fa6f3e4b6760290a0e6b","modified":1541960969651},{"_id":"themes/next/docs/ALGOLIA-SEARCH.md","hash":"1dada3c3404445a00367882b8f97cdf092b7943d","modified":1541960969652},{"_id":"themes/next/docs/AUTHORS.md","hash":"51a0a13da55ff3d596970b2f9ab4531c6b2211f2","modified":1541960969652},{"_id":"themes/next/docs/DATA-FILES.md","hash":"9a1895c0a0db705c4c48f512e86917f9af1ec3fb","modified":1541960969653},{"_id":"themes/next/docs/INSTALLATION.md","hash":"b74ef6fedf76cdb156e2265759ee0a789ddd49cc","modified":1541960969655},{"_id":"themes/next/docs/LEANCLOUD-COUNTER-SECURITY.md","hash":"f2fd611a84dd6f9ed5395b63e187e29e9effbcd3","modified":1541960969656},{"_id":"themes/next/docs/LICENSE","hash":"5b702310012d480b40529fd10cf1872f687277a0","modified":1541960969656},{"_id":"themes/next/docs/MATH.md","hash":"0540cd9c961b07931af9f38a83bc9a0f90cd5291","modified":1541960969657},{"_id":"themes/next/docs/UPDATE-FROM-5.1.X.md","hash":"c9f2ed8e15c137b1885d9ca8b7197d9f457971e9","modified":1541960969657},{"_id":"themes/next/languages/de.yml","hash":"641e49587d41bb87e4d5932dc3d975754ded7953","modified":1541960969668},{"_id":"themes/next/languages/en.yml","hash":"d66b8b48840443a4f9c72c7696a21e292f685a47","modified":1541960969669},{"_id":"themes/next/languages/fr.yml","hash":"ebcd1f188af8c3f5ef1f0923e794c839fbfae2d4","modified":1541960969670},{"_id":"themes/next/languages/default.yml","hash":"d66b8b48840443a4f9c72c7696a21e292f685a47","modified":1541960969669},{"_id":"themes/next/languages/id.yml","hash":"9709a4dbacc56a1571a96b139b872128d6959e90","modified":1541960969670},{"_id":"themes/next/languages/it.yml","hash":"4e3adeb10c0fa627935d69ae1783ce0894f5dee5","modified":1541960969671},{"_id":"themes/next/languages/ja.yml","hash":"82afb0a5637ad67065fa5b2624fa56c7c240c3c6","modified":1541960969672},{"_id":"themes/next/languages/ko.yml","hash":"33e065ceb21590b8eb32430a69e76c2f057eb758","modified":1541960969672},{"_id":"themes/next/languages/nl.yml","hash":"060efc260c1c529469d739d97dcee79683e8f411","modified":1541960969673},{"_id":"themes/next/languages/pt-BR.yml","hash":"dc09e290e908744ca28e093dbdd859ca2a20290e","modified":1541960969673},{"_id":"themes/next/languages/pt.yml","hash":"53e2a52b9d5dc20c04080acd4f5b954e8699780f","modified":1541960969674},{"_id":"themes/next/languages/ru.yml","hash":"720b92a9ec075b68737d296b1f29ad8e01151c85","modified":1541960969674},{"_id":"themes/next/languages/tr.yml","hash":"6d2f53d3687a7a46c67c78ab47908accd8812add","modified":1541960969675},{"_id":"themes/next/languages/vi.yml","hash":"e2b3b18359ab41d58c64b2002acfedd60a7505a4","modified":1541960969675},{"_id":"themes/next/languages/zh-CN.yml","hash":"069f15da910d6f9756be448167c07ea5aa5dc346","modified":1541960969679},{"_id":"themes/next/languages/zh-HK.yml","hash":"c22113c4a6c748c18093dae56da5a9e8c5b963cd","modified":1541960969679},{"_id":"themes/next/languages/zh-TW.yml","hash":"dbf4dd87716babb2db4f5332fae9ec190a6f636a","modified":1541960969680},{"_id":"themes/next/layout/_layout.swig","hash":"34476a17f8c12c9f094a6cc59208c5af6dd89202","modified":1541960969682},{"_id":"themes/next/layout/archive.swig","hash":"4b53070008775ecfd03953bd1b4adfcb0fabcaac","modified":1541960969735},{"_id":"themes/next/layout/category.swig","hash":"f0e3338bfa5efb205d2c28e635e9611f1fff3b55","modified":1541960969736},{"_id":"themes/next/layout/index.swig","hash":"bdcc9f57adef49706b16b107791cacecbc23c1dc","modified":1541960969737},{"_id":"themes/next/layout/page.swig","hash":"22a4ce71857a871b6fd474ec28fc80f736c45185","modified":1541960969737},{"_id":"themes/next/layout/post.swig","hash":"0554f42f90f4a524666c2b520be30b689c1d6a87","modified":1541960969737},{"_id":"themes/next/layout/schedule.swig","hash":"e79f43df0e9a6cf48bbf00882de48c5a58080247","modified":1541960969738},{"_id":"themes/next/layout/tag.swig","hash":"7cda2822e50b9fee9848a6b81e6c2d1aca830aeb","modified":1541960969738},{"_id":"themes/next/scripts/merge-configs.js","hash":"5f96f63e86825fd7028c2522e4111103e261a758","modified":1541960969743},{"_id":"themes/next/scripts/merge.js","hash":"39b84b937b2a9608b94e5872349a47200e1800ff","modified":1541960969744},{"_id":"themes/next/test/.jshintrc","hash":"c9fca43ae0d99718e45a6f5ce736a18ba5fc8fb6","modified":1541960969869},{"_id":"themes/next/test/helpers.js","hash":"f25e7f3265eb5a6e1ccbb5e5012fa9bebf134105","modified":1541960969870},{"_id":"source/404/index.md","hash":"f024822af3bedd90910dbdc36e15bdf893a9bb48","modified":1544436526247},{"_id":"themes/next/test/intern.js","hash":"db90b1063356727d72be0d77054fdc32fa882a66","modified":1541960969870},{"_id":"source/about/index.md","hash":"d3d242084e5d76914b1124439ed81c8090f2f973","modified":1542571139048},{"_id":"source/categories/index.md","hash":"c9266dd75cb8ad0bf2bdbef046cf567fcca178fe","modified":1542139040055},{"_id":"source/link/index.md","hash":"bc5e65b044060841d3a4872ed1f12c000bba74fe","modified":1542135034337},{"_id":"source/tags/index.md","hash":"9378c5b64489e5b5c28e9150ae8472f3c4adf476","modified":1542139069327},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1541960969827},{"_id":"themes/next/docs/ru/DATA-FILES.md","hash":"a51de08657f5946f4028b11373280ddc04639525","modified":1541960969658},{"_id":"themes/next/docs/ru/INSTALLATION.md","hash":"7b2963daac19b0c14f98ebef375d5fbce8fc3f44","modified":1541960969659},{"_id":"themes/next/docs/ru/README.md","hash":"caaad965f9d54f82382c934f44a507d37a863fa3","modified":1541960969660},{"_id":"themes/next/docs/ru/UPDATE-FROM-5.1.X.md","hash":"1a4e41adcf5831057f3f7b3025ed4a5ef7c442b4","modified":1541960969661},{"_id":"themes/next/docs/zh-CN/ALGOLIA-SEARCH.md","hash":"e771c5b745608c6fb5ae2fa1c06c61b3699627ec","modified":1541960969662},{"_id":"themes/next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"9b512cb820627fcc45c9f77c7a122aa99e021bd5","modified":1541960969662},{"_id":"themes/next/docs/zh-CN/CONTRIBUTING.md","hash":"6ea741f380dc3e90661d12db7e115a94b77643a4","modified":1541960969663},{"_id":"themes/next/docs/zh-CN/DATA-FILES.md","hash":"67f4a987e7db0ab1ce1ea4c311f2961df07b6681","modified":1541960969664},{"_id":"themes/next/docs/zh-CN/INSTALLATION.md","hash":"baca12cc24be082f1db28c7f283493569666321c","modified":1541960969664},{"_id":"themes/next/docs/zh-CN/LEANCLOUD-COUNTER-SECURITY.md","hash":"7214fcd1b5830e62b3ac0836ad2d1b0fa391ae12","modified":1541960969665},{"_id":"themes/next/docs/zh-CN/MATH.md","hash":"69d73e86d8f7d2deafc436df84713a1425704d8a","modified":1541960969666},{"_id":"themes/next/docs/zh-CN/README.md","hash":"0e6652be1b6bca87479f2601ff89105def200b4c","modified":1541960969666},{"_id":"themes/next/docs/zh-CN/UPDATE-FROM-5.1.X.md","hash":"2095d1214a4e519a1d31b67b41c89080fa3285d3","modified":1541960969667},{"_id":"themes/next/layout/_custom/head.swig","hash":"a223919d2e1bf17ca4d6abb2c86f2efca9883dc1","modified":1541960969681},{"_id":"themes/next/layout/_custom/header.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1541960969681},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1541960969682},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"32b1f74e6a144133ce3a60cd06dbef50d8286919","modified":1541960969685},{"_id":"themes/next/layout/_macro/post-related.swig","hash":"e8dfb86eb62b9c2bc1435d6d1afa95d3b4c7b931","modified":1541960969685},{"_id":"themes/next/layout/_macro/post.swig","hash":"ca76ab98276c4ce73146c5bd25402c64ce0fa5e4","modified":1542053668832},{"_id":"themes/next/layout/_macro/reward.swig","hash":"b6e7d0af24b4d52d168a4eb0fb29bffa69621395","modified":1541960969687},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"be4904c682934bdda4a406f4c24f487b34047c09","modified":1541960969687},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"7a9b687087793bf5e218cbc345214f927fa5601a","modified":1541960969688},{"_id":"themes/next/layout/_partials/breadcrumb.swig","hash":"4b48fdbfe3bf41ddeda4ff74c1ff17ab9f15c14e","modified":1541960969689},{"_id":"themes/next/layout/_partials/comments.swig","hash":"8986e4803cee4c0b4bbb5f4aa669b30319627662","modified":1541960969689},{"_id":"themes/next/layout/_partials/footer.swig","hash":"628a88e66163e882e3b62f91049417445fed754b","modified":1542123733643},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"206cbd6ac9ca6a219a8516f59beae25b3c770199","modified":1541960969697},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"914155d5d758306cff405beefd4a07973fd8fc77","modified":1541960969697},{"_id":"themes/next/layout/_partials/post-copyright.swig","hash":"55de88525c05af6053524c78ef4b42b46c3bfb6d","modified":1541960969698},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"27fb1d81151b9b79683e488579df19eee7e654d6","modified":1541960969704},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"f544e21883d249d5a341c684c97bd25831008f07","modified":1541960969704},{"_id":"themes/next/layout/_scripts/noscript.swig","hash":"f8c7e729ad6e72b4c705a2c5d5041589c2b4cc52","modified":1541960969704},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"92ffb13ef1f6075f77f41b43ca04aaa0e9e65c10","modified":1541960969710},{"_id":"themes/next/layout/_third-party/bookmark.swig","hash":"ed62ea83d3f2c9db2ea57bf23a7d765ed82504c2","modified":1541960969719},{"_id":"themes/next/layout/_third-party/copy-code.swig","hash":"c62c37474c8de78cf34e54c6219b503ec28d9815","modified":1541960969723},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"53861f78a1fb52e96a43cf6909e1530dcf6cbff8","modified":1541960969724},{"_id":"themes/next/layout/_third-party/github-banner.swig","hash":"20704846a29d72b24f6e446a6c22b10cf50a624b","modified":1541960969724},{"_id":"themes/next/layout/_third-party/needsharebutton.swig","hash":"debba9b7110f635204a15df148194d4c2fd2668b","modified":1541960969727},{"_id":"themes/next/layout/_third-party/pangu.swig","hash":"ccf0035086e14dcefa24c2907301edf4c37d5448","modified":1541960969728},{"_id":"themes/next/layout/_third-party/pdf.swig","hash":"3bdd2ec6c75a2c3f62c55e7e43162c4802722edb","modified":1541960969728},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"554ec568e9d2c71e4a624a8de3cb5929050811d6","modified":1541960969729},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"db15d7e1552aa2d2386a6b8a33b3b3a40bf9e43d","modified":1541960969729},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"a174d4a0c9188f9c4a2652f49bfa7a60ad0a83e3","modified":1541960969730},{"_id":"themes/next/scripts/helpers/engine.js","hash":"cdb6152582313268d970ffeef99b4a8a7850f034","modified":1541960969741},{"_id":"themes/next/scripts/tags/button.js","hash":"510f3711a9c9d3e2a844250647d90e8359e7d130","modified":1541960969745},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"4519ab8e6898f2ee90d05cde060375462b937a7d","modified":1541960969745},{"_id":"themes/next/scripts/helpers/next-url.js","hash":"3db90c52bc8af57c6fa4a9dbdc524e1ecdc8b7b1","modified":1541960969742},{"_id":"themes/next/scripts/tags/exturl.js","hash":"e9dab948e6327b22b4fc0c66cf97f6600a444dd5","modified":1541960969746},{"_id":"themes/next/scripts/tags/full-image.js","hash":"ef2c2985a3edb9f69740740c5bc42d4b692c86fd","modified":1541960969746},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"aface11629970a5c4ee38aaa15550d2caee59560","modified":1541960969747},{"_id":"themes/next/scripts/tags/include-raw.js","hash":"ab4a82a7246265717556c7a42f897430340b88cf","modified":1541960969748},{"_id":"themes/next/scripts/tags/label.js","hash":"bb502616bfabe85de5de903074ec6afe627f8413","modified":1541960969748},{"_id":"themes/next/scripts/tags/note.js","hash":"bd3310a5890bded1bda9ba3ad6f98ee44ecb101a","modified":1541960969749},{"_id":"themes/next/scripts/tags/tabs.js","hash":"2d257e26718d4011509fd6f530d2ea37e50e3e66","modified":1541960969749},{"_id":"themes/next/source/css/main.styl","hash":"2a62e2a11e9cdcc69e538d856d6f9ce228a07c93","modified":1541960969826},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1541960969828},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1541960969828},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1541960969828},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1541960969830},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1541960969830},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1541960969831},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1541960969831},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1541960969832},{"_id":"themes/next/source/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1541960969832},{"_id":"themes/next/source/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1541960969833},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1541960969834},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1541960969834},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1541960969834},{"_id":"themes/next/source/images/logo.svg","hash":"169f56fd82941591dad3abd734a50ec7259be950","modified":1541960969835},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1541960969835},{"_id":"themes/next/source/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1541960969836},{"_id":"themes/next/source/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1541960969836},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1541960969837},{"_id":"source/_posts/Dev/hello-world.md","hash":"a979c3fa4ef100f8db438230eff776d6dbfd0d82","modified":1542190901960},{"_id":"source/_posts/Dev/test1.md","hash":"106c648a6e96a69f45f51b67f1f14d5fc72092c4","modified":1542194089486},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1541960969707},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1541960969708},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1541960969801},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1541960969802},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1541960969803},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1541960969821},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1541960969823},{"_id":"themes/next/layout/_macro/menu/menu-badge.swig","hash":"4eb8e222dc337211efb0d3bbdb5e29af3e6ecdb8","modified":1541960969684},{"_id":"themes/next/layout/_macro/menu/menu-item.swig","hash":"ef791a725ee7292a5207a629dbcae16022a6d068","modified":1541960969684},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"f5e487b0d213ca0bd94aa30bc23b240d65081627","modified":1541960969691},{"_id":"themes/next/layout/_partials/head/head-unique.swig","hash":"0b8349710caf9691741a457aa746add35245048e","modified":1541960969692},{"_id":"themes/next/layout/_partials/head/head.swig","hash":"09109a5c5a301e7cc5e3c7aec32b0164739fc7d4","modified":1541960969693},{"_id":"themes/next/layout/_partials/header/brand.swig","hash":"19050627bc23b0b2c2e65e7248c0f88468eb8ea5","modified":1541960969694},{"_id":"themes/next/layout/_partials/header/index.swig","hash":"c909f6e96373c151dea325bcddfdd8c9522421b6","modified":1541960969695},{"_id":"themes/next/layout/_partials/header/menu.swig","hash":"f3ae3168801304af3d80ec3b84264e1d4201cb89","modified":1541960969695},{"_id":"themes/next/layout/_partials/header/sub-menu.swig","hash":"3f11ae8e9084f39628cd2006931d39a2069b9dd6","modified":1541960969696},{"_id":"themes/next/layout/_partials/search/index.swig","hash":"f6454c452b2e90a8c760321bce7e3dc6119b71fa","modified":1541960969698},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"b2f0d247b213e4cf8de47af6a304d98070cc7256","modified":1541960969699},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"a8c7f9ca7c605d039a1f3bf4e4d3183700a3dd62","modified":1541960969699},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"b25002a83cbd2ca0c4a5df87ad5bff26477c0457","modified":1541960969700},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"9e3d133ac5bcc6cb51702c83b2611a49811abad1","modified":1541960969701},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"d9e2d9282f9be6e04eae105964abb81e512bffed","modified":1541960969702},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"d4fbffd7fa8f2090eb32a871872665d90a885fac","modified":1541960969702},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"580e9d9c4d8783ee6200d845ae16c98979bf1ea3","modified":1541960969706},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"c381f638315a007b1baf5fea879161001fe50cd0","modified":1541960969707},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"c381f638315a007b1baf5fea879161001fe50cd0","modified":1541960969710},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"ff947f3561b229bc528cb1837d4ca19612219411","modified":1541960969711},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"71397a5823e8ec8aad3b68aace13150623b3e19d","modified":1541960969712},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"753d262911c27baf663fcaf199267133528656af","modified":1541960969713},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"1ce5fa218a44cf6e620583e9013e0b674dd6a989","modified":1541960969713},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"a10b7f19d7b5725527514622899df413a34a89db","modified":1541960969714},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"7d94845f96197d9d84a405fa5d4ede75fb81b225","modified":1541960969714},{"_id":"themes/next/layout/_third-party/analytics/firestore.swig","hash":"8ab040fccba41675bc835973515530af8a51f8bd","modified":1541960969715},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"cfc932c5db04fef64cc56d3ba0b8ddf3a15a63bd","modified":1541960969715},{"_id":"themes/next/layout/_third-party/analytics/growingio.swig","hash":"d461dfe853e5317f62e8551f9d8338c66a9935e7","modified":1541960969716},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"39928f358dd13d9fc1a4641800e57be157ecd815","modified":1541960969716},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"bd8382d4f12df207ed52f75f6e5fb06527970167","modified":1541960969717},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"8a399df90dadba5ad4e781445b58f4765aeb701e","modified":1541960969717},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"5a8027328f060f965b3014060bebec1d7cf149c1","modified":1541960969718},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"f9a1647a8f1866deeb94052d1f87a5df99cb1e70","modified":1541960969718},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"4c501ea0b9c494181eb3c607c5526a5754e7fbd8","modified":1541960969720},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"2440f1e66cb8e39cc2bacfd783fb6fe904a628e9","modified":1541960969720},{"_id":"themes/next/layout/_third-party/comments/gitment.swig","hash":"292cdd1059b76d3d10486b71c99d9afb3e59ea44","modified":1541960969721},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"34cc66d4dbada2d561ba6f70fd9a75207c5adbd4","modified":1541960969721},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"c49a3b10b2f2f64a7ac41fa3d436fd2c8d31cca8","modified":1541960969722},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"d05e70a416963023ee1978e4168d58bcfd956ed3","modified":1541960969722},{"_id":"themes/next/layout/_third-party/math/index.swig","hash":"30e9e55d9af2ced6e6b156a042026a8b480f0ab0","modified":1541960969726},{"_id":"themes/next/layout/_third-party/math/katex.swig","hash":"860de4ce6fccc516d2f779a4b600a4214d8c18e2","modified":1541960969726},{"_id":"themes/next/layout/_third-party/math/mathjax.swig","hash":"c0c2fd87e71f0beb542aa50c0bc875da5aa5c44b","modified":1541960969727},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"34599633658f3b0ffb487728b7766e1c7b551f5a","modified":1541960969732},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"71c897f9b107dd0de1b7f649633cf583c206a9db","modified":1541960969733},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"fe95dd3d166634c466e19aa756e65ad6e8254d3e","modified":1541960969734},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"d8c98938719284fa06492c114d99a1904652a555","modified":1541960969735},{"_id":"themes/next/scripts/filters/after_post_render/exturl.js","hash":"899b5a5e80e2bf441b7c40f24123f26a5097b8de","modified":1541960969740},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"c2b340eb3ed6a83b756495bf97155a1c66d5ae27","modified":1542047000053},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"07f7da320689f828f6e36a6123807964a45157a0","modified":1541960969801},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"8aa98ae349908736ba43196c42498fd5bdeb780a","modified":1541960969803},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"d1deb849e697cfb6258b8ab7bfb47e219210ccd9","modified":1541960969803},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"8d6cf29f63c90364f4d3c336f7c9bb794b4c46cc","modified":1541960969820},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"a25408534f8fe6e321db4bbf9dd03335d648fe17","modified":1541960969821},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"72927abd51d3a607a6ba32cf882390792b34e834","modified":1541960969822},{"_id":"themes/next/source/css/_variables/base.styl","hash":"e27a1034b0cd9821bab094565e9aa9bb80c6fa3e","modified":1541960969823},{"_id":"themes/next/source/js/src/affix.js","hash":"ad343aa406fd8181b5f310434817ce98fc2219e3","modified":1541960969838},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"84906eeae57bd06744dd20160b93eacf658f97e2","modified":1541960969839},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"c7e2a588b679d46379124141bb2f30bc2f3210e2","modified":1541960969839},{"_id":"themes/next/source/js/src/exturl.js","hash":"c48aa4b3c0e578a807fd3661e6cd4f3890777437","modified":1541960969840},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"1512c751d219577d338ac0780fb2bbd9075d5298","modified":1541960969842},{"_id":"themes/next/source/js/src/motion.js","hash":"4c7f94e499743f4cc958f6cd1260a93d765d3051","modified":1541960969842},{"_id":"themes/next/source/js/src/post-details.js","hash":"7d309b771e86c7e22ce11cc25625481ef7d5985c","modified":1541960969843},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"c4867626afab749404daf321367f9b6b8e223f69","modified":1541960969844},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"68d3690152c89e7adb08bb35ec28dbda2bd93686","modified":1541960969845},{"_id":"themes/next/source/js/src/utils.js","hash":"406145e8eda9f0cec4f7a09b7c1f9247aa24e46e","modified":1541960969846},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"b4aefc910578d76b267e86dfffdd5121c8db9aec","modified":1541960969847},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"03ddbf76c1dd1afb93eed0b670d2eee747472ef1","modified":1541960969847},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"c31ff06a740955e44edd4403902e653ccabfd4db","modified":1541960969849},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"ee33b2798b1e714b904d663436c6b3521011d1fa","modified":1541960969849},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"71e7183634dc1b9449f590f15ebd7201add22ca7","modified":1541960969850},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"bf172816a9c57f9040e3d19c24e181a142daf92b","modified":1541960969867},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"dbbfb50f6502f6b81dcc9fee7b31f1e812da3464","modified":1541960969867},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"dde584994ac13dc601836e86f4cf490e418d9723","modified":1541960969868},{"_id":"source/_posts/Dev/hexo/hexo-tutorial.md","hash":"562739215dd0e282d494b542730507288e7d0984","modified":1544553600144},{"_id":"source/_posts/Dev/nodejs/nodejs01.md","hash":"01815e5bf0d2bad7472dbcb6660fe1699c967b4d","modified":1544553542649},{"_id":"source/_posts/Dev/nodejs/nodejs02.md","hash":"dacab261df5f3f6c4516738701153ee62fd8b57c","modified":1544553556550},{"_id":"source/_posts/Dev/nodejs/nodejs03.md","hash":"840ada70fe36dd48fa26493e274655db68624865","modified":1544553564025},{"_id":"source/_posts/Dev/nodejs/nodejs04.md","hash":"7e294a49a22e738f2d56f08308f1a46b42ce4b21","modified":1544553571813},{"_id":"source/_posts/Dev/nodejs/nodejs05.md","hash":"ab5d1762fdcaa056452e0d9c82d760a7fd107e42","modified":1544553578820},{"_id":"source/_posts/Dev/nodejs/nodejs06.md","hash":"c34363a31c3ae42233ff03a6db5643e03f5bf640","modified":1544553587819},{"_id":"themes/next/source/lib/jquery/index.js","hash":"17a740d68a1c330876c198b6a4d9319f379f3af2","modified":1541960969861},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"6e076b5e183eedf425a445e99851f938789c3194","modified":1541960969731},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"2530de0f3125a912756f6c0e9090cd012134a4c5","modified":1541960969732},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"1fd0650a8e5bff2c7146c810b04b3b88ee1f670e","modified":1541960969751},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"237d185ac62ec9877e300947fa0109c44fb8db19","modified":1541960969752},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"8b32928686c327151e13d3ab100157f9a03cd59f","modified":1541960969755},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"ff4489cd582f518bba6909a301ac1292a38b4e96","modified":1541960969755},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"7ad4081466b397e2a6204141bb7768b7c01bd93c","modified":1541960969756},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"4f2801fc4cf3f31bf2069f41db8c6ce0e3da9e39","modified":1541960969768},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"6eb4bcc3056bd279d000607e8b4dad50d368ca69","modified":1541960969784},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"df72d012a51e0c705aa14c68cffd689a312f7250","modified":1541960969796},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"1da5c800d025345f212a3bf1be035060f4e5e6ed","modified":1541960969796},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"ab775f23ad475efb25376b5aad752ae8b56cfd8c","modified":1541960969798},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"3f40e8a9fe8e7bd5cfc4cf4cbbbcb9539462e973","modified":1541960969798},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a17e2b871a335f290afb392a08f94fd35f59c715","modified":1541960969799},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"60179df0e5c9f7c2e9fda046040536c5d8b02f65","modified":1541960969799},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"fbb6be577529c750ef7c872fe7abdc7ab0faf0f8","modified":1541960969795},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"8e67eea73e9346f51ef26ecb35f67a1f5f672dcd","modified":1541960969805},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"d0e9065b0dbbc01811259f0597d1790268b4881b","modified":1541960969805},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"d0bfd1bef988c76f7d7dd72d88af6f0908a8b0db","modified":1541960969806},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"b1025c421406d2c24cc92a02ae28c1915b01e240","modified":1541960969806},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"a80782a6eb3b40da2e14251da49069aff3115d8a","modified":1541960969807},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"fa6c00fdaf8f0ca3b690a5a556671745fb67e2c9","modified":1541960969808},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1541960969809},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"2ccb9bdc309b7c1ef183a3dbb0a4621bec54a328","modified":1541960969809},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"31127dcbf4c7b4ada53ffbf1638b5fe325b7cbc0","modified":1541960969812},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"748dbfbf9c08e719ddc775958003c64b00d39dab","modified":1541960969812},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"4ed12bf17eeb7cd4f22dd01fdd486cda68d169a8","modified":1541960969813},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1541960969814},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"b26f8a3394d8357a5bfd24d9f8bf62d7b4063ebb","modified":1541960969814},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"bce344d3a665b4c55230d2a91eac2ad16d6f32fd","modified":1541960969816},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"ccf5a4761cb0ce451b5e994cfabf8769248a45c1","modified":1541960969816},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"11fcaaf7524445a194801e1048ea2fb84b316414","modified":1541960969817},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"1f6e2ce674735269599acc6d77b3ea18d31967fc","modified":1541960969818},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"9f125e2b46ac4542c600fa514b66daf2f58f4c07","modified":1541960969818},{"_id":"themes/next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"be72740313a9a0477b8a22f62e4c8ffa6d23a2e5","modified":1541960969819},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"a558803ca81cceae2bdc22c18ef638fcc023681b","modified":1541960969819},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"e185d1bb2f5805db2bddaf9b0ed1e689f95bcd13","modified":1541960969844},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"3655f1fdf1e584c4d8e8d39026093ca306a5a341","modified":1541960969851},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1541960969851},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"88af80502c44cd52ca81ffe7dc7276b7eccb06cf","modified":1541960969853},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"41ea797c68dbcff2f6fb3aba1d1043a22e7cc0f6","modified":1541960969863},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"a817b6c158cbc5bab3582713de9fe18a18a80552","modified":1541960969863},{"_id":"source/_posts/Dev/hexo/hexo-tutorial/analytics-baidu-id.png","hash":"3dd22872919bbe242052fbd415f530dd30dbf851","modified":1542105962409},{"_id":"source/_posts/Dev/nodejs/nodejs01/image10.png","hash":"ca9371e64d63f5092df0e0254e62eae95eb39c50","modified":1341193934000},{"_id":"source/_posts/Dev/nodejs/nodejs01/image11.png","hash":"85990044fd2008a4e47eacb95b81702f3a03d1ed","modified":1341193934000},{"_id":"source/_posts/Dev/nodejs/nodejs01/image12.png","hash":"fe2d9fc5d5b2b034764a87d670e73d5a094b7108","modified":1341193934000},{"_id":"source/_posts/Dev/nodejs/nodejs01/image13.png","hash":"d4148ac76a67463a7a1ab769ab94d52243780182","modified":1341193934000},{"_id":"source/_posts/Dev/nodejs/nodejs01/image14.png","hash":"4f6f3a6f823c03135ec20fb51a603698c5d43e29","modified":1341193934000},{"_id":"source/_posts/Dev/nodejs/nodejs01/image15.png","hash":"3b408349ac397cb3b6f0661194b4485a9c390871","modified":1341193934000},{"_id":"source/_posts/Dev/nodejs/nodejs01/image16.png","hash":"82ebe4237bee053282c72f3952d9f7542be0465f","modified":1341193934000},{"_id":"source/_posts/Dev/nodejs/nodejs01/image17.png","hash":"92c37c334f20fb6b8065acac451c975c1754f1e3","modified":1341193934000},{"_id":"source/_posts/Dev/nodejs/nodejs01/image18.png","hash":"02b07341caded4981490252a2f24fb038c9883d2","modified":1341193934000},{"_id":"source/_posts/Dev/nodejs/nodejs01/image19.png","hash":"78d9b60e3145bc159dd187654b5ef239fefd97de","modified":1341193934000},{"_id":"source/_posts/Dev/nodejs/nodejs01/image2.png","hash":"3cfa9b403d1b94cf8bcd6827f7ea95928c1fe633","modified":1341193934000},{"_id":"source/_posts/Dev/nodejs/nodejs01/image20.png","hash":"5f84b974e3010e60edc5964bb2a402b9b030da52","modified":1341193934000},{"_id":"source/_posts/Dev/nodejs/nodejs01/image22.png","hash":"6b5ab61cc82ff356bb8aa1d8a686dc48db283b55","modified":1341193934000},{"_id":"source/_posts/Dev/nodejs/nodejs01/image23.png","hash":"f14b0e6b031ae7a4330f3c0b3922942b6fa22c05","modified":1341193934000},{"_id":"source/_posts/Dev/nodejs/nodejs01/image24.png","hash":"391a6e941a2157ae76cbab299632b339cfa77021","modified":1341193934000},{"_id":"source/_posts/Dev/nodejs/nodejs01/image25.png","hash":"ce838774712735f630310a97ceb9fd9b71442e3f","modified":1341193934000},{"_id":"source/_posts/Dev/nodejs/nodejs01/image27.png","hash":"cc8e40a2f4331873c5206ec8f4dd12d7bfa012f2","modified":1341193934000},{"_id":"source/_posts/Dev/nodejs/nodejs01/image28.png","hash":"a8f85ef0a4a36799c562c4b53a4a9ed956abcb75","modified":1341193934000},{"_id":"source/_posts/Dev/nodejs/nodejs01/image29.png","hash":"390fd16011a2b1641104ae4a97798a38cdc11c23","modified":1341193934000},{"_id":"source/_posts/Dev/nodejs/nodejs01/image30.png","hash":"401f7912c48b972c9d5e2948a96e1471e729b635","modified":1341193934000},{"_id":"source/_posts/Dev/nodejs/nodejs01/image31.png","hash":"4f4fc0b57466d37ef0bdab0d8e40f666d20a0223","modified":1341193934000},{"_id":"source/_posts/Dev/nodejs/nodejs01/image32.png","hash":"9357aee3efbf10e6bd587333f257ddb5e65b811b","modified":1341193934000},{"_id":"source/_posts/Dev/nodejs/nodejs01/image3.png","hash":"36032b55bcc1ae048f08a47b9ad2190c9ecdb691","modified":1341193934000},{"_id":"source/_posts/Dev/nodejs/nodejs01/image33.png","hash":"5e84aad8e854bceb98829b0d78779fbc8f2f633b","modified":1341193934000},{"_id":"source/_posts/Dev/nodejs/nodejs01/image34.png","hash":"8bdb88d1d08ca9b16bf0c14a1b6280166d5135e0","modified":1341193934000},{"_id":"source/_posts/Dev/nodejs/nodejs01/image35.png","hash":"aca35ca9a1e2c5c47804cafdf2e226269352c66d","modified":1341193934000},{"_id":"source/_posts/Dev/nodejs/nodejs01/image36.png","hash":"2e2b3d991e8247b654ea64d2fa2641c7b5861222","modified":1341193934000},{"_id":"source/_posts/Dev/nodejs/nodejs01/image37.png","hash":"7254c268f147696360d711f7b382814ceaf28d1d","modified":1341193934000},{"_id":"source/_posts/Dev/nodejs/nodejs01/image38.png","hash":"3f0af5fb7f34b64a935c7e688c72645eff04b879","modified":1341193934000},{"_id":"source/_posts/Dev/nodejs/nodejs01/image39.png","hash":"ec4233f5dec9484473eb50991a19f6f32c6a48b8","modified":1341193934000},{"_id":"source/_posts/Dev/nodejs/nodejs01/image4.png","hash":"9fe5aca3aba5d72bbf83627bc19682de03f637c5","modified":1341193934000},{"_id":"source/_posts/Dev/nodejs/nodejs01/image40.png","hash":"bb89305fb079e19106ab432ab3e3dc229de283df","modified":1341193934000},{"_id":"source/_posts/Dev/nodejs/nodejs01/image42.png","hash":"730168420d7f6f301157ba0e306b387830ef59fc","modified":1341193934000},{"_id":"source/_posts/Dev/nodejs/nodejs01/image43.png","hash":"f6b8dd5c62a882775dc6e5dc2b5f2caf51fa53c3","modified":1341193934000},{"_id":"source/_posts/Dev/nodejs/nodejs01/image45.png","hash":"6c713733ce05a3090e66ae83c7c53cf0cb96563e","modified":1341193934000},{"_id":"source/_posts/Dev/nodejs/nodejs01/image44.png","hash":"fefe3a728bd9e6e844209eef34be000ab941bbe7","modified":1341193934000},{"_id":"source/_posts/Dev/nodejs/nodejs01/image46.png","hash":"4aad66fde70123342db395a74a67502d0712eaa4","modified":1341193934000},{"_id":"source/_posts/Dev/nodejs/nodejs01/image47.png","hash":"6f26fa7ac0ec5392850a4d269095646ef0b72092","modified":1341193934000},{"_id":"source/_posts/Dev/nodejs/nodejs01/image5.png","hash":"e448e041520cabe6d5fb997fa813985cdb12afdc","modified":1341193934000},{"_id":"source/_posts/Dev/nodejs/nodejs01/image7.png","hash":"64674385949417537e03805ddd49a74f5a842e5a","modified":1341193934000},{"_id":"source/_posts/Dev/nodejs/nodejs01/image8.png","hash":"bf8523d9b94f232798c814bd2714383b04c37142","modified":1341193934000},{"_id":"source/_posts/Dev/nodejs/nodejs01/image9.png","hash":"03cae63c2bb10594a3a9160cb9e05908eb76fd2e","modified":1341193934000},{"_id":"source/_posts/Dev/nodejs/nodejs02/image10.png","hash":"66d2431f5401a75e45fac0ffa75ff279353988d3","modified":1341193934000},{"_id":"source/_posts/Dev/nodejs/nodejs02/image11.png","hash":"f3b41e9ff6c29b36c2159ffd8236f4180cda8d77","modified":1341193934000},{"_id":"source/_posts/Dev/nodejs/nodejs02/image12.png","hash":"8ef7ad8565357abcb7c4f09327592bc8b45eba41","modified":1341193934000},{"_id":"source/_posts/Dev/nodejs/nodejs02/image14.png","hash":"90cf3b8d037d3e2c8ddd07a69032957b6d15c2da","modified":1341193934000},{"_id":"source/_posts/Dev/nodejs/nodejs02/image15.png","hash":"fd684c279362ce86f8aaa84ac7b97c5f175fb93e","modified":1341193934000},{"_id":"source/_posts/Dev/nodejs/nodejs02/image16.png","hash":"a930d516bc44c777396c2ba07890d6d5b7050de8","modified":1341193934000},{"_id":"source/_posts/Dev/nodejs/nodejs02/image17.png","hash":"fc13ae2df218a8117124582850972a040df06a09","modified":1341193934000},{"_id":"source/_posts/Dev/nodejs/nodejs02/image20.png","hash":"4df7e4d5f5bfe72521b2568b2fbbc8aa711ba01d","modified":1341193934000},{"_id":"source/_posts/Dev/nodejs/nodejs02/image21.png","hash":"042bc0e7145b048e2d2413e7231c061a4ef4a450","modified":1341193934000},{"_id":"source/_posts/Dev/nodejs/nodejs02/image22.png","hash":"8c2444dd27e297536680f7296d509d4ad896abdc","modified":1341193934000},{"_id":"source/_posts/Dev/nodejs/nodejs03/image11.png","hash":"d0df8099c377f12d768aade715a813cb697cb323","modified":1341193934000},{"_id":"source/_posts/Dev/nodejs/nodejs03/image13.png","hash":"3ce1c5fb7daf267fc3e66b0e4024ef18c19d257b","modified":1341193934000},{"_id":"source/_posts/Dev/nodejs/nodejs03/image16.png","hash":"2bba7800cd4b76dad950c63af119934ede0b45c8","modified":1341193934000},{"_id":"source/_posts/Dev/nodejs/nodejs03/image17.png","hash":"9bdf778a4c57707ec98bee1f053b98726c915249","modified":1341193934000},{"_id":"source/_posts/Dev/nodejs/nodejs03/image18.png","hash":"28918af3d6d9bc86742c4fda4811ad92f1aa357d","modified":1341193934000},{"_id":"source/_posts/Dev/nodejs/nodejs03/image20.png","hash":"9fbeef17e88a468bb20d4aa38b0e929de2164425","modified":1341193934000},{"_id":"source/_posts/Dev/nodejs/nodejs03/image21.png","hash":"18c02d97000294d0de8a22761933e2ca2ec2f40b","modified":1341193934000},{"_id":"source/_posts/Dev/nodejs/nodejs03/image22.png","hash":"5936d4cf91395b82b6b2948cffa78c6141860bfe","modified":1341193934000},{"_id":"source/_posts/Dev/nodejs/nodejs03/image3.png","hash":"e0493353ba9edc3fde64d5ad6f5b1e4dae60802a","modified":1341193934000},{"_id":"source/_posts/Dev/nodejs/nodejs03/image4.jpeg","hash":"30f33e5b6b46efc695d8121686be3f202a1157ab","modified":1341193934000},{"_id":"source/_posts/Dev/nodejs/nodejs03/image5.png","hash":"bb1f95875d02afc964bf743e7d0ff687caf50126","modified":1341193934000},{"_id":"source/_posts/Dev/nodejs/nodejs03/image6.png","hash":"68b6d287c0d904f5f2f3bb25d23d967656131db5","modified":1341193934000},{"_id":"source/_posts/Dev/nodejs/nodejs03/image7.png","hash":"f783c82e9e36afadcf517038c7bb3e5568d30114","modified":1341193934000},{"_id":"source/_posts/Dev/nodejs/nodejs03/image23.png","hash":"eda931ad88b7e50b0005c1c7a5d56717d105d129","modified":1341193934000},{"_id":"source/_posts/Dev/nodejs/nodejs03/image9.png","hash":"f0e22a252736a9e31908ed6bcbbd794124587da8","modified":1341193934000},{"_id":"source/_posts/Dev/nodejs/nodejs04/image2.png","hash":"f64534f93aa117abf36813a6b6900e0ee569641a","modified":1341193934000},{"_id":"source/_posts/Dev/nodejs/nodejs04/image3.png","hash":"6e71e8635e87c09a58619ed7084dffa4bdf89e59","modified":1341193934000},{"_id":"source/_posts/Dev/nodejs/nodejs04/image5.png","hash":"e5d35ab013cbfac2af3e2b87cf9284547035aee5","modified":1341193934000},{"_id":"source/_posts/Dev/nodejs/nodejs04/image6.png","hash":"261fbdc7dad7db4bf2afebd6b71facb9c219787f","modified":1341193934000},{"_id":"source/_posts/Dev/nodejs/nodejs04/image8.png","hash":"9c400ac3947fc06a2d5697c19693a4a1790bc9be","modified":1341193934000},{"_id":"source/_posts/Dev/nodejs/nodejs05/image11.png","hash":"95c291f94625fd33628bb0d2109f3622778fffb8","modified":1341193934000},{"_id":"source/_posts/Dev/nodejs/nodejs05/image10.png","hash":"3ff17da809779fc63f8d7b7b5e33eb180f77c4ce","modified":1341193934000},{"_id":"source/_posts/Dev/nodejs/nodejs05/image3.png","hash":"d0d12da26892dd951612835b43f1ecb2ed84e5f4","modified":1341193934000},{"_id":"source/_posts/Dev/nodejs/nodejs05/image5.png","hash":"5f8c2b029f4555e92c22d9690a03c1bf11030310","modified":1341193934000},{"_id":"source/_posts/Dev/nodejs/nodejs05/image6.png","hash":"cc460d75842d13216333575ff9bd8fba4edb7b95","modified":1341193934000},{"_id":"source/_posts/Dev/nodejs/nodejs05/image9.png","hash":"a9fb8fa75fb24adc25a03d803f78ec2529edbcc7","modified":1341193934000},{"_id":"source/_posts/Dev/nodejs/nodejs06/1542533881927.png","hash":"6b76ee986204a82af296c2addda1fb139997c61e","modified":1542533881975},{"_id":"source/_posts/Dev/nodejs/nodejs06/image2.png","hash":"b4a44ce312d78dbf1bd61183b1ca49e83ca695e0","modified":1341193934000},{"_id":"source/_posts/Dev/nodejs/nodejs06/image3.png","hash":"319bc7e635c268402651da30d73bee6e2d7aeffc","modified":1341193934000},{"_id":"source/_posts/Dev/nodejs/nodejs06/image4.png","hash":"1bc98645ffb41a60694a35c2b15e3f1ebd1bcdc6","modified":1341193934000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1541960969857},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1541960969858},{"_id":"source/_posts/Dev/nodejs/nodejs01/image21.png","hash":"5f5e03d1dd5b4e52a4f9a5eba4fc7228481b6193","modified":1341193934000},{"_id":"source/_posts/Dev/nodejs/nodejs01/image26.png","hash":"67b4c087a4bbbcf875a74d3e0a3a540e4e8f7f65","modified":1341193934000},{"_id":"source/_posts/Dev/nodejs/nodejs01/image41.png","hash":"221f6b325f4a5627f1e92b6628e359ae89ebbc3e","modified":1341193934000},{"_id":"source/_posts/Dev/nodejs/nodejs02/image18.png","hash":"5acade5dc8303aec0169651ce40b959000bae2e7","modified":1341193934000},{"_id":"source/_posts/Dev/nodejs/nodejs02/image19.png","hash":"f20709b03b3921f87dcf27beb89906be7e168632","modified":1341193934000},{"_id":"source/_posts/Dev/nodejs/nodejs03/image12.png","hash":"ff87dc5b4d67536b36f1c9c9b8086249f6167128","modified":1341193934000},{"_id":"source/_posts/Dev/nodejs/nodejs03/image15.png","hash":"7aab14709acf9e4080aac5e4b8d330a78e7bf346","modified":1341193934000},{"_id":"source/_posts/Dev/nodejs/nodejs03/image19.png","hash":"d594991296a394559ca92e2a988f96cf957467fd","modified":1341193934000},{"_id":"source/_posts/Dev/nodejs/nodejs03/image8.png","hash":"61e046c3c89ce8b3927dbceb49ab457d49d43116","modified":1341193934000},{"_id":"source/_posts/Dev/nodejs/nodejs04/image4.png","hash":"36858dae0a248e86b2217460dbaf978dbf789157","modified":1341193934000},{"_id":"source/_posts/Dev/nodejs/nodejs04/image7.png","hash":"221830abc803f7614047e001a6002031c82304be","modified":1341193934000},{"_id":"source/_posts/Dev/nodejs/nodejs05/image4.png","hash":"5dfb3ea2a1f4c05cfbd8e1f4f39484b654277977","modified":1341193934000},{"_id":"source/_posts/Dev/nodejs/nodejs05/image8.png","hash":"fa0264d5c7a42aed1b62429b944a25efb7373c06","modified":1341193934000},{"_id":"source/_posts/Dev/nodejs/nodejs06/image5.png","hash":"a0f3c68a081fa3e21b484396c8c8bcfe118d543f","modified":1341193934000},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"7dd247c8869fdefb5a007045d00f3ef8ceecf300","modified":1541960969756},{"_id":"themes/next/source/css/_common/components/header/github-banner.styl","hash":"3f3d2a43d1a326bad25b633c8ec9ddd87867224c","modified":1541960969757},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"34f5ac3c1ed2dd31e9297cc4c0733e71bc2e252f","modified":1541960969758},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d63e0cacc53dd375fcc113465a4328c59ff5f2c1","modified":1541960969759},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"1727702eac5d326b5c81a667944a245016668231","modified":1541960969761},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"0656e753f182c9f47fef7304c847b7587a85ef0d","modified":1541960969760},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"167986d0f649516671ddf7193eebba7b421cd115","modified":1541960969762},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"5a3b94bf978a9259d0a3a66bdfa8d7aa336a7934","modified":1541960969762},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"1ec3102ee8f5b8cc0877da1fd109d37470401e7b","modified":1541960969760},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"7fe4d4d656e86276c17cb4e48a560cb6a4def703","modified":1541960969764},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"cdd55b143453b0ca8bfabc9843abe9b4f85fb516","modified":1541960969765},{"_id":"themes/next/source/css/_common/components/pages/breadcrumb.styl","hash":"630be616447a982413030e561bbd3a80ac14b120","modified":1541960969765},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"7fb593f90d74a99c21840679933b9ef6fdc16a61","modified":1541960969766},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"ad4cae23c8e383f4fabc9a2a95bca6055020d22e","modified":1541960969766},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"4e3838d7ac81d9ad133960f0f7ed58a44a015285","modified":1541960969767},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"ef588bc56eaa5b84296e28f4c2c36d9ea8b3b8c3","modified":1541960969767},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"62fbbd32cf5a99ae550c45c763a2c4813a138d01","modified":1541960969769},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"3241c9ae85ca11b6c4e125ac471aa4342ba1ce9c","modified":1541960969769},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"fc94dd09b4245143b452d6cf2fc4c12134d99d6d","modified":1541960969771},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"a200c0a1c5a895ac9dc41e0641a5dfcd766be99b","modified":1541960969771},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"317c9ceda655e9dc373ce8e7b71d20b794fce9a4","modified":1541960969772},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"cd9e214e502697f2f2db84eb721bac57a49b0fce","modified":1541960969772},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"330c8884efb5612e7eb03986d87d29e8b0651974","modified":1541960969772},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"27deb3d3a243d30022055dac7dad851024099a8b","modified":1541960969773},{"_id":"themes/next/source/css/_common/components/post/post-reading_progress.styl","hash":"82bc7fa5d38d98e98cc25f9a73189024fda25e63","modified":1541960969773},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"ff50a32ae6fea5fcdf2939dc9b01e1eb76cc73f0","modified":1541960969774},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"b2495ae5e04dcca610aacadc47881d9e716cd440","modified":1541960969774},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"5a982d8ef3b3623ea5f59e63728990f5623c1b57","modified":1541960969775},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"539fc0880b2e035e8316d5d4b423703195c1b7ba","modified":1541960969776},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"01567edaea6978628aa5521a122a85434c418bfd","modified":1541960969776},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"5c3141d58970a0614896b6a62fd7a8a8caf4e401","modified":1541960969777},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"2e36956c5f8802f703c7ce3893d16323a0e09d4c","modified":1541960969777},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"fa57ec9a6f1943c0558856dfba2d6b8faca0cd4d","modified":1541960969778},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"00a504620c454287111dc0ace64c989e1ff97f54","modified":1541960969779},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"41858f2dfd34a57d0a2016b1bce08efb61943b7a","modified":1541960969780},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"11c22f0fb3f6beb13e5a425ec064a4ff974c13b7","modified":1541960969780},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"61f8cea3c01acd600e90e1bc2a07def405503748","modified":1541960969781},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"1153bb71edf253765145559674390e16dd67c633","modified":1541960969781},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"9e05a2232faabb41bcebb51d545d897a76f077da","modified":1541960969782},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"a1521d48bb06d8d703753f52a198baa197af7da2","modified":1541960969782},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"94d76e6da600a36d80e2470326ebb6b3be447ccb","modified":1541960969783},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"e71652d3216e289c8548b1ea2357822c1476a425","modified":1541960969783},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"2fe76476432b31993338cb45cdb3b29a518b6379","modified":1541960969785},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"2d58ad90f148e845bc7023751a7a13260600f8d6","modified":1541960969785},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"2ad1a2a9bbf6742d1b0762c4c623b68113d1e0fe","modified":1541960969786},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"2ab1322fe52ab5aafd49e68f5bd890e8380ee927","modified":1541960969787},{"_id":"themes/next/source/css/_common/components/tags/note-modern.styl","hash":"b7076e58d647265ee0ad2b461fe8ce72c9373bc5","modified":1541960969787},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"9a409b798decdefdaf7a23f0b11004a8c27e82f3","modified":1541960969788},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"154a87a32d2fead480d5e909c37f6c476671c5e6","modified":1541960969788},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"f1640253cbbf71d0c04c34c25bd61045894f98bc","modified":1541960969789},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"f4d8144c22544bdb89787c14ab9d39578dae4b7c","modified":1541960969790},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"a6e7d698702c2e383dde3fde2abde27951679084","modified":1541960969790},{"_id":"themes/next/source/css/_common/components/third-party/gitment.styl","hash":"874278147115601d2abf15987f5f7a84ada1ac6b","modified":1541960969791},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"10599e16414a8b7a76c4e79e6617b5fe3d4d1adf","modified":1541960969792},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"16087276945fa038f199692e3eabb1c52b8ea633","modified":1541960969792},{"_id":"themes/next/source/css/_common/components/third-party/needsharebutton.styl","hash":"28825ae15fa20ae3942cdaa7bcc1f3523ce59acc","modified":1541960969793},{"_id":"themes/next/source/css/_common/components/third-party/related-posts.styl","hash":"acfdd76b1c90d2e384affb3d0006a39b524609d2","modified":1541960969793},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"c31fbaec7e6373ecfb8588500b972d451695a6ad","modified":1541960969794},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"a07aa12cc36ac5c819670c2a3c17d07ed7a08986","modified":1541960969810},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1541960969811},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1541960969815},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"4237c6e9d59da349639de20e559e87c2c0218cfd","modified":1541960969866},{"_id":"source/_posts/Dev/nodejs/nodejs01/image6.png","hash":"32cc2f0202699cb988351c252036b07f52b100c1","modified":1341193934000},{"_id":"source/_posts/Dev/nodejs/nodejs02/image13.png","hash":"4712e11bfbf7bcdb0197113437256638880c4700","modified":1341193934000},{"_id":"source/_posts/Dev/nodejs/nodejs03/image10.png","hash":"7a2916c111d7dc18a5221023dc897c5be082eb89","modified":1341193934000},{"_id":"source/_posts/Dev/nodejs/nodejs03/image2.png","hash":"7a856f622e85dadf57be722704b88036cbc26da2","modified":1341193934000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1541960969856},{"_id":"source/_posts/Dev/nodejs/nodejs05/image7.png","hash":"9355600e7778a47e49c26730e54409d81e5ed8ff","modified":1341193934000},{"_id":"source/_posts/Dev/nodejs/nodejs03/image14.png","hash":"fa4d1be16352f61dd877e7b225181b557ba2ec0a","modified":1341193934000},{"_id":"source/_posts/Dev/hexo/hexo-tutorial/wanko.gif","hash":"b5a38911798dc9ce3bd858f5f401566048c5dbf4","modified":1542104675180},{"_id":"source/_posts/Dev/nodejs/nodejs05/image2.png","hash":"37e07e36d75154b03361ede1e6a301924f42e7f3","modified":1341193934000},{"_id":"source/_posts/Dev/hexo/hexo-tutorial/hijiki.gif","hash":"b276efb514bc45184a9fd972a6111dd9aec6a676","modified":1542104696514},{"_id":"source/images/avatar3.jpg","hash":"fe55e2a87fb34ad804433387341d21e751a6aa93","modified":1539235527269},{"_id":"source/images/avatar2.jpg","hash":"13845c895358f54c803cf13e6c817863002f070a","modified":1539235487300},{"_id":"source/_posts/Dev/hexo/hexo-tutorial/tororo.gif","hash":"d3a4bec80c695e24f2fc844cdb374cefb508fe3e","modified":1542104696511},{"_id":"source/images/avatar.png","hash":"c693c7ba433abbacdf8b24b603ac6c88d0c44e9c","modified":1537421080285},{"_id":"source/_posts/Dev/hexo/hexo-tutorial/koharu.gif","hash":"8485ac75ec4676284d269f8dcdc45bddadbb5f6d","modified":1542104689451},{"_id":"source/_posts/Dev/hexo/hexo-tutorial/tsumiki.gif","hash":"422ca75a1ad9788c56735b7cd3b8bd2b755deee8","modified":1542104682997},{"_id":"source/_posts/Dev/hexo/hexo-tutorial/Epsilon2.1.gif","hash":"6d01fa0ecbc2dc4dc94684d5f0f00c6837206453","modified":1542104641814},{"_id":"source/_posts/Dev/hexo/hexo-tutorial/ni-j.gif","hash":"c94f419e34d28a0e7e9b91d830050ffd3391a98d","modified":1542104643492},{"_id":"source/_posts/Dev/hexo/hexo-tutorial/haruto.gif","hash":"ed739c3ccf413d2b8af8cc46ee191eef10adffdb","modified":1542104695943},{"_id":"source/_posts/Dev/hexo/hexo-tutorial/nito.gif","hash":"a46ed7dc985168dc55c05537877ca32deeaac382","modified":1542104674094},{"_id":"source/_posts/Dev/hexo/hexo-tutorial/haru.gif","hash":"f7d81d74d1bad0a747e887f99a53712d30325d30","modified":1542104658523},{"_id":"source/_posts/Dev/hexo/hexo-tutorial/z16.gif","hash":"1effb55b48a8531348e083d2c501a193940f4334","modified":1542104691366},{"_id":"source/_posts/Dev/hexo/hexo-tutorial/Unitychan.gif","hash":"4295b1714e5a08e9dfa1c6d7a480a75ecc7e46fe","modified":1542104709579},{"_id":"source/_posts/Dev/hexo/hexo-tutorial/nico.gif","hash":"793d1619884ba8300d956bbd71f7f9db70505513","modified":1542104659799},{"_id":"source/_posts/Dev/hexo/hexo-tutorial/Gantzert_Felixander.gif","hash":"9c69e5fb6ce6ba41cc374eaf1cc36c2d95444296","modified":1542104656122},{"_id":"source/_posts/Dev/hexo/hexo-tutorial/nipsilon.gif","hash":"50abaf18f0a03bc93c6aabadc8be73c9e2976b71","modified":1542104687859},{"_id":"source/_posts/Dev/hexo/hexo-tutorial/shizuku.gif","hash":"a744acb89dc1a282af819e0fcbbbe8a782f8f116","modified":1542104693506},{"_id":"source/_posts/Dev/hexo/hexo-tutorial/hibiki.gif","hash":"a2b5f7016155736bbaafa9715a47eaa4924e5057","modified":1542104708562},{"_id":"source/_posts/Dev/hexo/hexo-tutorial/nietzche.gif","hash":"198ae4cd1a4cd24c7b8f9e86498bc9ccb45264ae","modified":1542104693871},{"_id":"source/_posts/Dev/hexo/hexo-tutorial/miku.gif","hash":"162ec4475f47e728ee85d929460f5b59bf1953d2","modified":1542104675795},{"_id":"public/baidusitemap.xml","hash":"fcb4d0d1a0b474026d6a200a7ac21870639e2c2f","modified":1542573863873},{"_id":"public/atom.xml","hash":"bdcc7214d87dda598bbc42f255537eeddcbd5d00","modified":1542573863873},{"_id":"public/search.json","hash":"48a1455a0c354eb172a9466b7d4431d0057f1b7d","modified":1542573863902},{"_id":"public/sitemap.xml","hash":"40def66b56b59f4e5d84ced01410f4a5fbfb18b1","modified":1542573863902},{"_id":"public/about/index.html","hash":"637289b00e0701feba940a4668eb21008a70b29c","modified":1542573864092},{"_id":"public/404/index.html","hash":"dfdd257cf69bc0f70659a55ae760aab9fdb8f040","modified":1542573864092},{"_id":"public/categories/index.html","hash":"d6893fcf5d570d83ffc567e8469021c6c94440c4","modified":1542573864093},{"_id":"public/link/index.html","hash":"a30fa93160d6ee6b17c2c6d40bd6a5c99f2817a1","modified":1542573864093},{"_id":"public/tags/index.html","hash":"40097566729df35959c916b551d6faca51121469","modified":1542573864093},{"_id":"public/posts/676924322/index.html","hash":"5736299390a2c3a252a832743d3e1dd119c87285","modified":1542573864093},{"_id":"public/posts/2974833176/index.html","hash":"f59b3c216c6ea7b1b0762924e9fd4cba39859bd1","modified":1542573864093},{"_id":"public/posts/3327617678/index.html","hash":"22170241f057dc01a493125d38608faff94c0113","modified":1542573864093},{"_id":"public/posts/1479802669/index.html","hash":"c4011265b1a0f7f2e5cc09625b041320ba8bbae3","modified":1542573864093},{"_id":"public/posts/791990203/index.html","hash":"bfc57193801f669ec0b9aca6fec28b3afdce1009","modified":1542573864094},{"_id":"public/posts/3057491457/index.html","hash":"42b99bc4ca58056b34faa74ec4c0d02b20acf915","modified":1542573864094},{"_id":"public/posts/1353166163/index.html","hash":"79b9b32fb85f0c417ce234ac91e86e50eeace667","modified":1542573864094},{"_id":"public/posts/2326977762/index.html","hash":"4485ea6faa49b86fd64be94aa49edbfe759c1407","modified":1542573864094},{"_id":"public/posts/1243066710/index.html","hash":"dbb309100205ce6fa9b42ba6f80a489225b9493e","modified":1542573864094},{"_id":"public/archives/index.html","hash":"33ea14215784008b4c1ef249582815d55f0a4977","modified":1542573864094},{"_id":"public/archives/2018/index.html","hash":"6426e5539288164e98e55df45090e071503287df","modified":1542573864094},{"_id":"public/archives/2018/11/index.html","hash":"aeda1bccb024826c03a28d648cd7ebb1019e9f98","modified":1542573864094},{"_id":"public/categories/default/index.html","hash":"3ece9a40377209b09079b2bfcaf12caef58283ec","modified":1542573864094},{"_id":"public/categories/nodejs/index.html","hash":"d80e3db858de99cebb2fcbd6195aec716b1ab9ae","modified":1542573864094},{"_id":"public/categories/hexo/index.html","hash":"7bea90d01c7129d62cb5f09bd4ffd112119fb518","modified":1542573864094},{"_id":"public/index.html","hash":"db02ff7dc8bdb7fc8dae04053d29e9fa236aaf55","modified":1542573864094},{"_id":"public/tags/test3/index.html","hash":"7975adb10271221b558bf3116f5a20c31f60789e","modified":1542573864095},{"_id":"public/tags/t2/index.html","hash":"a987e60a3371ef217ffdc6a6d6b55aafd8b4b74a","modified":1542573864095},{"_id":"public/tags/t/index.html","hash":"6b8a395c1a13b9917eb8b195db101271895c6d72","modified":1542573864095},{"_id":"public/tags/test1/index.html","hash":"11478a2faa26f2a81ab74d8be655bad9b08fbddf","modified":1542573864095},{"_id":"public/tags/test2/index.html","hash":"5e8e9aa68d9783edd64054baa72fcd72e8d20f8e","modified":1542573864115},{"_id":"public/tags/hexo/index.html","hash":"f5e7d84322998a84d278d72775fcfa209e21f716","modified":1542573864115},{"_id":"public/images/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1542573864115},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1542573864115},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1542573864115},{"_id":"public/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1542573864115},{"_id":"public/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1542573864115},{"_id":"public/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1542573864115},{"_id":"public/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1542573864115},{"_id":"public/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1542573864115},{"_id":"public/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1542573864115},{"_id":"public/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1542573864116},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1542573864116},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1542573864116},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1542573864116},{"_id":"public/images/logo.svg","hash":"169f56fd82941591dad3abd734a50ec7259be950","modified":1542573864116},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1542573864116},{"_id":"public/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1542573864116},{"_id":"public/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1542573864116},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1542573864116},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"ee33b2798b1e714b904d663436c6b3521011d1fa","modified":1542573864116},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1542573864116},{"_id":"public/posts/676924322/1542533881927.png","hash":"6b76ee986204a82af296c2addda1fb139997c61e","modified":1542573864116},{"_id":"public/posts/676924322/image3.png","hash":"319bc7e635c268402651da30d73bee6e2d7aeffc","modified":1542573864116},{"_id":"public/posts/676924322/image4.png","hash":"1bc98645ffb41a60694a35c2b15e3f1ebd1bcdc6","modified":1542573864116},{"_id":"public/posts/3327617678/image2.png","hash":"f64534f93aa117abf36813a6b6900e0ee569641a","modified":1542573864116},{"_id":"public/posts/3327617678/image3.png","hash":"6e71e8635e87c09a58619ed7084dffa4bdf89e59","modified":1542573864117},{"_id":"public/posts/3327617678/image5.png","hash":"e5d35ab013cbfac2af3e2b87cf9284547035aee5","modified":1542573864117},{"_id":"public/posts/3327617678/image6.png","hash":"261fbdc7dad7db4bf2afebd6b71facb9c219787f","modified":1542573864117},{"_id":"public/posts/3327617678/image8.png","hash":"9c400ac3947fc06a2d5697c19693a4a1790bc9be","modified":1542573864117},{"_id":"public/posts/2974833176/image10.png","hash":"3ff17da809779fc63f8d7b7b5e33eb180f77c4ce","modified":1542573864117},{"_id":"public/posts/2974833176/image11.png","hash":"95c291f94625fd33628bb0d2109f3622778fffb8","modified":1542573864117},{"_id":"public/posts/2974833176/image3.png","hash":"d0d12da26892dd951612835b43f1ecb2ed84e5f4","modified":1542573864117},{"_id":"public/posts/676924322/image2.png","hash":"b4a44ce312d78dbf1bd61183b1ca49e83ca695e0","modified":1542573864117},{"_id":"public/posts/2974833176/image5.png","hash":"5f8c2b029f4555e92c22d9690a03c1bf11030310","modified":1542573864117},{"_id":"public/posts/2974833176/image6.png","hash":"cc460d75842d13216333575ff9bd8fba4edb7b95","modified":1542573864117},{"_id":"public/posts/2974833176/image9.png","hash":"a9fb8fa75fb24adc25a03d803f78ec2529edbcc7","modified":1542573864117},{"_id":"public/posts/791990203/image10.png","hash":"66d2431f5401a75e45fac0ffa75ff279353988d3","modified":1542573864117},{"_id":"public/posts/791990203/image11.png","hash":"f3b41e9ff6c29b36c2159ffd8236f4180cda8d77","modified":1542573864118},{"_id":"public/posts/791990203/image12.png","hash":"8ef7ad8565357abcb7c4f09327592bc8b45eba41","modified":1542573864118},{"_id":"public/posts/791990203/image14.png","hash":"90cf3b8d037d3e2c8ddd07a69032957b6d15c2da","modified":1542573864118},{"_id":"public/posts/791990203/image15.png","hash":"fd684c279362ce86f8aaa84ac7b97c5f175fb93e","modified":1542573864118},{"_id":"public/posts/791990203/image16.png","hash":"a930d516bc44c777396c2ba07890d6d5b7050de8","modified":1542573864118},{"_id":"public/posts/791990203/image17.png","hash":"fc13ae2df218a8117124582850972a040df06a09","modified":1542573864119},{"_id":"public/posts/791990203/image20.png","hash":"4df7e4d5f5bfe72521b2568b2fbbc8aa711ba01d","modified":1542573864119},{"_id":"public/posts/791990203/image21.png","hash":"042bc0e7145b048e2d2413e7231c061a4ef4a450","modified":1542573864119},{"_id":"public/posts/791990203/image22.png","hash":"8c2444dd27e297536680f7296d509d4ad896abdc","modified":1542573864119},{"_id":"public/posts/1479802669/image11.png","hash":"d0df8099c377f12d768aade715a813cb697cb323","modified":1542573864119},{"_id":"public/posts/1479802669/image13.png","hash":"3ce1c5fb7daf267fc3e66b0e4024ef18c19d257b","modified":1542573864119},{"_id":"public/posts/1479802669/image16.png","hash":"2bba7800cd4b76dad950c63af119934ede0b45c8","modified":1542573864119},{"_id":"public/posts/1479802669/image17.png","hash":"9bdf778a4c57707ec98bee1f053b98726c915249","modified":1542573864119},{"_id":"public/posts/1479802669/image18.png","hash":"28918af3d6d9bc86742c4fda4811ad92f1aa357d","modified":1542573864119},{"_id":"public/posts/1479802669/image20.png","hash":"9fbeef17e88a468bb20d4aa38b0e929de2164425","modified":1542573864119},{"_id":"public/posts/1479802669/image21.png","hash":"18c02d97000294d0de8a22761933e2ca2ec2f40b","modified":1542573864119},{"_id":"public/posts/1479802669/image22.png","hash":"5936d4cf91395b82b6b2948cffa78c6141860bfe","modified":1542573864119},{"_id":"public/posts/1479802669/image23.png","hash":"eda931ad88b7e50b0005c1c7a5d56717d105d129","modified":1542573864119},{"_id":"public/posts/1479802669/image3.png","hash":"e0493353ba9edc3fde64d5ad6f5b1e4dae60802a","modified":1542573864120},{"_id":"public/posts/1479802669/image4.jpeg","hash":"30f33e5b6b46efc695d8121686be3f202a1157ab","modified":1542573864120},{"_id":"public/posts/1479802669/image5.png","hash":"bb1f95875d02afc964bf743e7d0ff687caf50126","modified":1542573864120},{"_id":"public/posts/1479802669/image6.png","hash":"68b6d287c0d904f5f2f3bb25d23d967656131db5","modified":1542573864120},{"_id":"public/posts/1479802669/image7.png","hash":"f783c82e9e36afadcf517038c7bb3e5568d30114","modified":1542573864120},{"_id":"public/posts/1479802669/image9.png","hash":"f0e22a252736a9e31908ed6bcbbd794124587da8","modified":1542573864120},{"_id":"public/posts/3057491457/image10.png","hash":"ca9371e64d63f5092df0e0254e62eae95eb39c50","modified":1542573864120},{"_id":"public/posts/3057491457/image11.png","hash":"85990044fd2008a4e47eacb95b81702f3a03d1ed","modified":1542573864120},{"_id":"public/posts/3057491457/image12.png","hash":"fe2d9fc5d5b2b034764a87d670e73d5a094b7108","modified":1542573864120},{"_id":"public/posts/3057491457/image13.png","hash":"d4148ac76a67463a7a1ab769ab94d52243780182","modified":1542573864120},{"_id":"public/posts/3057491457/image14.png","hash":"4f6f3a6f823c03135ec20fb51a603698c5d43e29","modified":1542573864121},{"_id":"public/posts/3057491457/image15.png","hash":"3b408349ac397cb3b6f0661194b4485a9c390871","modified":1542573864121},{"_id":"public/posts/3057491457/image16.png","hash":"82ebe4237bee053282c72f3952d9f7542be0465f","modified":1542573864121},{"_id":"public/posts/3057491457/image17.png","hash":"92c37c334f20fb6b8065acac451c975c1754f1e3","modified":1542573864121},{"_id":"public/posts/3057491457/image18.png","hash":"02b07341caded4981490252a2f24fb038c9883d2","modified":1542573864122},{"_id":"public/posts/3057491457/image19.png","hash":"78d9b60e3145bc159dd187654b5ef239fefd97de","modified":1542573864122},{"_id":"public/posts/3057491457/image2.png","hash":"3cfa9b403d1b94cf8bcd6827f7ea95928c1fe633","modified":1542573864122},{"_id":"public/posts/3057491457/image20.png","hash":"5f84b974e3010e60edc5964bb2a402b9b030da52","modified":1542573864122},{"_id":"public/posts/3057491457/image22.png","hash":"6b5ab61cc82ff356bb8aa1d8a686dc48db283b55","modified":1542573864122},{"_id":"public/posts/3057491457/image23.png","hash":"f14b0e6b031ae7a4330f3c0b3922942b6fa22c05","modified":1542573864122},{"_id":"public/posts/3057491457/image24.png","hash":"391a6e941a2157ae76cbab299632b339cfa77021","modified":1542573864122},{"_id":"public/posts/3057491457/image25.png","hash":"ce838774712735f630310a97ceb9fd9b71442e3f","modified":1542573864122},{"_id":"public/posts/3057491457/image27.png","hash":"cc8e40a2f4331873c5206ec8f4dd12d7bfa012f2","modified":1542573864122},{"_id":"public/posts/3057491457/image28.png","hash":"a8f85ef0a4a36799c562c4b53a4a9ed956abcb75","modified":1542573864122},{"_id":"public/posts/3057491457/image29.png","hash":"390fd16011a2b1641104ae4a97798a38cdc11c23","modified":1542573864122},{"_id":"public/posts/3057491457/image3.png","hash":"36032b55bcc1ae048f08a47b9ad2190c9ecdb691","modified":1542573864122},{"_id":"public/posts/3057491457/image30.png","hash":"401f7912c48b972c9d5e2948a96e1471e729b635","modified":1542573864122},{"_id":"public/posts/3057491457/image31.png","hash":"4f4fc0b57466d37ef0bdab0d8e40f666d20a0223","modified":1542573864123},{"_id":"public/posts/3057491457/image32.png","hash":"9357aee3efbf10e6bd587333f257ddb5e65b811b","modified":1542573864123},{"_id":"public/posts/3057491457/image33.png","hash":"5e84aad8e854bceb98829b0d78779fbc8f2f633b","modified":1542573864123},{"_id":"public/posts/3057491457/image34.png","hash":"8bdb88d1d08ca9b16bf0c14a1b6280166d5135e0","modified":1542573864123},{"_id":"public/posts/3057491457/image35.png","hash":"aca35ca9a1e2c5c47804cafdf2e226269352c66d","modified":1542573864123},{"_id":"public/posts/3057491457/image36.png","hash":"2e2b3d991e8247b654ea64d2fa2641c7b5861222","modified":1542573864123},{"_id":"public/posts/3057491457/image37.png","hash":"7254c268f147696360d711f7b382814ceaf28d1d","modified":1542573864123},{"_id":"public/posts/3057491457/image38.png","hash":"3f0af5fb7f34b64a935c7e688c72645eff04b879","modified":1542573864123},{"_id":"public/posts/3057491457/image39.png","hash":"ec4233f5dec9484473eb50991a19f6f32c6a48b8","modified":1542573864123},{"_id":"public/posts/3057491457/image4.png","hash":"9fe5aca3aba5d72bbf83627bc19682de03f637c5","modified":1542573864123},{"_id":"public/posts/3057491457/image40.png","hash":"bb89305fb079e19106ab432ab3e3dc229de283df","modified":1542573864123},{"_id":"public/posts/3057491457/image42.png","hash":"730168420d7f6f301157ba0e306b387830ef59fc","modified":1542573864123},{"_id":"public/posts/3057491457/image43.png","hash":"f6b8dd5c62a882775dc6e5dc2b5f2caf51fa53c3","modified":1542573864124},{"_id":"public/posts/3057491457/image44.png","hash":"fefe3a728bd9e6e844209eef34be000ab941bbe7","modified":1542573864124},{"_id":"public/posts/3057491457/image45.png","hash":"6c713733ce05a3090e66ae83c7c53cf0cb96563e","modified":1542573864124},{"_id":"public/posts/3057491457/image46.png","hash":"4aad66fde70123342db395a74a67502d0712eaa4","modified":1542573864124},{"_id":"public/posts/3057491457/image47.png","hash":"6f26fa7ac0ec5392850a4d269095646ef0b72092","modified":1542573864124},{"_id":"public/posts/3057491457/image5.png","hash":"e448e041520cabe6d5fb997fa813985cdb12afdc","modified":1542573864124},{"_id":"public/posts/3057491457/image7.png","hash":"64674385949417537e03805ddd49a74f5a842e5a","modified":1542573864124},{"_id":"public/posts/3057491457/image8.png","hash":"bf8523d9b94f232798c814bd2714383b04c37142","modified":1542573864124},{"_id":"public/posts/3057491457/image9.png","hash":"03cae63c2bb10594a3a9160cb9e05908eb76fd2e","modified":1542573864124},{"_id":"public/posts/1353166163/analytics-baidu-id.png","hash":"3dd22872919bbe242052fbd415f530dd30dbf851","modified":1542573864124},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1542573864910},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1542573864912},{"_id":"public/posts/676924322/image5.png","hash":"a0f3c68a081fa3e21b484396c8c8bcfe118d543f","modified":1542573864912},{"_id":"public/posts/3327617678/image4.png","hash":"36858dae0a248e86b2217460dbaf978dbf789157","modified":1542573864912},{"_id":"public/posts/3327617678/image7.png","hash":"221830abc803f7614047e001a6002031c82304be","modified":1542573864912},{"_id":"public/posts/2974833176/image4.png","hash":"5dfb3ea2a1f4c05cfbd8e1f4f39484b654277977","modified":1542573864912},{"_id":"public/posts/2974833176/image8.png","hash":"fa0264d5c7a42aed1b62429b944a25efb7373c06","modified":1542573864912},{"_id":"public/posts/791990203/image18.png","hash":"5acade5dc8303aec0169651ce40b959000bae2e7","modified":1542573864912},{"_id":"public/posts/791990203/image19.png","hash":"f20709b03b3921f87dcf27beb89906be7e168632","modified":1542573864912},{"_id":"public/posts/1479802669/image12.png","hash":"ff87dc5b4d67536b36f1c9c9b8086249f6167128","modified":1542573864912},{"_id":"public/posts/1479802669/image15.png","hash":"7aab14709acf9e4080aac5e4b8d330a78e7bf346","modified":1542573864913},{"_id":"public/posts/1479802669/image19.png","hash":"d594991296a394559ca92e2a988f96cf957467fd","modified":1542573864913},{"_id":"public/posts/1479802669/image8.png","hash":"61e046c3c89ce8b3927dbceb49ab457d49d43116","modified":1542573864913},{"_id":"public/posts/3057491457/image21.png","hash":"5f5e03d1dd5b4e52a4f9a5eba4fc7228481b6193","modified":1542573864913},{"_id":"public/posts/3057491457/image26.png","hash":"67b4c087a4bbbcf875a74d3e0a3a540e4e8f7f65","modified":1542573864913},{"_id":"public/posts/3057491457/image41.png","hash":"221f6b325f4a5627f1e92b6628e359ae89ebbc3e","modified":1542573864913},{"_id":"public/js/src/affix.js","hash":"a2aab233d99297435a5274bf512c3c753fe08e80","modified":1542573864914},{"_id":"public/js/src/algolia-search.js","hash":"1f7f10c579e7703d0f6acb8b73f3d78a07d0c623","modified":1542573864914},{"_id":"public/js/src/bootstrap.js","hash":"1c41508b83cb0c4512e64b4d63afa1be954ce8ef","modified":1542573864914},{"_id":"public/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1542573864914},{"_id":"public/js/src/exturl.js","hash":"54825acc8de4793feac415be227b965428f4e97d","modified":1542573864914},{"_id":"public/js/src/post-details.js","hash":"0dde5e6d4547587662a3256317a9d5d1db507692","modified":1542573864915},{"_id":"public/js/src/scroll-cookie.js","hash":"d07b3776708d4ae79ed2037c4c7391d5c9b06b19","modified":1542573864915},{"_id":"public/js/src/scrollspy.js","hash":"fa3c92968bcdbcb8d95a1729f7659d9753cbd077","modified":1542573864915},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1542573864915},{"_id":"public/js/src/schemes/pisces.js","hash":"72037e8c4202a73b0c6ff7d81b57cd349e836837","modified":1542573864915},{"_id":"public/css/main.css","hash":"c33481609bedf805cc5fa8124c35e739b36e69a7","modified":1542573864915},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1542573864932},{"_id":"public/posts/791990203/image13.png","hash":"4712e11bfbf7bcdb0197113437256638880c4700","modified":1542573864933},{"_id":"public/posts/1479802669/image10.png","hash":"7a2916c111d7dc18a5221023dc897c5be082eb89","modified":1542573864933},{"_id":"public/posts/1479802669/image2.png","hash":"7a856f622e85dadf57be722704b88036cbc26da2","modified":1542573864933},{"_id":"public/posts/3057491457/image6.png","hash":"32cc2f0202699cb988351c252036b07f52b100c1","modified":1542573864933},{"_id":"public/js/src/motion.js","hash":"b45d2c0d48f2c8e6a0621b8063845f76b89476cc","modified":1542573864944},{"_id":"public/js/src/utils.js","hash":"28a79d317b7f4012917a54cac770551596bf6241","modified":1542573864944},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1542573864944},{"_id":"public/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1542573864944},{"_id":"public/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1542573864944},{"_id":"public/posts/2974833176/image7.png","hash":"9355600e7778a47e49c26730e54409d81e5ed8ff","modified":1542573864970},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1542573864985},{"_id":"public/posts/1479802669/image14.png","hash":"fa4d1be16352f61dd877e7b225181b557ba2ec0a","modified":1542573864985},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1542573865011},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1542573865011},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1542573865012},{"_id":"public/posts/2974833176/image2.png","hash":"37e07e36d75154b03361ede1e6a301924f42e7f3","modified":1542573865095},{"_id":"public/posts/1353166163/wanko.gif","hash":"b5a38911798dc9ce3bd858f5f401566048c5dbf4","modified":1542573865095},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1542573865100},{"_id":"public/posts/1353166163/hijiki.gif","hash":"b276efb514bc45184a9fd972a6111dd9aec6a676","modified":1542573865109},{"_id":"public/images/avatar3.jpg","hash":"fe55e2a87fb34ad804433387341d21e751a6aa93","modified":1542573865136},{"_id":"public/posts/1353166163/tororo.gif","hash":"d3a4bec80c695e24f2fc844cdb374cefb508fe3e","modified":1542573865140},{"_id":"public/images/avatar2.jpg","hash":"13845c895358f54c803cf13e6c817863002f070a","modified":1542573865147},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1542573865168},{"_id":"public/posts/1353166163/koharu.gif","hash":"8485ac75ec4676284d269f8dcdc45bddadbb5f6d","modified":1542573865179},{"_id":"public/images/avatar.png","hash":"c693c7ba433abbacdf8b24b603ac6c88d0c44e9c","modified":1542573865183},{"_id":"public/posts/1353166163/Epsilon2.1.gif","hash":"6d01fa0ecbc2dc4dc94684d5f0f00c6837206453","modified":1542573865187},{"_id":"public/posts/1353166163/haruto.gif","hash":"ed739c3ccf413d2b8af8cc46ee191eef10adffdb","modified":1542573865193},{"_id":"public/posts/1353166163/tsumiki.gif","hash":"422ca75a1ad9788c56735b7cd3b8bd2b755deee8","modified":1542573865198},{"_id":"public/posts/1353166163/ni-j.gif","hash":"c94f419e34d28a0e7e9b91d830050ffd3391a98d","modified":1542573865206},{"_id":"public/posts/1353166163/nito.gif","hash":"a46ed7dc985168dc55c05537877ca32deeaac382","modified":1542573865212},{"_id":"public/posts/1353166163/haru.gif","hash":"f7d81d74d1bad0a747e887f99a53712d30325d30","modified":1542573865229},{"_id":"public/posts/1353166163/z16.gif","hash":"1effb55b48a8531348e083d2c501a193940f4334","modified":1542573865232},{"_id":"public/posts/1353166163/Unitychan.gif","hash":"4295b1714e5a08e9dfa1c6d7a480a75ecc7e46fe","modified":1542573865300},{"_id":"public/posts/1353166163/nico.gif","hash":"793d1619884ba8300d956bbd71f7f9db70505513","modified":1542573865310},{"_id":"public/posts/1353166163/Gantzert_Felixander.gif","hash":"9c69e5fb6ce6ba41cc374eaf1cc36c2d95444296","modified":1542573865319},{"_id":"public/posts/1353166163/nipsilon.gif","hash":"50abaf18f0a03bc93c6aabadc8be73c9e2976b71","modified":1542573865330},{"_id":"public/posts/1353166163/shizuku.gif","hash":"a744acb89dc1a282af819e0fcbbbe8a782f8f116","modified":1542573865330},{"_id":"public/posts/1353166163/hibiki.gif","hash":"a2b5f7016155736bbaafa9715a47eaa4924e5057","modified":1542573865346},{"_id":"public/posts/1353166163/nietzche.gif","hash":"198ae4cd1a4cd24c7b8f9e86498bc9ccb45264ae","modified":1542573865357},{"_id":"public/posts/1353166163/miku.gif","hash":"162ec4475f47e728ee85d929460f5b59bf1953d2","modified":1542573865373},{"_id":"source/_posts/Pre/GitHubBlog架构.md","hash":"621fe8db297e161305ad0abd25284884f17579c8","modified":1545470587798}],"Category":[{"name":"default","_id":"cjoncnbl300072gfiq4pyfrcg"},{"name":"nodejs","_id":"cjoncnbrc000n2gfipdjt4amj"},{"name":"hexo","_id":"cjoncnbsc00112gfi79fz5baz"},{"name":"Pre","_id":"cjpz9po6t0001t8fir6lq0d8z"}],"Data":[],"Page":[{"title":"关于我","date":"2018-11-12T07:35:38.000Z","_content":"\n\n\n关于我。。。。。\n\nSitemap\n\n\n\n","source":"about/index.md","raw":"---\ntitle: 关于我\ndate: 2018-11-12 15:35:38\n---\n\n\n\n关于我。。。。。\n\nSitemap\n\n\n\n","updated":"2018-11-18T19:58:59.048Z","path":"about/index.html","comments":1,"layout":"page","_id":"cjoncnbgi00002gfixlr6pdfy","content":"<p>关于我。。。。。</p>\n<p>Sitemap</p>\n","site":{"data":{}},"excerpt":"","more":"<p>关于我。。。。。</p>\n<p>Sitemap</p>\n"},{"title":"404 Not Found：该页无法显示1","comments":0,"date":"2018-11-12T08:14:42.000Z","_content":"**Sorry，我们无法找到你要的页面！** \n\n[返回首页](/)\n","source":"404/index.md","raw":"---\ntitle: 404 Not Found：该页无法显示1\ncomments: false\ndate: 2018-11-12 16:14:42\n---\n**Sorry，我们无法找到你要的页面！** \n\n[返回首页](/)\n","updated":"2018-12-10T10:08:46.247Z","path":"404/index.html","_id":"cjoncnbgm00012gfi5wcsu5fn","layout":"page","content":"<p><strong>Sorry，我们无法找到你要的页面！</strong> </p>\n<p><a href=\"/\">返回首页</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p><strong>Sorry，我们无法找到你要的页面！</strong> </p>\n<p><a href=\"/\">返回首页</a></p>\n"},{"title":"文章分类","date":"2018-11-11T20:33:17.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: 文章分类\ndate: 2018-11-12 04:33:17\ntype: \"categories\"\n---\n","updated":"2018-11-13T19:57:20.055Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cjoncnbgo00022gfi7drjlihw","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"友情链接","date":"2018-11-13T18:49:43.000Z","_content":"\n\n\n施工中。。。\n\n","source":"link/index.md","raw":"---\ntitle: 友情链接\ndate: 2018-11-14 02:49:43\n---\n\n\n\n施工中。。。\n\n","updated":"2018-11-13T18:50:34.337Z","path":"link/index.html","comments":1,"layout":"page","_id":"cjoncnbgq00032gfislqyqonx","content":"<p>施工中。。。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>施工中。。。</p>\n"},{"title":"文章标签","date":"2018-11-11T20:34:16.000Z","type":"tags","_content":"\n","source":"tags/index.md","raw":"---\ntitle: 文章标签\ndate: 2018-11-12 04:34:16\ntype: \"tags\"\n---\n\n","updated":"2018-11-13T19:57:49.327Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cjoncnbjw00042gfizit7fjzz","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"test1","updated":"2018-11-12T07:50:00.000Z","mathjax":true,"abbrlink":2326977762,"date":"2018-11-12T07:50:02.000Z","_content":"\n\n\n>  代码高亮测试\n\n```yaml\n## HTTPS方式\n#  type: git\n#  repo: https://github.com/KumaNNN/KumaNNN.github.io.git\n#  branch: master\n#  message:  \n\n\n# RSS 配置 \nfeed:\n  type: atom\n  path: atom.xml\n  limit: 20\n  hub:\n  content: true\n  content_limit: 140\n  content_limit_delim: ' '\n  order_by: -date\n```\n\n\n\n![avatar2.jpg](/0images/avatar2.jpg)\n\n\n\n<!-- 标签 方式，要求版本在0.4.5或以上 -->\n\n {% fullimage /images/avatar2.jpg, alt, title %} \n\n\n\n\n\n$$\n5^2+10^8=?\n$$\n","source":"_posts/Dev/test1.md","raw":"---\ntitle: test1\nupdated: '2018-11-12 15:50:0'\nmathjax: true\ntags:\n  - test3\n  - t2\n  - t\ncategories: default\nabbrlink: 2326977762\ndate: 2018-11-12 15:50:02\n---\n\n\n\n>  代码高亮测试\n\n```yaml\n## HTTPS方式\n#  type: git\n#  repo: https://github.com/KumaNNN/KumaNNN.github.io.git\n#  branch: master\n#  message:  \n\n\n# RSS 配置 \nfeed:\n  type: atom\n  path: atom.xml\n  limit: 20\n  hub:\n  content: true\n  content_limit: 140\n  content_limit_delim: ' '\n  order_by: -date\n```\n\n\n\n![avatar2.jpg](/0images/avatar2.jpg)\n\n\n\n<!-- 标签 方式，要求版本在0.4.5或以上 -->\n\n {% fullimage /images/avatar2.jpg, alt, title %} \n\n\n\n\n\n$$\n5^2+10^8=?\n$$\n","slug":"Dev/test1","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cjoncnbku00052gfiqgya8jf9","content":"<blockquote>\n<p> 代码高亮测试</p>\n</blockquote>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">## HTTPS方式</span></span><br><span class=\"line\"><span class=\"comment\">#  type: git</span></span><br><span class=\"line\"><span class=\"comment\">#  repo: https://github.com/KumaNNN/KumaNNN.github.io.git</span></span><br><span class=\"line\"><span class=\"comment\">#  branch: master</span></span><br><span class=\"line\"><span class=\"comment\">#  message:  </span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># RSS 配置 </span></span><br><span class=\"line\"><span class=\"attr\">feed:</span></span><br><span class=\"line\"><span class=\"attr\">  type:</span> <span class=\"string\">atom</span></span><br><span class=\"line\"><span class=\"attr\">  path:</span> <span class=\"string\">atom.xml</span></span><br><span class=\"line\"><span class=\"attr\">  limit:</span> <span class=\"number\">20</span></span><br><span class=\"line\"><span class=\"attr\">  hub:</span></span><br><span class=\"line\"><span class=\"attr\">  content:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">  content_limit:</span> <span class=\"number\">140</span></span><br><span class=\"line\"><span class=\"attr\">  content_limit_delim:</span> <span class=\"string\">' '</span></span><br><span class=\"line\"><span class=\"attr\">  order_by:</span> <span class=\"bullet\">-date</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"/0images/avatar2.jpg\" alt=\"avatar2.jpg\"></p>\n<!-- 标签 方式，要求版本在0.4.5或以上 -->\n <span itemprop=\"image\" itemscope=\"\" itemtype=\"http://schema.org/ImageObject\"><img itemprop=\"url image\" src=\"/images/avatar2.jpg\" class=\"full-image\" alt=\"alt\" title=\"title\"><meta itemprop=\"width\" content=\"auto\"><meta itemprop=\"height\" content=\"auto\"></span> \n<p>$$<br>5^2+10^8=?<br>$$</p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p> 代码高亮测试</p>\n</blockquote>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">## HTTPS方式</span></span><br><span class=\"line\"><span class=\"comment\">#  type: git</span></span><br><span class=\"line\"><span class=\"comment\">#  repo: https://github.com/KumaNNN/KumaNNN.github.io.git</span></span><br><span class=\"line\"><span class=\"comment\">#  branch: master</span></span><br><span class=\"line\"><span class=\"comment\">#  message:  </span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># RSS 配置 </span></span><br><span class=\"line\"><span class=\"attr\">feed:</span></span><br><span class=\"line\"><span class=\"attr\">  type:</span> <span class=\"string\">atom</span></span><br><span class=\"line\"><span class=\"attr\">  path:</span> <span class=\"string\">atom.xml</span></span><br><span class=\"line\"><span class=\"attr\">  limit:</span> <span class=\"number\">20</span></span><br><span class=\"line\"><span class=\"attr\">  hub:</span></span><br><span class=\"line\"><span class=\"attr\">  content:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">  content_limit:</span> <span class=\"number\">140</span></span><br><span class=\"line\"><span class=\"attr\">  content_limit_delim:</span> <span class=\"string\">' '</span></span><br><span class=\"line\"><span class=\"attr\">  order_by:</span> <span class=\"bullet\">-date</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"/0images/avatar2.jpg\" alt=\"avatar2.jpg\"></p>\n<!-- 标签 方式，要求版本在0.4.5或以上 -->\n <span itemprop=\"image\" itemscope=\"\" itemtype=\"http://schema.org/ImageObject\"><img itemprop=\"url image\" src=\"/images/avatar2.jpg\" class=\"full-image\" alt=\"alt\" title=\"title\"><meta itemprop=\"width\" content=\"auto\"><meta itemprop=\"height\" content=\"auto\"></span> \n<p>$$<br>5^2+10^8=?<br>$$</p>\n"},{"title":"Hello World","top":1,"abbrlink":1243066710,"date":"2018-11-12T07:50:02.000Z","updated":"2018-11-12T07:50:02.000Z","_content":"欢迎来到[Hexo](https://hexo.io/)！这是你的第一篇文章。查看[文档](https://hexo.io/docs/)以获取更多信息。如果您在使用Hexo时遇到任何问题，可以在[故障排除中](https://hexo.io/docs/troubleshooting.html)找到答案，或者您可以在[GitHub上](https://github.com/hexojs/hexo/issues)询问我。 \n\n## 快速开始\n\n### 创建一个新帖子\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\n更多信息：[写作](https://hexo.io/docs/writing.html) \n\n### 运行服务器\n\n``` bash\n$ hexo server\n```\n\n更多信息：[服务器](https://hexo.io/docs/server.html) \n\n### 生成静态文件\n\n``` bash\n$ hexo generate\n```\n\n更多信息：[生成](https://hexo.io/docs/generating.html) \n\n### 部署到远程站点\n\n``` bash\n$ hexo deploy\n```\n\n更多信息：[部署](https://hexo.io/docs/deployment.html) ","source":"_posts/Dev/hello-world.md","raw":"---\ntitle: Hello World\ntags:\n  - test1\n  - test2\ntop: 1\ncategories: default\nabbrlink: 1243066710\ndate: 2018-11-12 15:50:02\nupdated: 2018-11-12 15:50:02\n---\n欢迎来到[Hexo](https://hexo.io/)！这是你的第一篇文章。查看[文档](https://hexo.io/docs/)以获取更多信息。如果您在使用Hexo时遇到任何问题，可以在[故障排除中](https://hexo.io/docs/troubleshooting.html)找到答案，或者您可以在[GitHub上](https://github.com/hexojs/hexo/issues)询问我。 \n\n## 快速开始\n\n### 创建一个新帖子\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\n更多信息：[写作](https://hexo.io/docs/writing.html) \n\n### 运行服务器\n\n``` bash\n$ hexo server\n```\n\n更多信息：[服务器](https://hexo.io/docs/server.html) \n\n### 生成静态文件\n\n``` bash\n$ hexo generate\n```\n\n更多信息：[生成](https://hexo.io/docs/generating.html) \n\n### 部署到远程站点\n\n``` bash\n$ hexo deploy\n```\n\n更多信息：[部署](https://hexo.io/docs/deployment.html) ","slug":"Dev/hello-world","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cjoncnbl000062gfib3elxtvn","content":"<p>欢迎来到<a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>！这是你的第一篇文章。查看<a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">文档</a>以获取更多信息。如果您在使用Hexo时遇到任何问题，可以在<a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">故障排除中</a>找到答案，或者您可以在<a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub上</a>询问我。 </p>\n<h2 id=\"快速开始\"><a href=\"#快速开始\" class=\"headerlink\" title=\"快速开始\"></a>快速开始</h2><h3 id=\"创建一个新帖子\"><a href=\"#创建一个新帖子\" class=\"headerlink\" title=\"创建一个新帖子\"></a>创建一个新帖子</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>更多信息：<a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">写作</a> </p>\n<h3 id=\"运行服务器\"><a href=\"#运行服务器\" class=\"headerlink\" title=\"运行服务器\"></a>运行服务器</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>更多信息：<a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">服务器</a> </p>\n<h3 id=\"生成静态文件\"><a href=\"#生成静态文件\" class=\"headerlink\" title=\"生成静态文件\"></a>生成静态文件</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>更多信息：<a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">生成</a> </p>\n<h3 id=\"部署到远程站点\"><a href=\"#部署到远程站点\" class=\"headerlink\" title=\"部署到远程站点\"></a>部署到远程站点</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>更多信息：<a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">部署</a> </p>\n","site":{"data":{}},"excerpt":"","more":"<p>欢迎来到<a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>！这是你的第一篇文章。查看<a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">文档</a>以获取更多信息。如果您在使用Hexo时遇到任何问题，可以在<a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">故障排除中</a>找到答案，或者您可以在<a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub上</a>询问我。 </p>\n<h2 id=\"快速开始\"><a href=\"#快速开始\" class=\"headerlink\" title=\"快速开始\"></a>快速开始</h2><h3 id=\"创建一个新帖子\"><a href=\"#创建一个新帖子\" class=\"headerlink\" title=\"创建一个新帖子\"></a>创建一个新帖子</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>更多信息：<a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">写作</a> </p>\n<h3 id=\"运行服务器\"><a href=\"#运行服务器\" class=\"headerlink\" title=\"运行服务器\"></a>运行服务器</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>更多信息：<a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">服务器</a> </p>\n<h3 id=\"生成静态文件\"><a href=\"#生成静态文件\" class=\"headerlink\" title=\"生成静态文件\"></a>生成静态文件</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>更多信息：<a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">生成</a> </p>\n<h3 id=\"部署到远程站点\"><a href=\"#部署到远程站点\" class=\"headerlink\" title=\"部署到远程站点\"></a>部署到远程站点</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>更多信息：<a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">部署</a> </p>\n"},{"title":"Node.js入门和企业级项目开发06","mathjax":false,"typora-root-url":"nodejs06","typora-copy-images-to":"nodejs06","abbrlink":676924322,"date":"2018-11-17T15:59:29.000Z","updated":"2018-11-17T15:59:29.000Z","_content":"\n# 前言\n\n> 第6天课堂笔记\n>\n> 讲师：邵山欢\n>\n> 日期：2017年11月11日\n\n# 一、NodeJS学习成果自查\n\n**只要会写Ajax的接口，结合Mongoose做一套RESTful API的接口，就能学习React了。**\n\nNodeJS无法挑战老牌3P语言的，asp.net、jsp、php。\n\n上课的时候很多时候在讲面向对象，还有一些经验上的东西。\n\n\n\n# 二、用户头像功能继续完善\n\n当用户上传头像、剪裁之后，立即将头像移动位置，从uploads到www/useravatars/文件夹中。\n\n页面单独的js文件喜欢写在\\</body\\>之后，所有的公共的js文件（包括各种lib库）都喜欢写在页面的\\<head\\>中。\n\n\n\n```javascript\n$(function(){\n\n});\n```\n\n等价于\n\n```javascript\n$(document).ready(function(){\n});\n```\n\n表示当页面的骨架结构加载完毕之后，执行回调函数。和window.onload类似，但是不一样。\n\n\\$(document).ready()要早于window.onload事件。\n\n* \\$(document).ready() 是骨架结构加载完毕\n\n* window.onload 是所有的css、图片、音乐都加载完毕\n\n\n\n\n# 三、首页的开发\n\n## 3.1 发帖图片开发\n\n点击一个悬浮框的外部，就关闭这个悬浮框。此时要给document绑定监听。\n\n```javascript\n//点击插入图片按钮的事件\n$(\"#insertpic_button\").click(function(event){\n    //阻止事件继续传播，这样的话就不会点击a标签的时候，也会触发document的点击事件了\n    event.stopPropagation();\n    $(\"#insertpic_box\").removeClass('fade').addClass('show');\n});\n\n//点击插入图片框的外部关闭这个框框\n$(document).click(function(event){\n    //你点击的最内层元素\n    var target = event.target || event.srcElement;\n\n    if($(target).parents(\"#insertpic_box\").length <= 0 && !$(target).is(\"#insertpic_box\")){\n        $(\"#insertpic_box\").removeClass('show').addClass('fade');\n    } \n});\n```\n\n\n\n## 3.2 图片的异步上传\n\nHTML没有图片异步上传功能。\n\n\n\n**先复习一下同步和异步：**\n\n如果有一个form表单，里面有一些输入框，一个提交按钮，form标签有action、method属性，点击提交按钮页面会跳转，这种表单提交我们称之为\"**同步提交**\"：\n\n```html\n<form action=\"/tijiao\" method=\"post\">\n\t<p>\n\t\t<input type=\"text\" name=\"yonghuming\" />\n\t</p>\n\t<p>\n\t\t<input type=\"submit\">\n\t</p>\n</form>\n```\n\n\n\n如果表单没有action、method属性，没有submit按钮，而是普通按钮。点击普通按钮的时候，通过ajax提交，此时我们称之为\"**异步提交**\"：\n\n```html\n<form>\n\t<p>\n\t\t<input type=\"text\" name=\"yonghuming\" />\n\t</p>\n\t<p>\n\t\t<input type=\"button\">\n\t</p>\n</form>\n\n$(\"input[type=button]\").click(function(){\n\t$.post(\"/tijiao\" , {\n\t\tyonghuming : $(\"input[name=yonghuming]\").val();\n\t});\n});\n```\n\n\n\n如果表单中有file控件（让用户选择一个文件），此时这个表单原则上讲、API层级没有任何办法异步提交！\n\n老老实实这么写：\n\n```html\n<form action=\"/tijiao\" method=\"post\">\n\t<input type=\"file\" />\n\t<input type=\"submit\">\n</form> \n```\n\n这样一来，用户体验极差，用户上传一张图片之后必须死等，不能流畅的操作，不能让上传图片的操作放到后台。\n\n\n\n所以中国人发明了一个猫腻写法，解决了这个事情：\n\n-   隐藏`<input type=\"file\" />`控件\n\n-   写一个外部form表格\n\n-   做一个其他的东西比如+号，点击+号的时候触发(trigger)那个file的click事件，会弹出框框\n\n-   监听file控件onchange事件，当onchange事件发生，命令`$(form).submit()`\n\n> 理一下逻辑：因为图片上传是不能有异步的，必须用form来模拟，而form提交会跳转页面，所以就要内嵌到iframe里面。此时form上传成功的回调就需要通过form提交到的那个页面/fatupian来写一个`<script>window.parent.finish()</scirpt>`传给主页面。 \n> ![img](image2.png) \n> ![img](image3.png)\n> ![img](image4.png)\n\n\n麻烦的是，每一个图片上传完毕之后，不能都调用名字叫做finish()的函数，这样就乱套了。此时：我们现在给每一个li这个类，**一上来就创建一个随机数，这个数字就是回调函数的名字**。通过iframe的src引用时候的GET参数传给form2页面，form2页面中提交的网址也不是/fatupian了，而是/fatupian?callback=\\....\n\n![](media/image5.png)\n\n\n\njQueryUI中，sortable表示可以拖拽排序，最后一项不参加排序：\n\n```javascript\n//可以被排序\n$(\"#insertpic_box_ul\").sortable({\n\t\"items\" : \"li:not(:last)\"\n});\n```\n\n\n\n## 3.3 发问题的实现\n\n所有的问题存储在一个集合中，帖子有哪些属性：\n\n-   content内容\n\n-   images图片数据\n\n-   email发帖人的email\n\n-   time发帖时间\n\n我们实现了发帖功能的API接口，这是一个POST请求：\n\n**实话：我们的nodejs课程，你只需要能够流畅写出下面的语句就满分毕业！**\n\n```javascript\n//发帖功能\nexports.doSaveQ = function(req,res){\n\tvar form = new formidable.IncomingForm();\n\tform.parse(req , function(err , fields , files){\n\t\tvar email = req.session.email;\n\t\tvar content = fields.content;\n\t\tvar images = fields.images;\n\t\tvar time = new Date();\n\n\t\t//保存\n\t\tQ.create({\n\t\t\temail  : email ,\n\t\t\tcontent : content, \n\t\t\timages  : images ,\n\t\t\ttime  : time \n\t\t},function(){\n\t\t\tres.json({\"result\" : 1});\n\t\t});\n\t});\n}\n```\n\n\n\n## 3.4 拉取所有帖子\n\n**套路**：写接口，用Ajax拉取，面向对象上树。\n\n**分页的实现**：比如每页5条，页码从1开始。第3页就是跳过10条，读5条，此时读取的就是第11\\~15条。\n\n**第page页，就是跳过(page-1)\\*pagesize条，读pagesize条。**\n\n```javascript\nexports.getQ = function(req,res){\n\tvar page = url.parse(req.url , true).query.page;\n\tvar pagesize = url.parse(req.url , true).query.pagesize;\n\t//得到所有的帖子，按时间倒序\n\tQ.find({}).sort({\"time\" : -1}).skip((page - 1) * pagesize).limit(pagesize).exec(function(err,results){\n\t\tres.json({\"results\" : results});\n\t});\n}\n```\n\n\n\n![1542533881927](1542533881927.png)\n\n\n\n","source":"_posts/Dev/nodejs/nodejs06.md","raw":"---\ntitle: Node.js入门和企业级项目开发06\nmathjax: false\ntypora-root-url: nodejs06\ntypora-copy-images-to: nodejs06\ncategories:\n  - nodejs\nabbrlink: 676924322\ndate: 2018-11-17 23:59:29\nupdated: 2018-11-17 23:59:29\ntags:\n---\n\n# 前言\n\n> 第6天课堂笔记\n>\n> 讲师：邵山欢\n>\n> 日期：2017年11月11日\n\n# 一、NodeJS学习成果自查\n\n**只要会写Ajax的接口，结合Mongoose做一套RESTful API的接口，就能学习React了。**\n\nNodeJS无法挑战老牌3P语言的，asp.net、jsp、php。\n\n上课的时候很多时候在讲面向对象，还有一些经验上的东西。\n\n\n\n# 二、用户头像功能继续完善\n\n当用户上传头像、剪裁之后，立即将头像移动位置，从uploads到www/useravatars/文件夹中。\n\n页面单独的js文件喜欢写在\\</body\\>之后，所有的公共的js文件（包括各种lib库）都喜欢写在页面的\\<head\\>中。\n\n\n\n```javascript\n$(function(){\n\n});\n```\n\n等价于\n\n```javascript\n$(document).ready(function(){\n});\n```\n\n表示当页面的骨架结构加载完毕之后，执行回调函数。和window.onload类似，但是不一样。\n\n\\$(document).ready()要早于window.onload事件。\n\n* \\$(document).ready() 是骨架结构加载完毕\n\n* window.onload 是所有的css、图片、音乐都加载完毕\n\n\n\n\n# 三、首页的开发\n\n## 3.1 发帖图片开发\n\n点击一个悬浮框的外部，就关闭这个悬浮框。此时要给document绑定监听。\n\n```javascript\n//点击插入图片按钮的事件\n$(\"#insertpic_button\").click(function(event){\n    //阻止事件继续传播，这样的话就不会点击a标签的时候，也会触发document的点击事件了\n    event.stopPropagation();\n    $(\"#insertpic_box\").removeClass('fade').addClass('show');\n});\n\n//点击插入图片框的外部关闭这个框框\n$(document).click(function(event){\n    //你点击的最内层元素\n    var target = event.target || event.srcElement;\n\n    if($(target).parents(\"#insertpic_box\").length <= 0 && !$(target).is(\"#insertpic_box\")){\n        $(\"#insertpic_box\").removeClass('show').addClass('fade');\n    } \n});\n```\n\n\n\n## 3.2 图片的异步上传\n\nHTML没有图片异步上传功能。\n\n\n\n**先复习一下同步和异步：**\n\n如果有一个form表单，里面有一些输入框，一个提交按钮，form标签有action、method属性，点击提交按钮页面会跳转，这种表单提交我们称之为\"**同步提交**\"：\n\n```html\n<form action=\"/tijiao\" method=\"post\">\n\t<p>\n\t\t<input type=\"text\" name=\"yonghuming\" />\n\t</p>\n\t<p>\n\t\t<input type=\"submit\">\n\t</p>\n</form>\n```\n\n\n\n如果表单没有action、method属性，没有submit按钮，而是普通按钮。点击普通按钮的时候，通过ajax提交，此时我们称之为\"**异步提交**\"：\n\n```html\n<form>\n\t<p>\n\t\t<input type=\"text\" name=\"yonghuming\" />\n\t</p>\n\t<p>\n\t\t<input type=\"button\">\n\t</p>\n</form>\n\n$(\"input[type=button]\").click(function(){\n\t$.post(\"/tijiao\" , {\n\t\tyonghuming : $(\"input[name=yonghuming]\").val();\n\t});\n});\n```\n\n\n\n如果表单中有file控件（让用户选择一个文件），此时这个表单原则上讲、API层级没有任何办法异步提交！\n\n老老实实这么写：\n\n```html\n<form action=\"/tijiao\" method=\"post\">\n\t<input type=\"file\" />\n\t<input type=\"submit\">\n</form> \n```\n\n这样一来，用户体验极差，用户上传一张图片之后必须死等，不能流畅的操作，不能让上传图片的操作放到后台。\n\n\n\n所以中国人发明了一个猫腻写法，解决了这个事情：\n\n-   隐藏`<input type=\"file\" />`控件\n\n-   写一个外部form表格\n\n-   做一个其他的东西比如+号，点击+号的时候触发(trigger)那个file的click事件，会弹出框框\n\n-   监听file控件onchange事件，当onchange事件发生，命令`$(form).submit()`\n\n> 理一下逻辑：因为图片上传是不能有异步的，必须用form来模拟，而form提交会跳转页面，所以就要内嵌到iframe里面。此时form上传成功的回调就需要通过form提交到的那个页面/fatupian来写一个`<script>window.parent.finish()</scirpt>`传给主页面。 \n> ![img](image2.png) \n> ![img](image3.png)\n> ![img](image4.png)\n\n\n麻烦的是，每一个图片上传完毕之后，不能都调用名字叫做finish()的函数，这样就乱套了。此时：我们现在给每一个li这个类，**一上来就创建一个随机数，这个数字就是回调函数的名字**。通过iframe的src引用时候的GET参数传给form2页面，form2页面中提交的网址也不是/fatupian了，而是/fatupian?callback=\\....\n\n![](media/image5.png)\n\n\n\njQueryUI中，sortable表示可以拖拽排序，最后一项不参加排序：\n\n```javascript\n//可以被排序\n$(\"#insertpic_box_ul\").sortable({\n\t\"items\" : \"li:not(:last)\"\n});\n```\n\n\n\n## 3.3 发问题的实现\n\n所有的问题存储在一个集合中，帖子有哪些属性：\n\n-   content内容\n\n-   images图片数据\n\n-   email发帖人的email\n\n-   time发帖时间\n\n我们实现了发帖功能的API接口，这是一个POST请求：\n\n**实话：我们的nodejs课程，你只需要能够流畅写出下面的语句就满分毕业！**\n\n```javascript\n//发帖功能\nexports.doSaveQ = function(req,res){\n\tvar form = new formidable.IncomingForm();\n\tform.parse(req , function(err , fields , files){\n\t\tvar email = req.session.email;\n\t\tvar content = fields.content;\n\t\tvar images = fields.images;\n\t\tvar time = new Date();\n\n\t\t//保存\n\t\tQ.create({\n\t\t\temail  : email ,\n\t\t\tcontent : content, \n\t\t\timages  : images ,\n\t\t\ttime  : time \n\t\t},function(){\n\t\t\tres.json({\"result\" : 1});\n\t\t});\n\t});\n}\n```\n\n\n\n## 3.4 拉取所有帖子\n\n**套路**：写接口，用Ajax拉取，面向对象上树。\n\n**分页的实现**：比如每页5条，页码从1开始。第3页就是跳过10条，读5条，此时读取的就是第11\\~15条。\n\n**第page页，就是跳过(page-1)\\*pagesize条，读pagesize条。**\n\n```javascript\nexports.getQ = function(req,res){\n\tvar page = url.parse(req.url , true).query.page;\n\tvar pagesize = url.parse(req.url , true).query.pagesize;\n\t//得到所有的帖子，按时间倒序\n\tQ.find({}).sort({\"time\" : -1}).skip((page - 1) * pagesize).limit(pagesize).exec(function(err,results){\n\t\tres.json({\"results\" : results});\n\t});\n}\n```\n\n\n\n![1542533881927](1542533881927.png)\n\n\n\n","slug":"Dev/nodejs/nodejs06","published":1,"_id":"cjoncnbr9000l2gfi4kvs8o1l","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><blockquote>\n<p>第6天课堂笔记</p>\n<p>讲师：邵山欢</p>\n<p>日期：2017年11月11日</p>\n</blockquote>\n<h1 id=\"一、NodeJS学习成果自查\"><a href=\"#一、NodeJS学习成果自查\" class=\"headerlink\" title=\"一、NodeJS学习成果自查\"></a>一、NodeJS学习成果自查</h1><p><strong>只要会写Ajax的接口，结合Mongoose做一套RESTful API的接口，就能学习React了。</strong></p>\n<p>NodeJS无法挑战老牌3P语言的，asp.net、jsp、php。</p>\n<p>上课的时候很多时候在讲面向对象，还有一些经验上的东西。</p>\n<h1 id=\"二、用户头像功能继续完善\"><a href=\"#二、用户头像功能继续完善\" class=\"headerlink\" title=\"二、用户头像功能继续完善\"></a>二、用户头像功能继续完善</h1><p>当用户上传头像、剪裁之后，立即将头像移动位置，从uploads到www/useravatars/文件夹中。</p>\n<p>页面单独的js文件喜欢写在\\&lt;/body>之后，所有的公共的js文件（包括各种lib库）都喜欢写在页面的\\<head\\>中。</head\\></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>等价于</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"built_in\">document</span>).ready(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>表示当页面的骨架结构加载完毕之后，执行回调函数。和window.onload类似，但是不一样。</p>\n<p>$(document).ready()要早于window.onload事件。</p>\n<ul>\n<li><p>$(document).ready() 是骨架结构加载完毕</p>\n</li>\n<li><p>window.onload 是所有的css、图片、音乐都加载完毕</p>\n</li>\n</ul>\n<h1 id=\"三、首页的开发\"><a href=\"#三、首页的开发\" class=\"headerlink\" title=\"三、首页的开发\"></a>三、首页的开发</h1><h2 id=\"3-1-发帖图片开发\"><a href=\"#3-1-发帖图片开发\" class=\"headerlink\" title=\"3.1 发帖图片开发\"></a>3.1 发帖图片开发</h2><p>点击一个悬浮框的外部，就关闭这个悬浮框。此时要给document绑定监听。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//点击插入图片按钮的事件</span></span><br><span class=\"line\">$(<span class=\"string\">\"#insertpic_button\"</span>).click(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//阻止事件继续传播，这样的话就不会点击a标签的时候，也会触发document的点击事件了</span></span><br><span class=\"line\">    event.stopPropagation();</span><br><span class=\"line\">    $(<span class=\"string\">\"#insertpic_box\"</span>).removeClass(<span class=\"string\">'fade'</span>).addClass(<span class=\"string\">'show'</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//点击插入图片框的外部关闭这个框框</span></span><br><span class=\"line\">$(<span class=\"built_in\">document</span>).click(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//你点击的最内层元素</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> target = event.target || event.srcElement;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span>($(target).parents(<span class=\"string\">\"#insertpic_box\"</span>).length &lt;= <span class=\"number\">0</span> &amp;&amp; !$(target).is(<span class=\"string\">\"#insertpic_box\"</span>))&#123;</span><br><span class=\"line\">        $(<span class=\"string\">\"#insertpic_box\"</span>).removeClass(<span class=\"string\">'show'</span>).addClass(<span class=\"string\">'fade'</span>);</span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-2-图片的异步上传\"><a href=\"#3-2-图片的异步上传\" class=\"headerlink\" title=\"3.2 图片的异步上传\"></a>3.2 图片的异步上传</h2><p>HTML没有图片异步上传功能。</p>\n<p><strong>先复习一下同步和异步：</strong></p>\n<p>如果有一个form表单，里面有一些输入框，一个提交按钮，form标签有action、method属性，点击提交按钮页面会跳转，这种表单提交我们称之为”<strong>同步提交</strong>“：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">action</span>=<span class=\"string\">\"/tijiao\"</span> <span class=\"attr\">method</span>=<span class=\"string\">\"post\"</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"yonghuming\"</span> /&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"submit\"</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>如果表单没有action、method属性，没有submit按钮，而是普通按钮。点击普通按钮的时候，通过ajax提交，此时我们称之为”<strong>异步提交</strong>“：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"yonghuming\"</span> /&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"button\"</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">$(\"input[type=button]\").click(function()&#123;</span><br><span class=\"line\">\t$.post(\"/tijiao\" , &#123;</span><br><span class=\"line\">\t\tyonghuming : $(\"input[name=yonghuming]\").val();</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>如果表单中有file控件（让用户选择一个文件），此时这个表单原则上讲、API层级没有任何办法异步提交！</p>\n<p>老老实实这么写：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">action</span>=<span class=\"string\">\"/tijiao\"</span> <span class=\"attr\">method</span>=<span class=\"string\">\"post\"</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"file\"</span> /&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"submit\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>这样一来，用户体验极差，用户上传一张图片之后必须死等，不能流畅的操作，不能让上传图片的操作放到后台。</p>\n<p>所以中国人发明了一个猫腻写法，解决了这个事情：</p>\n<ul>\n<li><p>隐藏<code>&lt;input type=&quot;file&quot; /&gt;</code>控件</p>\n</li>\n<li><p>写一个外部form表格</p>\n</li>\n<li><p>做一个其他的东西比如+号，点击+号的时候触发(trigger)那个file的click事件，会弹出框框</p>\n</li>\n<li><p>监听file控件onchange事件，当onchange事件发生，命令<code>$(form).submit()</code></p>\n</li>\n</ul>\n<blockquote>\n<p>理一下逻辑：因为图片上传是不能有异步的，必须用form来模拟，而form提交会跳转页面，所以就要内嵌到iframe里面。此时form上传成功的回调就需要通过form提交到的那个页面/fatupian来写一个<code>&lt;script&gt;window.parent.finish()&lt;/scirpt&gt;</code>传给主页面。<br><img src=\"image2.png\" alt=\"img\"><br><img src=\"image3.png\" alt=\"img\"><br><img src=\"image4.png\" alt=\"img\"></p>\n</blockquote>\n<p>麻烦的是，每一个图片上传完毕之后，不能都调用名字叫做finish()的函数，这样就乱套了。此时：我们现在给每一个li这个类，<strong>一上来就创建一个随机数，这个数字就是回调函数的名字</strong>。通过iframe的src引用时候的GET参数传给form2页面，form2页面中提交的网址也不是/fatupian了，而是/fatupian?callback=.…</p>\n<p><img src=\"media/image5.png\" alt=\"\"></p>\n<p>jQueryUI中，sortable表示可以拖拽排序，最后一项不参加排序：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//可以被排序</span></span><br><span class=\"line\">$(<span class=\"string\">\"#insertpic_box_ul\"</span>).sortable(&#123;</span><br><span class=\"line\">\t<span class=\"string\">\"items\"</span> : <span class=\"string\">\"li:not(:last)\"</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-3-发问题的实现\"><a href=\"#3-3-发问题的实现\" class=\"headerlink\" title=\"3.3 发问题的实现\"></a>3.3 发问题的实现</h2><p>所有的问题存储在一个集合中，帖子有哪些属性：</p>\n<ul>\n<li><p>content内容</p>\n</li>\n<li><p>images图片数据</p>\n</li>\n<li><p>email发帖人的email</p>\n</li>\n<li><p>time发帖时间</p>\n</li>\n</ul>\n<p>我们实现了发帖功能的API接口，这是一个POST请求：</p>\n<p><strong>实话：我们的nodejs课程，你只需要能够流畅写出下面的语句就满分毕业！</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//发帖功能</span></span><br><span class=\"line\">exports.doSaveQ = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req,res</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> form = <span class=\"keyword\">new</span> formidable.IncomingForm();</span><br><span class=\"line\">\tform.parse(req , <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err , fields , files</span>)</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> email = req.session.email;</span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> content = fields.content;</span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> images = fields.images;</span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> time = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">//保存</span></span><br><span class=\"line\">\t\tQ.create(&#123;</span><br><span class=\"line\">\t\t\temail  : email ,</span><br><span class=\"line\">\t\t\tcontent : content, </span><br><span class=\"line\">\t\t\timages  : images ,</span><br><span class=\"line\">\t\t\ttime  : time </span><br><span class=\"line\">\t\t&#125;,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t\t\tres.json(&#123;<span class=\"string\">\"result\"</span> : <span class=\"number\">1</span>&#125;);</span><br><span class=\"line\">\t\t&#125;);</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-4-拉取所有帖子\"><a href=\"#3-4-拉取所有帖子\" class=\"headerlink\" title=\"3.4 拉取所有帖子\"></a>3.4 拉取所有帖子</h2><p><strong>套路</strong>：写接口，用Ajax拉取，面向对象上树。</p>\n<p><strong>分页的实现</strong>：比如每页5条，页码从1开始。第3页就是跳过10条，读5条，此时读取的就是第11~15条。</p>\n<p><strong>第page页，就是跳过(page-1)*pagesize条，读pagesize条。</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">exports.getQ = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req,res</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> page = url.parse(req.url , <span class=\"literal\">true</span>).query.page;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> pagesize = url.parse(req.url , <span class=\"literal\">true</span>).query.pagesize;</span><br><span class=\"line\">\t<span class=\"comment\">//得到所有的帖子，按时间倒序</span></span><br><span class=\"line\">\tQ.find(&#123;&#125;).sort(&#123;<span class=\"string\">\"time\"</span> : <span class=\"number\">-1</span>&#125;).skip((page - <span class=\"number\">1</span>) * pagesize).limit(pagesize).exec(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err,results</span>)</span>&#123;</span><br><span class=\"line\">\t\tres.json(&#123;<span class=\"string\">\"results\"</span> : results&#125;);</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"1542533881927.png\" alt=\"1542533881927\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><blockquote>\n<p>第6天课堂笔记</p>\n<p>讲师：邵山欢</p>\n<p>日期：2017年11月11日</p>\n</blockquote>\n<h1 id=\"一、NodeJS学习成果自查\"><a href=\"#一、NodeJS学习成果自查\" class=\"headerlink\" title=\"一、NodeJS学习成果自查\"></a>一、NodeJS学习成果自查</h1><p><strong>只要会写Ajax的接口，结合Mongoose做一套RESTful API的接口，就能学习React了。</strong></p>\n<p>NodeJS无法挑战老牌3P语言的，asp.net、jsp、php。</p>\n<p>上课的时候很多时候在讲面向对象，还有一些经验上的东西。</p>\n<h1 id=\"二、用户头像功能继续完善\"><a href=\"#二、用户头像功能继续完善\" class=\"headerlink\" title=\"二、用户头像功能继续完善\"></a>二、用户头像功能继续完善</h1><p>当用户上传头像、剪裁之后，立即将头像移动位置，从uploads到www/useravatars/文件夹中。</p>\n<p>页面单独的js文件喜欢写在\\&lt;/body>之后，所有的公共的js文件（包括各种lib库）都喜欢写在页面的\\<head\\>中。</head\\></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>等价于</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"built_in\">document</span>).ready(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>表示当页面的骨架结构加载完毕之后，执行回调函数。和window.onload类似，但是不一样。</p>\n<p>$(document).ready()要早于window.onload事件。</p>\n<ul>\n<li><p>$(document).ready() 是骨架结构加载完毕</p>\n</li>\n<li><p>window.onload 是所有的css、图片、音乐都加载完毕</p>\n</li>\n</ul>\n<h1 id=\"三、首页的开发\"><a href=\"#三、首页的开发\" class=\"headerlink\" title=\"三、首页的开发\"></a>三、首页的开发</h1><h2 id=\"3-1-发帖图片开发\"><a href=\"#3-1-发帖图片开发\" class=\"headerlink\" title=\"3.1 发帖图片开发\"></a>3.1 发帖图片开发</h2><p>点击一个悬浮框的外部，就关闭这个悬浮框。此时要给document绑定监听。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//点击插入图片按钮的事件</span></span><br><span class=\"line\">$(<span class=\"string\">\"#insertpic_button\"</span>).click(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//阻止事件继续传播，这样的话就不会点击a标签的时候，也会触发document的点击事件了</span></span><br><span class=\"line\">    event.stopPropagation();</span><br><span class=\"line\">    $(<span class=\"string\">\"#insertpic_box\"</span>).removeClass(<span class=\"string\">'fade'</span>).addClass(<span class=\"string\">'show'</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//点击插入图片框的外部关闭这个框框</span></span><br><span class=\"line\">$(<span class=\"built_in\">document</span>).click(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//你点击的最内层元素</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> target = event.target || event.srcElement;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span>($(target).parents(<span class=\"string\">\"#insertpic_box\"</span>).length &lt;= <span class=\"number\">0</span> &amp;&amp; !$(target).is(<span class=\"string\">\"#insertpic_box\"</span>))&#123;</span><br><span class=\"line\">        $(<span class=\"string\">\"#insertpic_box\"</span>).removeClass(<span class=\"string\">'show'</span>).addClass(<span class=\"string\">'fade'</span>);</span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-2-图片的异步上传\"><a href=\"#3-2-图片的异步上传\" class=\"headerlink\" title=\"3.2 图片的异步上传\"></a>3.2 图片的异步上传</h2><p>HTML没有图片异步上传功能。</p>\n<p><strong>先复习一下同步和异步：</strong></p>\n<p>如果有一个form表单，里面有一些输入框，一个提交按钮，form标签有action、method属性，点击提交按钮页面会跳转，这种表单提交我们称之为”<strong>同步提交</strong>“：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">action</span>=<span class=\"string\">\"/tijiao\"</span> <span class=\"attr\">method</span>=<span class=\"string\">\"post\"</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"yonghuming\"</span> /&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"submit\"</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>如果表单没有action、method属性，没有submit按钮，而是普通按钮。点击普通按钮的时候，通过ajax提交，此时我们称之为”<strong>异步提交</strong>“：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"yonghuming\"</span> /&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"button\"</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">$(\"input[type=button]\").click(function()&#123;</span><br><span class=\"line\">\t$.post(\"/tijiao\" , &#123;</span><br><span class=\"line\">\t\tyonghuming : $(\"input[name=yonghuming]\").val();</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>如果表单中有file控件（让用户选择一个文件），此时这个表单原则上讲、API层级没有任何办法异步提交！</p>\n<p>老老实实这么写：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">action</span>=<span class=\"string\">\"/tijiao\"</span> <span class=\"attr\">method</span>=<span class=\"string\">\"post\"</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"file\"</span> /&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"submit\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>这样一来，用户体验极差，用户上传一张图片之后必须死等，不能流畅的操作，不能让上传图片的操作放到后台。</p>\n<p>所以中国人发明了一个猫腻写法，解决了这个事情：</p>\n<ul>\n<li><p>隐藏<code>&lt;input type=&quot;file&quot; /&gt;</code>控件</p>\n</li>\n<li><p>写一个外部form表格</p>\n</li>\n<li><p>做一个其他的东西比如+号，点击+号的时候触发(trigger)那个file的click事件，会弹出框框</p>\n</li>\n<li><p>监听file控件onchange事件，当onchange事件发生，命令<code>$(form).submit()</code></p>\n</li>\n</ul>\n<blockquote>\n<p>理一下逻辑：因为图片上传是不能有异步的，必须用form来模拟，而form提交会跳转页面，所以就要内嵌到iframe里面。此时form上传成功的回调就需要通过form提交到的那个页面/fatupian来写一个<code>&lt;script&gt;window.parent.finish()&lt;/scirpt&gt;</code>传给主页面。<br><img src=\"image2.png\" alt=\"img\"><br><img src=\"image3.png\" alt=\"img\"><br><img src=\"image4.png\" alt=\"img\"></p>\n</blockquote>\n<p>麻烦的是，每一个图片上传完毕之后，不能都调用名字叫做finish()的函数，这样就乱套了。此时：我们现在给每一个li这个类，<strong>一上来就创建一个随机数，这个数字就是回调函数的名字</strong>。通过iframe的src引用时候的GET参数传给form2页面，form2页面中提交的网址也不是/fatupian了，而是/fatupian?callback=.…</p>\n<p><img src=\"media/image5.png\" alt=\"\"></p>\n<p>jQueryUI中，sortable表示可以拖拽排序，最后一项不参加排序：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//可以被排序</span></span><br><span class=\"line\">$(<span class=\"string\">\"#insertpic_box_ul\"</span>).sortable(&#123;</span><br><span class=\"line\">\t<span class=\"string\">\"items\"</span> : <span class=\"string\">\"li:not(:last)\"</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-3-发问题的实现\"><a href=\"#3-3-发问题的实现\" class=\"headerlink\" title=\"3.3 发问题的实现\"></a>3.3 发问题的实现</h2><p>所有的问题存储在一个集合中，帖子有哪些属性：</p>\n<ul>\n<li><p>content内容</p>\n</li>\n<li><p>images图片数据</p>\n</li>\n<li><p>email发帖人的email</p>\n</li>\n<li><p>time发帖时间</p>\n</li>\n</ul>\n<p>我们实现了发帖功能的API接口，这是一个POST请求：</p>\n<p><strong>实话：我们的nodejs课程，你只需要能够流畅写出下面的语句就满分毕业！</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//发帖功能</span></span><br><span class=\"line\">exports.doSaveQ = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req,res</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> form = <span class=\"keyword\">new</span> formidable.IncomingForm();</span><br><span class=\"line\">\tform.parse(req , <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err , fields , files</span>)</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> email = req.session.email;</span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> content = fields.content;</span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> images = fields.images;</span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> time = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">//保存</span></span><br><span class=\"line\">\t\tQ.create(&#123;</span><br><span class=\"line\">\t\t\temail  : email ,</span><br><span class=\"line\">\t\t\tcontent : content, </span><br><span class=\"line\">\t\t\timages  : images ,</span><br><span class=\"line\">\t\t\ttime  : time </span><br><span class=\"line\">\t\t&#125;,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t\t\tres.json(&#123;<span class=\"string\">\"result\"</span> : <span class=\"number\">1</span>&#125;);</span><br><span class=\"line\">\t\t&#125;);</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-4-拉取所有帖子\"><a href=\"#3-4-拉取所有帖子\" class=\"headerlink\" title=\"3.4 拉取所有帖子\"></a>3.4 拉取所有帖子</h2><p><strong>套路</strong>：写接口，用Ajax拉取，面向对象上树。</p>\n<p><strong>分页的实现</strong>：比如每页5条，页码从1开始。第3页就是跳过10条，读5条，此时读取的就是第11~15条。</p>\n<p><strong>第page页，就是跳过(page-1)*pagesize条，读pagesize条。</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">exports.getQ = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req,res</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> page = url.parse(req.url , <span class=\"literal\">true</span>).query.page;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> pagesize = url.parse(req.url , <span class=\"literal\">true</span>).query.pagesize;</span><br><span class=\"line\">\t<span class=\"comment\">//得到所有的帖子，按时间倒序</span></span><br><span class=\"line\">\tQ.find(&#123;&#125;).sort(&#123;<span class=\"string\">\"time\"</span> : <span class=\"number\">-1</span>&#125;).skip((page - <span class=\"number\">1</span>) * pagesize).limit(pagesize).exec(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err,results</span>)</span>&#123;</span><br><span class=\"line\">\t\tres.json(&#123;<span class=\"string\">\"results\"</span> : results&#125;);</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"1542533881927.png\" alt=\"1542533881927\"></p>\n"},{"title":"Node.js入门和企业级项目开发04","mathjax":false,"typora-root-url":"nodejs04","typora-copy-images-to":"nodejs04","abbrlink":3327617678,"date":"2018-11-17T15:59:21.000Z","updated":"2018-11-17T15:59:21.000Z","_content":"\n\n\n# 前言\n\n\n> 第4天课堂笔记\n>\n> 讲师：邵山欢\n>\n> 日期：2017年11月7日    \n\n# 一、复习\n\n我们现在学习数据库的目的就是让你面试的时候，能够有一套有完整API接口的作品。前端React、Vue。\n\n\n\n**数据库：数据的存储 + 一套数据操作的API。**\n\n比如我们用txt文件**模拟**数据库：\n\n```json\n[\n\t{\"id\":10001,\"name\":\"小明\",\"age\":12},\n\t{\"id\":10002,\"name\":\"小红\",\"age\":12},\n\t{\"id\":10003,\"name\":\"小刚\",\"age\":13}\n]\n```\n\n\n\n现在的需求是：更改id为10002的age为16。需要用遍历的方法，看看哪个项的id是10002，改变这项之后重新写全部的数组。\n\n如果是真实数据库，此时不需要遍历直接写一条语句就可以更改：\n\n```javascript\nStudent.update({\"id\":10002} , {\"$set\" : {\"age\" : 16}} , function(){\n\n});\n```\n\n\n\nNoSQL和SQL的不同一定要知道：没有字段的限制，每个条目和每个条目可以有不同的字段，每个字段可以有不同的类型。\n\n```json\n[\n\t{\"id\":10001,\"name\":\"小明\",\"age\":12},\n\t{\"id\":10002,\"name\":\"小红\",\"age\":12},\n\t{\"id\":10003,\"name\":\"小刚\",\"age\":13,\"sex\":\"男\"},\n\t{\"id\":\"CR10001\",\"name\":\"小名\",\"age\":13,\"sex\":\"男\"}\n]\n```\n\n\n\nMongoDB的使用，如何安装的？绿色软件，直接解压缩，设置环境变量。能够使用4个CMD命令：\n\n| mongod      | `mongod --dbpath c:\\database `开机                          |\n| ----------- | ----------------------------------------------------------- |\n| mongo       | 管理数据库的，进入REPL环境                                  |\n| mongoimport | mongoimport -d 数据库名字 -c 集合名字 文件的名字.txt --drop |\n| mongoexport | mongoexport -d 数据库名字 -c 集合名字 -o 文件的名字.txt     |\n\n\n\n数据库和NodeJS的连接，有原生的方法，不要求会了。只要会Mongoose。\n\n**两步走：创建schema和model → CRUD操作。**\n\n第一步，创建schema和model：\n\n```javascript\nvar mongoose = require(\"mongoose\");\n\nvar schema = new mongoose.Schema({\n\t\"name\" : String ,\n\t\"color\" : String ,\n\t\"age\" : Number ,\n\t\"pinzhong\" : {\n\t\t\"type\" : String ,\n\t\t\"default\" : \"中型犬\"\n\t}\n});\n\nmodule.exports = mongoose.model(\"Dog\" , schema);\n```\n\n第二步，写CRUD操作：\n\n```javascript\nvar mongoose = require(\"mongoose\");\n\nmongoose.connect(\"mongodb://localhost/cwgl_system\");\n\nvar Dog = require(\"./models/Dog.js\");\n\nDog.create({\n\t\"name\" : \"小白\" ,\n\t\"color\" : \"白色\" ,\n\t\"age\" : 2 \n},(err)=>{\n\tconsole.log(err);\n});\n```\n\n\n\nExpress中静态化一个资源文件夹\n\n```javascript\napp.use(express.static(\"www\"));\n```\n\n现在的套路是nodejs制作JSON、JSONP接口 ， 静态资源文件夹里面的文件负责页面的样式，用Ajax请求接口的数据。\n\n\n\nformidable要熟悉：\n\n```javascript\napp.post(\"/tijiao\" , function(req,res){\n\t//只要是post请求、delete等等，一定要用formidable来处理请求的参数\n\tvar form = new formidable.IncomingForm();\n\tform.parse(req , function(err , fields , files){\n\t\t//往数据库中存一个数据，存的数据来自POST请求的参数\n\t\tSurvey.create({\n\t\t\t\"timu1\" : fields.timu1 ,\n\t\t\t\"timu2\" : fields.timu2 ,\n\t\t\t\"timu3\" : fields.timu3 ,\n\t\t\t\"date\" : new Date()\n\t\t},function(err){\n\t\t\tres.json({\"result\" : err ? -1 : 1});\n\t\t});\n\t});\n});\n```\n\n\n\n**编程实际上就是多个东西配合使用：**\n\n* express的中间件\n\n  ```javascript\n  app.get(\"/\" , function(req,res){\n  \t\n  });\n  ```\n\n* formidable\n\n  ```javascript\n  var form = new formidable.IncomingForm();\n  form.parse(req , (err , fields , files)=>{\n  \t\n  });\n  ```\n\n* 数据库\n\n  ```javascript\n  Dog.create({\n  \n  },(err)=>{\n  \t\n  });\n  ```\n\n  \n\n结合起来就是这样：\n\n```javascript\napp.get(\"/\" , function(req,res){\n\tvar form = new formidable.IncomingForm();\n\tform.parse(req , (err , fields , files)=>{\n\t\tDog.create({\n\t\t\tname : fields.name , \n\t\t\tage : fields.age\n\t\t},(err)=>{\n\t\t\t\n\t\t})\n\t});\n});\n```\n\n\n\n# 二、模板引擎\n\n**如果要使用模板引擎，要做4个事情：**\n\n1.  安装依赖，`npm install --save ejs`\n\n2.  设置默认模板引擎 ` app.set(\"view engine\" , \"ejs\"); `\n\n3.  在views文件夹中创建一个.ejs后缀的页面，就是模板\n\n4.  在express的中间件中用`res.render()`来呈递视图，语法就是`res.render(模板文件名字 , {字典}); `\n\n    \n\n我们学习ejs模板引擎，首先安装依赖\n\n```\ncnpm install --save express ejs\n```\n\n```\n┣ views\n┃  ┣ shouye.ejs\n┣ app.js\n```\n\n\n\nshouye.ejs：\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n\t<meta charset=\"UTF-8\">\n</head>\n<body>\n\t<div class=\"wrap\">\n\t\t<h1>好<%=xinqing%>啊！今天我买了<%=dongxi%>，花了<%=qian%>元！</h1>\n\t</div>\n</body>\n</html>\n```\n\n\n\napp.js:\n\n```javascript\nvar express = require(\"express\");\nvar app = express();\n\n//设置默认模板引擎为ejs\napp.set(\"view engine\" , \"ejs\");\n\napp.get(\"/\" , function(req,res){\n\t//我们现在的res有的功能是：\n\t//res.send()、res.json()、res.jsonp()、res.sendFile()\n\t//现在多了一个res.render()表示使用模板页面\n\t//不需要加上views文件夹，因为模板引擎默认就是放在views文件夹中的\n\t//也不需要加上.ejs后缀\n\tres.render(\"shouye\" , {\n\t\t\"xinqing\" : \"高兴\",\n\t\t\"dongxi\" : \"苹果叉\",\n\t\t\"qian\" : 8000\n\t});\n});\n\napp.listen(3000);\n```\n\n\n\n**一些注意事项：**\n\n1. views文件夹可以改变，使用语\n    ```javascript\n    app.set(\"views\" , \"templates\");\n    ```\n\n    这样我们所有的.ejs文件都要放到 templates文件夹中了。\n\n2. 拓展名必须是`.ejs`，render的时候不需要写`.ejs`\n\n    ```javascript\n    res.render(\"shouye\" , {\n        \"xinqing\" : \"高兴\",\n        \"dongxi\" : \"苹果叉\",\n        \"qian\" : 8000\n    });\n    ```\n\n3. 可以使用一些for循环和if语句：\n\n    ```ejs\n    <ul>\n        <% for(var i = 0 ; i < ouxiang.length ; i++){ %>\n        \t<li><%= ouxiang[i] %></li>\n        <% } %>\n    </ul>\n    ```\n\n    `<% %>`表示for循环、if语句；\n\n    `<%= %>`表示输出\n\n\n\n对应的**字典**就必须是数组：\n\n```javascript\nres.render(\"shouye\" , {\n\t\"xinqing\" : \"高兴\",\n\t\"dongxi\" : \"苹果叉\",\n\t\"qian\" : 8000 ,\n\t\"ouxiang\" : [\"鹿晗\",\"王源\",\"王俊凯\",\"胡歌\"]\n});\n```\n\n\n\n再比如做一个年份选择的下拉列表：\n\n```ejs\n<select name=\"\" id=\"\">\n\t<% for(var i = 1930 ; i <= 2017 ; i++){ %>\n\t\t<option value=\"<%= i %>\"><%= i %></option>\n\t<% } %>\n</select>\n```\n\n\n\n还有其他的模板引擎[pug](https://www.npmjs.com/package/pug)（原名叫做Jade） ，有兴趣的同学自己研究。\n\n\n\n# 三、cookie和session\n\n## 3.1 cookie\n\nHTTP连接是无状态的，所以产生了身份识别问题：\n\n![](image2.png)\n\n工程师是神奇的物种，解决问题的思路往往非常简单：\n\n![](image3.png)\n\n**老外喜欢用\"曲奇饼干\"（cookie）当做信物，所以cookie就是上图中的信物。**\n\n>  服务器会下发一个Set-Cookie的下行报文字段，今后每一次访问这个服务器的时候，浏览器都要携带Cookie上行报文上去。这样服务器就知道你是你了。\n\n\n\nexpress中使用cookie需要安装一个依赖cookie-parser\n\n```\ncnpm install --save cookie-parser\n```\n\n\n\n设置cookie：\n\n```\nres.cookie('visited', visitedArr, { maxAge: 86400 });\n```\n\n\n\n读取cookie：\n\n```javascript\n//提前装好cookie-parser\nvar cookieParser = require('cookie-parser');\napp.use(cookieParser());\n//中间件中\napp.get(\"/:city\" , function(req,res){\n\treq.cookies.visited;\n});\n```\n\n![](image4.png)\n\n浏览器在2011年之前，如果想往硬盘中存储东西，唯一可以的办法就是cookie。\n\n2011年本地存储 localStorage诞生了，在2011年之前，cookie扮演了很多本地存储的角色。\n\n![](image5.png)\n\n\n\n## 3.2 session\n\n刚才我们制作了cookie的案例，发现服务器每次下发的cookie是有意义的文字。**session的机理是下发一个随机乱码，服务器记录下这个随机乱码的持有者的情况**。\n\n![](image6.png)\n\nsession的使用是对程序员是透明的，程序员不用刻意的设置session，Set-Cookie和Cookie就已经设置好了。\n\n\n\nsession在express中的使用，需要npm包：express-session。\n\n```\ncnpm install --save express express-session ejs\n```\n\n\n\n登录成功后，浏览器会下发随机乱码：\n\n![](image7.png)\n\n对于服务器来说，它只需要记住：\n\n> **携带s%3ApsMwf4mopanFucq4Urrv2VxaUAB2oD5b.7TvI5TSU1gk9LV55tFvMGyrGYgzn4uTBn1RPiNlDWRk**\n>\n> **的人login是true了，yonghuming是邵山欢。**\n\n\n\n```javascript\n//登录\napp.post(\"/login\" , function(req,res){\n\tvar form = new formidable.IncomingForm();\n\tform.parse(req , function(err , fields){\n\t\tif(fields.mima = \"123123\"){\n\t\t\t//下发session\n\t\t\treq.session.login = true;\n\t\t\treq.session.yonghuming = fields.yonghuming;\n\n\t\t\tres.redirect(\"/\");\n\t\t}\n\t});\n});\n```\n\n\n\n```javascript\n//首页\napp.get(\"/\" , function(req,res){\n\t//呈递模板，把登录信息也带上去：\n\tres.render(\"shouye\" , {\n\t\tlogin : req.session.login ,\n\t\tyonghuming : req.session.yonghuming ,\n\t\tanlian : req.session.anlian\n\t});\n});\n```\n\n\n\n# 四、问答平台项目\n\n## 4.1 基本文件夹的结构\n\n创建项目文件夹，安装依赖：\n\n```\ncnpm intsall --save express mongoose formidable cookie-parser express-session ejs\n```\n\n\n\n项目的基本文件结构：\n\n```\n┣ models\n┣ views\n┣ controllers\n┣ www\n┃  ┣  js\n┃  ┣  css\n┃  ┣  images\n┣ app.js\n```\n\n\n\n## 4.2 注册业务\n\n**开通一个业务，有三个事儿要做：**\n\n1.  开路由，罗列一个`app.get(\"/regist\" , *****);`\n2.  开模板引擎，在views文件夹中创建一个同名的`.ejs`结尾的模板文件;\n3.  思考模板引擎中的字典，用`res.render()`呈递\n\n\n\n路由：\n\n| URL     | 方法     | 作用                 |\n| ------- | -------- | -------------------- |\n| /regist | GET      | 显示注册页面         |\n| /regist | POST     | 执行注册             |\n| /regist | CHECKOUT | 验证用户名是否被占用 |\n\n![](image8.png)\n\n**一定要注意一个行业操守：不能将用户的密码的明文直接保存在数据库中。**\n\nCSDN有一次被黑了，结果用户的密码都泄露了，考拉老师的百度贴吧、QQ、网易邮箱都用的一个密码，全完蛋。\n\n**我们不能防止被黑，但是我们可以不让用户的密码泄露。黑客只能得到加密之后的密码。**\n\n这里介绍一个加密的东西MD5或者SHA256：这些加密都是不可逆的加密，不能从密文翻译为明文。常用于校验信息的正确性。\n\n在线加密网站：http://tool.oschina.net/encrypt?type=2\n\n\n\n我们来看SHA256：\n\n| 明文                                       | 密文                                                         |\n| ------------------------------------------ | ------------------------------------------------------------ |\n| 妈妈说不管你有多长的文字要加密，一律是64位 | 57f146775795fc42689b98cb9e756f7347efd4cfe6626b0a9aeea8c6de58eec7 |\n| 妈妈讲不管你有多长的文字要加密，一律是64位 | b56c5f6e489fbd69df47bf21ae9dcaa9771094a6e8224a379eeae6fa96490b5e |\n| 我爱你                                     | c0ad5411b19cfcba9d674d21411a970159f6ae4e180831ddd6a91797be547752 |\n| 你爱我                                     | f3a5bb9836b59f01cf001bc70c95318fea4cf43a1b148a8b5344aea07b34a279 |\n\n\n**注册的原理**：服务器的表格中，存储用户名，和加密之后的密码。当用户登录的时候，再次将用户登录填写的密码加密，和数据库的加密的密码进行比对，如果正确了说明用户密码填写正确。\n\nNodeJS中有一个原生模块叫做crypto，可以实现SHA256、MD5加密。\n\n\n","source":"_posts/Dev/nodejs/nodejs04.md","raw":"---\ntitle: Node.js入门和企业级项目开发04\nmathjax: false\ntypora-root-url: nodejs04\ntypora-copy-images-to: nodejs04\ncategories:\n  - nodejs\nabbrlink: 3327617678\ndate: 2018-11-17 23:59:21\nupdated: 2018-11-17 23:59:21\ntags:\n---\n\n\n\n# 前言\n\n\n> 第4天课堂笔记\n>\n> 讲师：邵山欢\n>\n> 日期：2017年11月7日    \n\n# 一、复习\n\n我们现在学习数据库的目的就是让你面试的时候，能够有一套有完整API接口的作品。前端React、Vue。\n\n\n\n**数据库：数据的存储 + 一套数据操作的API。**\n\n比如我们用txt文件**模拟**数据库：\n\n```json\n[\n\t{\"id\":10001,\"name\":\"小明\",\"age\":12},\n\t{\"id\":10002,\"name\":\"小红\",\"age\":12},\n\t{\"id\":10003,\"name\":\"小刚\",\"age\":13}\n]\n```\n\n\n\n现在的需求是：更改id为10002的age为16。需要用遍历的方法，看看哪个项的id是10002，改变这项之后重新写全部的数组。\n\n如果是真实数据库，此时不需要遍历直接写一条语句就可以更改：\n\n```javascript\nStudent.update({\"id\":10002} , {\"$set\" : {\"age\" : 16}} , function(){\n\n});\n```\n\n\n\nNoSQL和SQL的不同一定要知道：没有字段的限制，每个条目和每个条目可以有不同的字段，每个字段可以有不同的类型。\n\n```json\n[\n\t{\"id\":10001,\"name\":\"小明\",\"age\":12},\n\t{\"id\":10002,\"name\":\"小红\",\"age\":12},\n\t{\"id\":10003,\"name\":\"小刚\",\"age\":13,\"sex\":\"男\"},\n\t{\"id\":\"CR10001\",\"name\":\"小名\",\"age\":13,\"sex\":\"男\"}\n]\n```\n\n\n\nMongoDB的使用，如何安装的？绿色软件，直接解压缩，设置环境变量。能够使用4个CMD命令：\n\n| mongod      | `mongod --dbpath c:\\database `开机                          |\n| ----------- | ----------------------------------------------------------- |\n| mongo       | 管理数据库的，进入REPL环境                                  |\n| mongoimport | mongoimport -d 数据库名字 -c 集合名字 文件的名字.txt --drop |\n| mongoexport | mongoexport -d 数据库名字 -c 集合名字 -o 文件的名字.txt     |\n\n\n\n数据库和NodeJS的连接，有原生的方法，不要求会了。只要会Mongoose。\n\n**两步走：创建schema和model → CRUD操作。**\n\n第一步，创建schema和model：\n\n```javascript\nvar mongoose = require(\"mongoose\");\n\nvar schema = new mongoose.Schema({\n\t\"name\" : String ,\n\t\"color\" : String ,\n\t\"age\" : Number ,\n\t\"pinzhong\" : {\n\t\t\"type\" : String ,\n\t\t\"default\" : \"中型犬\"\n\t}\n});\n\nmodule.exports = mongoose.model(\"Dog\" , schema);\n```\n\n第二步，写CRUD操作：\n\n```javascript\nvar mongoose = require(\"mongoose\");\n\nmongoose.connect(\"mongodb://localhost/cwgl_system\");\n\nvar Dog = require(\"./models/Dog.js\");\n\nDog.create({\n\t\"name\" : \"小白\" ,\n\t\"color\" : \"白色\" ,\n\t\"age\" : 2 \n},(err)=>{\n\tconsole.log(err);\n});\n```\n\n\n\nExpress中静态化一个资源文件夹\n\n```javascript\napp.use(express.static(\"www\"));\n```\n\n现在的套路是nodejs制作JSON、JSONP接口 ， 静态资源文件夹里面的文件负责页面的样式，用Ajax请求接口的数据。\n\n\n\nformidable要熟悉：\n\n```javascript\napp.post(\"/tijiao\" , function(req,res){\n\t//只要是post请求、delete等等，一定要用formidable来处理请求的参数\n\tvar form = new formidable.IncomingForm();\n\tform.parse(req , function(err , fields , files){\n\t\t//往数据库中存一个数据，存的数据来自POST请求的参数\n\t\tSurvey.create({\n\t\t\t\"timu1\" : fields.timu1 ,\n\t\t\t\"timu2\" : fields.timu2 ,\n\t\t\t\"timu3\" : fields.timu3 ,\n\t\t\t\"date\" : new Date()\n\t\t},function(err){\n\t\t\tres.json({\"result\" : err ? -1 : 1});\n\t\t});\n\t});\n});\n```\n\n\n\n**编程实际上就是多个东西配合使用：**\n\n* express的中间件\n\n  ```javascript\n  app.get(\"/\" , function(req,res){\n  \t\n  });\n  ```\n\n* formidable\n\n  ```javascript\n  var form = new formidable.IncomingForm();\n  form.parse(req , (err , fields , files)=>{\n  \t\n  });\n  ```\n\n* 数据库\n\n  ```javascript\n  Dog.create({\n  \n  },(err)=>{\n  \t\n  });\n  ```\n\n  \n\n结合起来就是这样：\n\n```javascript\napp.get(\"/\" , function(req,res){\n\tvar form = new formidable.IncomingForm();\n\tform.parse(req , (err , fields , files)=>{\n\t\tDog.create({\n\t\t\tname : fields.name , \n\t\t\tage : fields.age\n\t\t},(err)=>{\n\t\t\t\n\t\t})\n\t});\n});\n```\n\n\n\n# 二、模板引擎\n\n**如果要使用模板引擎，要做4个事情：**\n\n1.  安装依赖，`npm install --save ejs`\n\n2.  设置默认模板引擎 ` app.set(\"view engine\" , \"ejs\"); `\n\n3.  在views文件夹中创建一个.ejs后缀的页面，就是模板\n\n4.  在express的中间件中用`res.render()`来呈递视图，语法就是`res.render(模板文件名字 , {字典}); `\n\n    \n\n我们学习ejs模板引擎，首先安装依赖\n\n```\ncnpm install --save express ejs\n```\n\n```\n┣ views\n┃  ┣ shouye.ejs\n┣ app.js\n```\n\n\n\nshouye.ejs：\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n\t<meta charset=\"UTF-8\">\n</head>\n<body>\n\t<div class=\"wrap\">\n\t\t<h1>好<%=xinqing%>啊！今天我买了<%=dongxi%>，花了<%=qian%>元！</h1>\n\t</div>\n</body>\n</html>\n```\n\n\n\napp.js:\n\n```javascript\nvar express = require(\"express\");\nvar app = express();\n\n//设置默认模板引擎为ejs\napp.set(\"view engine\" , \"ejs\");\n\napp.get(\"/\" , function(req,res){\n\t//我们现在的res有的功能是：\n\t//res.send()、res.json()、res.jsonp()、res.sendFile()\n\t//现在多了一个res.render()表示使用模板页面\n\t//不需要加上views文件夹，因为模板引擎默认就是放在views文件夹中的\n\t//也不需要加上.ejs后缀\n\tres.render(\"shouye\" , {\n\t\t\"xinqing\" : \"高兴\",\n\t\t\"dongxi\" : \"苹果叉\",\n\t\t\"qian\" : 8000\n\t});\n});\n\napp.listen(3000);\n```\n\n\n\n**一些注意事项：**\n\n1. views文件夹可以改变，使用语\n    ```javascript\n    app.set(\"views\" , \"templates\");\n    ```\n\n    这样我们所有的.ejs文件都要放到 templates文件夹中了。\n\n2. 拓展名必须是`.ejs`，render的时候不需要写`.ejs`\n\n    ```javascript\n    res.render(\"shouye\" , {\n        \"xinqing\" : \"高兴\",\n        \"dongxi\" : \"苹果叉\",\n        \"qian\" : 8000\n    });\n    ```\n\n3. 可以使用一些for循环和if语句：\n\n    ```ejs\n    <ul>\n        <% for(var i = 0 ; i < ouxiang.length ; i++){ %>\n        \t<li><%= ouxiang[i] %></li>\n        <% } %>\n    </ul>\n    ```\n\n    `<% %>`表示for循环、if语句；\n\n    `<%= %>`表示输出\n\n\n\n对应的**字典**就必须是数组：\n\n```javascript\nres.render(\"shouye\" , {\n\t\"xinqing\" : \"高兴\",\n\t\"dongxi\" : \"苹果叉\",\n\t\"qian\" : 8000 ,\n\t\"ouxiang\" : [\"鹿晗\",\"王源\",\"王俊凯\",\"胡歌\"]\n});\n```\n\n\n\n再比如做一个年份选择的下拉列表：\n\n```ejs\n<select name=\"\" id=\"\">\n\t<% for(var i = 1930 ; i <= 2017 ; i++){ %>\n\t\t<option value=\"<%= i %>\"><%= i %></option>\n\t<% } %>\n</select>\n```\n\n\n\n还有其他的模板引擎[pug](https://www.npmjs.com/package/pug)（原名叫做Jade） ，有兴趣的同学自己研究。\n\n\n\n# 三、cookie和session\n\n## 3.1 cookie\n\nHTTP连接是无状态的，所以产生了身份识别问题：\n\n![](image2.png)\n\n工程师是神奇的物种，解决问题的思路往往非常简单：\n\n![](image3.png)\n\n**老外喜欢用\"曲奇饼干\"（cookie）当做信物，所以cookie就是上图中的信物。**\n\n>  服务器会下发一个Set-Cookie的下行报文字段，今后每一次访问这个服务器的时候，浏览器都要携带Cookie上行报文上去。这样服务器就知道你是你了。\n\n\n\nexpress中使用cookie需要安装一个依赖cookie-parser\n\n```\ncnpm install --save cookie-parser\n```\n\n\n\n设置cookie：\n\n```\nres.cookie('visited', visitedArr, { maxAge: 86400 });\n```\n\n\n\n读取cookie：\n\n```javascript\n//提前装好cookie-parser\nvar cookieParser = require('cookie-parser');\napp.use(cookieParser());\n//中间件中\napp.get(\"/:city\" , function(req,res){\n\treq.cookies.visited;\n});\n```\n\n![](image4.png)\n\n浏览器在2011年之前，如果想往硬盘中存储东西，唯一可以的办法就是cookie。\n\n2011年本地存储 localStorage诞生了，在2011年之前，cookie扮演了很多本地存储的角色。\n\n![](image5.png)\n\n\n\n## 3.2 session\n\n刚才我们制作了cookie的案例，发现服务器每次下发的cookie是有意义的文字。**session的机理是下发一个随机乱码，服务器记录下这个随机乱码的持有者的情况**。\n\n![](image6.png)\n\nsession的使用是对程序员是透明的，程序员不用刻意的设置session，Set-Cookie和Cookie就已经设置好了。\n\n\n\nsession在express中的使用，需要npm包：express-session。\n\n```\ncnpm install --save express express-session ejs\n```\n\n\n\n登录成功后，浏览器会下发随机乱码：\n\n![](image7.png)\n\n对于服务器来说，它只需要记住：\n\n> **携带s%3ApsMwf4mopanFucq4Urrv2VxaUAB2oD5b.7TvI5TSU1gk9LV55tFvMGyrGYgzn4uTBn1RPiNlDWRk**\n>\n> **的人login是true了，yonghuming是邵山欢。**\n\n\n\n```javascript\n//登录\napp.post(\"/login\" , function(req,res){\n\tvar form = new formidable.IncomingForm();\n\tform.parse(req , function(err , fields){\n\t\tif(fields.mima = \"123123\"){\n\t\t\t//下发session\n\t\t\treq.session.login = true;\n\t\t\treq.session.yonghuming = fields.yonghuming;\n\n\t\t\tres.redirect(\"/\");\n\t\t}\n\t});\n});\n```\n\n\n\n```javascript\n//首页\napp.get(\"/\" , function(req,res){\n\t//呈递模板，把登录信息也带上去：\n\tres.render(\"shouye\" , {\n\t\tlogin : req.session.login ,\n\t\tyonghuming : req.session.yonghuming ,\n\t\tanlian : req.session.anlian\n\t});\n});\n```\n\n\n\n# 四、问答平台项目\n\n## 4.1 基本文件夹的结构\n\n创建项目文件夹，安装依赖：\n\n```\ncnpm intsall --save express mongoose formidable cookie-parser express-session ejs\n```\n\n\n\n项目的基本文件结构：\n\n```\n┣ models\n┣ views\n┣ controllers\n┣ www\n┃  ┣  js\n┃  ┣  css\n┃  ┣  images\n┣ app.js\n```\n\n\n\n## 4.2 注册业务\n\n**开通一个业务，有三个事儿要做：**\n\n1.  开路由，罗列一个`app.get(\"/regist\" , *****);`\n2.  开模板引擎，在views文件夹中创建一个同名的`.ejs`结尾的模板文件;\n3.  思考模板引擎中的字典，用`res.render()`呈递\n\n\n\n路由：\n\n| URL     | 方法     | 作用                 |\n| ------- | -------- | -------------------- |\n| /regist | GET      | 显示注册页面         |\n| /regist | POST     | 执行注册             |\n| /regist | CHECKOUT | 验证用户名是否被占用 |\n\n![](image8.png)\n\n**一定要注意一个行业操守：不能将用户的密码的明文直接保存在数据库中。**\n\nCSDN有一次被黑了，结果用户的密码都泄露了，考拉老师的百度贴吧、QQ、网易邮箱都用的一个密码，全完蛋。\n\n**我们不能防止被黑，但是我们可以不让用户的密码泄露。黑客只能得到加密之后的密码。**\n\n这里介绍一个加密的东西MD5或者SHA256：这些加密都是不可逆的加密，不能从密文翻译为明文。常用于校验信息的正确性。\n\n在线加密网站：http://tool.oschina.net/encrypt?type=2\n\n\n\n我们来看SHA256：\n\n| 明文                                       | 密文                                                         |\n| ------------------------------------------ | ------------------------------------------------------------ |\n| 妈妈说不管你有多长的文字要加密，一律是64位 | 57f146775795fc42689b98cb9e756f7347efd4cfe6626b0a9aeea8c6de58eec7 |\n| 妈妈讲不管你有多长的文字要加密，一律是64位 | b56c5f6e489fbd69df47bf21ae9dcaa9771094a6e8224a379eeae6fa96490b5e |\n| 我爱你                                     | c0ad5411b19cfcba9d674d21411a970159f6ae4e180831ddd6a91797be547752 |\n| 你爱我                                     | f3a5bb9836b59f01cf001bc70c95318fea4cf43a1b148a8b5344aea07b34a279 |\n\n\n**注册的原理**：服务器的表格中，存储用户名，和加密之后的密码。当用户登录的时候，再次将用户登录填写的密码加密，和数据库的加密的密码进行比对，如果正确了说明用户密码填写正确。\n\nNodeJS中有一个原生模块叫做crypto，可以实现SHA256、MD5加密。\n\n\n","slug":"Dev/nodejs/nodejs04","published":1,"_id":"cjoncnbrb000m2gfipk3bycr6","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><blockquote>\n<p>第4天课堂笔记</p>\n<p>讲师：邵山欢</p>\n<p>日期：2017年11月7日    </p>\n</blockquote>\n<h1 id=\"一、复习\"><a href=\"#一、复习\" class=\"headerlink\" title=\"一、复习\"></a>一、复习</h1><p>我们现在学习数据库的目的就是让你面试的时候，能够有一套有完整API接口的作品。前端React、Vue。</p>\n<p><strong>数据库：数据的存储 + 一套数据操作的API。</strong></p>\n<p>比如我们用txt文件<strong>模拟</strong>数据库：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[</span><br><span class=\"line\">\t&#123;<span class=\"attr\">\"id\"</span>:<span class=\"number\">10001</span>,<span class=\"attr\">\"name\"</span>:<span class=\"string\">\"小明\"</span>,<span class=\"attr\">\"age\"</span>:<span class=\"number\">12</span>&#125;,</span><br><span class=\"line\">\t&#123;<span class=\"attr\">\"id\"</span>:<span class=\"number\">10002</span>,<span class=\"attr\">\"name\"</span>:<span class=\"string\">\"小红\"</span>,<span class=\"attr\">\"age\"</span>:<span class=\"number\">12</span>&#125;,</span><br><span class=\"line\">\t&#123;<span class=\"attr\">\"id\"</span>:<span class=\"number\">10003</span>,<span class=\"attr\">\"name\"</span>:<span class=\"string\">\"小刚\"</span>,<span class=\"attr\">\"age\"</span>:<span class=\"number\">13</span>&#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n<p>现在的需求是：更改id为10002的age为16。需要用遍历的方法，看看哪个项的id是10002，改变这项之后重新写全部的数组。</p>\n<p>如果是真实数据库，此时不需要遍历直接写一条语句就可以更改：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Student.update(&#123;<span class=\"string\">\"id\"</span>:<span class=\"number\">10002</span>&#125; , &#123;<span class=\"string\">\"$set\"</span> : &#123;<span class=\"string\">\"age\"</span> : <span class=\"number\">16</span>&#125;&#125; , <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>NoSQL和SQL的不同一定要知道：没有字段的限制，每个条目和每个条目可以有不同的字段，每个字段可以有不同的类型。</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[</span><br><span class=\"line\">\t&#123;<span class=\"attr\">\"id\"</span>:<span class=\"number\">10001</span>,<span class=\"attr\">\"name\"</span>:<span class=\"string\">\"小明\"</span>,<span class=\"attr\">\"age\"</span>:<span class=\"number\">12</span>&#125;,</span><br><span class=\"line\">\t&#123;<span class=\"attr\">\"id\"</span>:<span class=\"number\">10002</span>,<span class=\"attr\">\"name\"</span>:<span class=\"string\">\"小红\"</span>,<span class=\"attr\">\"age\"</span>:<span class=\"number\">12</span>&#125;,</span><br><span class=\"line\">\t&#123;<span class=\"attr\">\"id\"</span>:<span class=\"number\">10003</span>,<span class=\"attr\">\"name\"</span>:<span class=\"string\">\"小刚\"</span>,<span class=\"attr\">\"age\"</span>:<span class=\"number\">13</span>,<span class=\"attr\">\"sex\"</span>:<span class=\"string\">\"男\"</span>&#125;,</span><br><span class=\"line\">\t&#123;<span class=\"attr\">\"id\"</span>:<span class=\"string\">\"CR10001\"</span>,<span class=\"attr\">\"name\"</span>:<span class=\"string\">\"小名\"</span>,<span class=\"attr\">\"age\"</span>:<span class=\"number\">13</span>,<span class=\"attr\">\"sex\"</span>:<span class=\"string\">\"男\"</span>&#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n<p>MongoDB的使用，如何安装的？绿色软件，直接解压缩，设置环境变量。能够使用4个CMD命令：</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>mongod</th>\n<th><code>mongod --dbpath c:\\database</code>开机</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>mongo</td>\n<td>管理数据库的，进入REPL环境</td>\n</tr>\n<tr>\n<td>mongoimport</td>\n<td>mongoimport -d 数据库名字 -c 集合名字 文件的名字.txt —drop</td>\n</tr>\n<tr>\n<td>mongoexport</td>\n<td>mongoexport -d 数据库名字 -c 集合名字 -o 文件的名字.txt</td>\n</tr>\n</tbody>\n</table>\n</div>\n<p>数据库和NodeJS的连接，有原生的方法，不要求会了。只要会Mongoose。</p>\n<p><strong>两步走：创建schema和model → CRUD操作。</strong></p>\n<p>第一步，创建schema和model：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> mongoose = <span class=\"built_in\">require</span>(<span class=\"string\">\"mongoose\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> schema = <span class=\"keyword\">new</span> mongoose.Schema(&#123;</span><br><span class=\"line\">\t<span class=\"string\">\"name\"</span> : <span class=\"built_in\">String</span> ,</span><br><span class=\"line\">\t<span class=\"string\">\"color\"</span> : <span class=\"built_in\">String</span> ,</span><br><span class=\"line\">\t<span class=\"string\">\"age\"</span> : <span class=\"built_in\">Number</span> ,</span><br><span class=\"line\">\t<span class=\"string\">\"pinzhong\"</span> : &#123;</span><br><span class=\"line\">\t\t<span class=\"string\">\"type\"</span> : <span class=\"built_in\">String</span> ,</span><br><span class=\"line\">\t\t<span class=\"string\">\"default\"</span> : <span class=\"string\">\"中型犬\"</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = mongoose.model(<span class=\"string\">\"Dog\"</span> , schema);</span><br></pre></td></tr></table></figure>\n<p>第二步，写CRUD操作：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> mongoose = <span class=\"built_in\">require</span>(<span class=\"string\">\"mongoose\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">mongoose.connect(<span class=\"string\">\"mongodb://localhost/cwgl_system\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> Dog = <span class=\"built_in\">require</span>(<span class=\"string\">\"./models/Dog.js\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">Dog.create(&#123;</span><br><span class=\"line\">\t<span class=\"string\">\"name\"</span> : <span class=\"string\">\"小白\"</span> ,</span><br><span class=\"line\">\t<span class=\"string\">\"color\"</span> : <span class=\"string\">\"白色\"</span> ,</span><br><span class=\"line\">\t<span class=\"string\">\"age\"</span> : <span class=\"number\">2</span> </span><br><span class=\"line\">&#125;,(err)=&gt;&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(err);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>Express中静态化一个资源文件夹</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.use(express.static(<span class=\"string\">\"www\"</span>));</span><br></pre></td></tr></table></figure>\n<p>现在的套路是nodejs制作JSON、JSONP接口 ， 静态资源文件夹里面的文件负责页面的样式，用Ajax请求接口的数据。</p>\n<p>formidable要熟悉：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.post(<span class=\"string\">\"/tijiao\"</span> , <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req,res</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//只要是post请求、delete等等，一定要用formidable来处理请求的参数</span></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> form = <span class=\"keyword\">new</span> formidable.IncomingForm();</span><br><span class=\"line\">\tform.parse(req , <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err , fields , files</span>)</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//往数据库中存一个数据，存的数据来自POST请求的参数</span></span><br><span class=\"line\">\t\tSurvey.create(&#123;</span><br><span class=\"line\">\t\t\t<span class=\"string\">\"timu1\"</span> : fields.timu1 ,</span><br><span class=\"line\">\t\t\t<span class=\"string\">\"timu2\"</span> : fields.timu2 ,</span><br><span class=\"line\">\t\t\t<span class=\"string\">\"timu3\"</span> : fields.timu3 ,</span><br><span class=\"line\">\t\t\t<span class=\"string\">\"date\"</span> : <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>()</span><br><span class=\"line\">\t\t&#125;,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err</span>)</span>&#123;</span><br><span class=\"line\">\t\t\tres.json(&#123;<span class=\"string\">\"result\"</span> : err ? <span class=\"number\">-1</span> : <span class=\"number\">1</span>&#125;);</span><br><span class=\"line\">\t\t&#125;);</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p><strong>编程实际上就是多个东西配合使用：</strong></p>\n<ul>\n<li><p>express的中间件</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.get(<span class=\"string\">\"/\"</span> , <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req,res</span>)</span>&#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>formidable</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> form = <span class=\"keyword\">new</span> formidable.IncomingForm();</span><br><span class=\"line\">form.parse(req , (err , fields , files)=&gt;&#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>数据库</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Dog.create(&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;,(err)=&gt;&#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>结合起来就是这样：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.get(<span class=\"string\">\"/\"</span> , <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req,res</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> form = <span class=\"keyword\">new</span> formidable.IncomingForm();</span><br><span class=\"line\">\tform.parse(req , (err , fields , files)=&gt;&#123;</span><br><span class=\"line\">\t\tDog.create(&#123;</span><br><span class=\"line\">\t\t\tname : fields.name , </span><br><span class=\"line\">\t\t\tage : fields.age</span><br><span class=\"line\">\t\t&#125;,(err)=&gt;&#123;</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t&#125;)</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h1 id=\"二、模板引擎\"><a href=\"#二、模板引擎\" class=\"headerlink\" title=\"二、模板引擎\"></a>二、模板引擎</h1><p><strong>如果要使用模板引擎，要做4个事情：</strong></p>\n<ol>\n<li><p>安装依赖，<code>npm install --save ejs</code></p>\n</li>\n<li><p>设置默认模板引擎 <code>app.set(&quot;view engine&quot; , &quot;ejs&quot;);</code></p>\n</li>\n<li><p>在views文件夹中创建一个.ejs后缀的页面，就是模板</p>\n</li>\n<li><p>在express的中间件中用<code>res.render()</code>来呈递视图，语法就是<code>res.render(模板文件名字 , {字典});</code></p>\n</li>\n</ol>\n<p>我们学习ejs模板引擎，首先安装依赖</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cnpm install --save express ejs</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">┣ views</span><br><span class=\"line\">┃  ┣ shouye.ejs</span><br><span class=\"line\">┣ app.js</span><br></pre></td></tr></table></figure>\n<p>shouye.ejs：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"wrap\"</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>好<span class=\"tag\">&lt;<span class=\"name\">%=xinqing%</span>&gt;</span>啊！今天我买了<span class=\"tag\">&lt;<span class=\"name\">%=dongxi%</span>&gt;</span>，花了<span class=\"tag\">&lt;<span class=\"name\">%=qian%</span>&gt;</span>元！<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>app.js:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">\"express\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> app = express();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//设置默认模板引擎为ejs</span></span><br><span class=\"line\">app.set(<span class=\"string\">\"view engine\"</span> , <span class=\"string\">\"ejs\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">app.get(<span class=\"string\">\"/\"</span> , <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req,res</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//我们现在的res有的功能是：</span></span><br><span class=\"line\">\t<span class=\"comment\">//res.send()、res.json()、res.jsonp()、res.sendFile()</span></span><br><span class=\"line\">\t<span class=\"comment\">//现在多了一个res.render()表示使用模板页面</span></span><br><span class=\"line\">\t<span class=\"comment\">//不需要加上views文件夹，因为模板引擎默认就是放在views文件夹中的</span></span><br><span class=\"line\">\t<span class=\"comment\">//也不需要加上.ejs后缀</span></span><br><span class=\"line\">\tres.render(<span class=\"string\">\"shouye\"</span> , &#123;</span><br><span class=\"line\">\t\t<span class=\"string\">\"xinqing\"</span> : <span class=\"string\">\"高兴\"</span>,</span><br><span class=\"line\">\t\t<span class=\"string\">\"dongxi\"</span> : <span class=\"string\">\"苹果叉\"</span>,</span><br><span class=\"line\">\t\t<span class=\"string\">\"qian\"</span> : <span class=\"number\">8000</span></span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">app.listen(<span class=\"number\">3000</span>);</span><br></pre></td></tr></table></figure>\n<p><strong>一些注意事项：</strong></p>\n<ol>\n<li><p>views文件夹可以改变，使用语</p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.set(<span class=\"string\">\"views\"</span> , <span class=\"string\">\"templates\"</span>);</span><br></pre></td></tr></table></figure>\n<p> 这样我们所有的.ejs文件都要放到 templates文件夹中了。</p>\n</li>\n<li><p>拓展名必须是<code>.ejs</code>，render的时候不需要写<code>.ejs</code></p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">res.render(<span class=\"string\">\"shouye\"</span> , &#123;</span><br><span class=\"line\">    <span class=\"string\">\"xinqing\"</span> : <span class=\"string\">\"高兴\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"dongxi\"</span> : <span class=\"string\">\"苹果叉\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"qian\"</span> : <span class=\"number\">8000</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>可以使用一些for循环和if语句：</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;ul&gt;</span><br><span class=\"line\">    &lt;% for(var i = 0 ; i &lt; ouxiang.length ; i++)&#123; %&gt;</span><br><span class=\"line\">    \t&lt;li&gt;&lt;%= ouxiang[i] %&gt;&lt;/li&gt;</span><br><span class=\"line\">    &lt;% &#125; %&gt;</span><br><span class=\"line\">&lt;/ul&gt;</span><br></pre></td></tr></table></figure>\n<p> <code>&lt;% %&gt;</code>表示for循环、if语句；</p>\n<p> <code>&lt;%= %&gt;</code>表示输出</p>\n</li>\n</ol>\n<p>对应的<strong>字典</strong>就必须是数组：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">res.render(<span class=\"string\">\"shouye\"</span> , &#123;</span><br><span class=\"line\">\t<span class=\"string\">\"xinqing\"</span> : <span class=\"string\">\"高兴\"</span>,</span><br><span class=\"line\">\t<span class=\"string\">\"dongxi\"</span> : <span class=\"string\">\"苹果叉\"</span>,</span><br><span class=\"line\">\t<span class=\"string\">\"qian\"</span> : <span class=\"number\">8000</span> ,</span><br><span class=\"line\">\t<span class=\"string\">\"ouxiang\"</span> : [<span class=\"string\">\"鹿晗\"</span>,<span class=\"string\">\"王源\"</span>,<span class=\"string\">\"王俊凯\"</span>,<span class=\"string\">\"胡歌\"</span>]</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>再比如做一个年份选择的下拉列表：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;select name=&quot;&quot; id=&quot;&quot;&gt;</span><br><span class=\"line\">\t&lt;% for(var i = 1930 ; i &lt;= 2017 ; i++)&#123; %&gt;</span><br><span class=\"line\">\t\t&lt;option value=&quot;&lt;%= i %&gt;&quot;&gt;&lt;%= i %&gt;&lt;/option&gt;</span><br><span class=\"line\">\t&lt;% &#125; %&gt;</span><br><span class=\"line\">&lt;/select&gt;</span><br></pre></td></tr></table></figure>\n<p>还有其他的模板引擎<a href=\"https://www.npmjs.com/package/pug\" target=\"_blank\" rel=\"noopener\">pug</a>（原名叫做Jade） ，有兴趣的同学自己研究。</p>\n<h1 id=\"三、cookie和session\"><a href=\"#三、cookie和session\" class=\"headerlink\" title=\"三、cookie和session\"></a>三、cookie和session</h1><h2 id=\"3-1-cookie\"><a href=\"#3-1-cookie\" class=\"headerlink\" title=\"3.1 cookie\"></a>3.1 cookie</h2><p>HTTP连接是无状态的，所以产生了身份识别问题：</p>\n<p><img src=\"image2.png\" alt=\"\"></p>\n<p>工程师是神奇的物种，解决问题的思路往往非常简单：</p>\n<p><img src=\"image3.png\" alt=\"\"></p>\n<p><strong>老外喜欢用”曲奇饼干”（cookie）当做信物，所以cookie就是上图中的信物。</strong></p>\n<blockquote>\n<p> 服务器会下发一个Set-Cookie的下行报文字段，今后每一次访问这个服务器的时候，浏览器都要携带Cookie上行报文上去。这样服务器就知道你是你了。</p>\n</blockquote>\n<p>express中使用cookie需要安装一个依赖cookie-parser</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cnpm install --save cookie-parser</span><br></pre></td></tr></table></figure>\n<p>设置cookie：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">res.cookie(&apos;visited&apos;, visitedArr, &#123; maxAge: 86400 &#125;);</span><br></pre></td></tr></table></figure>\n<p>读取cookie：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//提前装好cookie-parser</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> cookieParser = <span class=\"built_in\">require</span>(<span class=\"string\">'cookie-parser'</span>);</span><br><span class=\"line\">app.use(cookieParser());</span><br><span class=\"line\"><span class=\"comment\">//中间件中</span></span><br><span class=\"line\">app.get(<span class=\"string\">\"/:city\"</span> , <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req,res</span>)</span>&#123;</span><br><span class=\"line\">\treq.cookies.visited;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p><img src=\"image4.png\" alt=\"\"></p>\n<p>浏览器在2011年之前，如果想往硬盘中存储东西，唯一可以的办法就是cookie。</p>\n<p>2011年本地存储 localStorage诞生了，在2011年之前，cookie扮演了很多本地存储的角色。</p>\n<p><img src=\"image5.png\" alt=\"\"></p>\n<h2 id=\"3-2-session\"><a href=\"#3-2-session\" class=\"headerlink\" title=\"3.2 session\"></a>3.2 session</h2><p>刚才我们制作了cookie的案例，发现服务器每次下发的cookie是有意义的文字。<strong>session的机理是下发一个随机乱码，服务器记录下这个随机乱码的持有者的情况</strong>。</p>\n<p><img src=\"image6.png\" alt=\"\"></p>\n<p>session的使用是对程序员是透明的，程序员不用刻意的设置session，Set-Cookie和Cookie就已经设置好了。</p>\n<p>session在express中的使用，需要npm包：express-session。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cnpm install --save express express-session ejs</span><br></pre></td></tr></table></figure>\n<p>登录成功后，浏览器会下发随机乱码：</p>\n<p><img src=\"image7.png\" alt=\"\"></p>\n<p>对于服务器来说，它只需要记住：</p>\n<blockquote>\n<p><strong>携带s%3ApsMwf4mopanFucq4Urrv2VxaUAB2oD5b.7TvI5TSU1gk9LV55tFvMGyrGYgzn4uTBn1RPiNlDWRk</strong></p>\n<p><strong>的人login是true了，yonghuming是邵山欢。</strong></p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//登录</span></span><br><span class=\"line\">app.post(<span class=\"string\">\"/login\"</span> , <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req,res</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> form = <span class=\"keyword\">new</span> formidable.IncomingForm();</span><br><span class=\"line\">\tform.parse(req , <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err , fields</span>)</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(fields.mima = <span class=\"string\">\"123123\"</span>)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//下发session</span></span><br><span class=\"line\">\t\t\treq.session.login = <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t\t\treq.session.yonghuming = fields.yonghuming;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\tres.redirect(<span class=\"string\">\"/\"</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//首页</span></span><br><span class=\"line\">app.get(<span class=\"string\">\"/\"</span> , <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req,res</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//呈递模板，把登录信息也带上去：</span></span><br><span class=\"line\">\tres.render(<span class=\"string\">\"shouye\"</span> , &#123;</span><br><span class=\"line\">\t\tlogin : req.session.login ,</span><br><span class=\"line\">\t\tyonghuming : req.session.yonghuming ,</span><br><span class=\"line\">\t\tanlian : req.session.anlian</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h1 id=\"四、问答平台项目\"><a href=\"#四、问答平台项目\" class=\"headerlink\" title=\"四、问答平台项目\"></a>四、问答平台项目</h1><h2 id=\"4-1-基本文件夹的结构\"><a href=\"#4-1-基本文件夹的结构\" class=\"headerlink\" title=\"4.1 基本文件夹的结构\"></a>4.1 基本文件夹的结构</h2><p>创建项目文件夹，安装依赖：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cnpm intsall --save express mongoose formidable cookie-parser express-session ejs</span><br></pre></td></tr></table></figure>\n<p>项目的基本文件结构：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">┣ models</span><br><span class=\"line\">┣ views</span><br><span class=\"line\">┣ controllers</span><br><span class=\"line\">┣ www</span><br><span class=\"line\">┃  ┣  js</span><br><span class=\"line\">┃  ┣  css</span><br><span class=\"line\">┃  ┣  images</span><br><span class=\"line\">┣ app.js</span><br></pre></td></tr></table></figure>\n<h2 id=\"4-2-注册业务\"><a href=\"#4-2-注册业务\" class=\"headerlink\" title=\"4.2 注册业务\"></a>4.2 注册业务</h2><p><strong>开通一个业务，有三个事儿要做：</strong></p>\n<ol>\n<li>开路由，罗列一个<code>app.get(&quot;/regist&quot; , *****);</code></li>\n<li>开模板引擎，在views文件夹中创建一个同名的<code>.ejs</code>结尾的模板文件;</li>\n<li>思考模板引擎中的字典，用<code>res.render()</code>呈递</li>\n</ol>\n<p>路由：</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>URL</th>\n<th>方法</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>/regist</td>\n<td>GET</td>\n<td>显示注册页面</td>\n</tr>\n<tr>\n<td>/regist</td>\n<td>POST</td>\n<td>执行注册</td>\n</tr>\n<tr>\n<td>/regist</td>\n<td>CHECKOUT</td>\n<td>验证用户名是否被占用</td>\n</tr>\n</tbody>\n</table>\n</div>\n<p><img src=\"image8.png\" alt=\"\"></p>\n<p><strong>一定要注意一个行业操守：不能将用户的密码的明文直接保存在数据库中。</strong></p>\n<p>CSDN有一次被黑了，结果用户的密码都泄露了，考拉老师的百度贴吧、QQ、网易邮箱都用的一个密码，全完蛋。</p>\n<p><strong>我们不能防止被黑，但是我们可以不让用户的密码泄露。黑客只能得到加密之后的密码。</strong></p>\n<p>这里介绍一个加密的东西MD5或者SHA256：这些加密都是不可逆的加密，不能从密文翻译为明文。常用于校验信息的正确性。</p>\n<p>在线加密网站：<a href=\"http://tool.oschina.net/encrypt?type=2\" target=\"_blank\" rel=\"noopener\">http://tool.oschina.net/encrypt?type=2</a></p>\n<p>我们来看SHA256：</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>明文</th>\n<th>密文</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>妈妈说不管你有多长的文字要加密，一律是64位</td>\n<td>57f146775795fc42689b98cb9e756f7347efd4cfe6626b0a9aeea8c6de58eec7</td>\n</tr>\n<tr>\n<td>妈妈讲不管你有多长的文字要加密，一律是64位</td>\n<td>b56c5f6e489fbd69df47bf21ae9dcaa9771094a6e8224a379eeae6fa96490b5e</td>\n</tr>\n<tr>\n<td>我爱你</td>\n<td>c0ad5411b19cfcba9d674d21411a970159f6ae4e180831ddd6a91797be547752</td>\n</tr>\n<tr>\n<td>你爱我</td>\n<td>f3a5bb9836b59f01cf001bc70c95318fea4cf43a1b148a8b5344aea07b34a279</td>\n</tr>\n</tbody>\n</table>\n</div>\n<p><strong>注册的原理</strong>：服务器的表格中，存储用户名，和加密之后的密码。当用户登录的时候，再次将用户登录填写的密码加密，和数据库的加密的密码进行比对，如果正确了说明用户密码填写正确。</p>\n<p>NodeJS中有一个原生模块叫做crypto，可以实现SHA256、MD5加密。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><blockquote>\n<p>第4天课堂笔记</p>\n<p>讲师：邵山欢</p>\n<p>日期：2017年11月7日    </p>\n</blockquote>\n<h1 id=\"一、复习\"><a href=\"#一、复习\" class=\"headerlink\" title=\"一、复习\"></a>一、复习</h1><p>我们现在学习数据库的目的就是让你面试的时候，能够有一套有完整API接口的作品。前端React、Vue。</p>\n<p><strong>数据库：数据的存储 + 一套数据操作的API。</strong></p>\n<p>比如我们用txt文件<strong>模拟</strong>数据库：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[</span><br><span class=\"line\">\t&#123;<span class=\"attr\">\"id\"</span>:<span class=\"number\">10001</span>,<span class=\"attr\">\"name\"</span>:<span class=\"string\">\"小明\"</span>,<span class=\"attr\">\"age\"</span>:<span class=\"number\">12</span>&#125;,</span><br><span class=\"line\">\t&#123;<span class=\"attr\">\"id\"</span>:<span class=\"number\">10002</span>,<span class=\"attr\">\"name\"</span>:<span class=\"string\">\"小红\"</span>,<span class=\"attr\">\"age\"</span>:<span class=\"number\">12</span>&#125;,</span><br><span class=\"line\">\t&#123;<span class=\"attr\">\"id\"</span>:<span class=\"number\">10003</span>,<span class=\"attr\">\"name\"</span>:<span class=\"string\">\"小刚\"</span>,<span class=\"attr\">\"age\"</span>:<span class=\"number\">13</span>&#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n<p>现在的需求是：更改id为10002的age为16。需要用遍历的方法，看看哪个项的id是10002，改变这项之后重新写全部的数组。</p>\n<p>如果是真实数据库，此时不需要遍历直接写一条语句就可以更改：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Student.update(&#123;<span class=\"string\">\"id\"</span>:<span class=\"number\">10002</span>&#125; , &#123;<span class=\"string\">\"$set\"</span> : &#123;<span class=\"string\">\"age\"</span> : <span class=\"number\">16</span>&#125;&#125; , <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>NoSQL和SQL的不同一定要知道：没有字段的限制，每个条目和每个条目可以有不同的字段，每个字段可以有不同的类型。</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[</span><br><span class=\"line\">\t&#123;<span class=\"attr\">\"id\"</span>:<span class=\"number\">10001</span>,<span class=\"attr\">\"name\"</span>:<span class=\"string\">\"小明\"</span>,<span class=\"attr\">\"age\"</span>:<span class=\"number\">12</span>&#125;,</span><br><span class=\"line\">\t&#123;<span class=\"attr\">\"id\"</span>:<span class=\"number\">10002</span>,<span class=\"attr\">\"name\"</span>:<span class=\"string\">\"小红\"</span>,<span class=\"attr\">\"age\"</span>:<span class=\"number\">12</span>&#125;,</span><br><span class=\"line\">\t&#123;<span class=\"attr\">\"id\"</span>:<span class=\"number\">10003</span>,<span class=\"attr\">\"name\"</span>:<span class=\"string\">\"小刚\"</span>,<span class=\"attr\">\"age\"</span>:<span class=\"number\">13</span>,<span class=\"attr\">\"sex\"</span>:<span class=\"string\">\"男\"</span>&#125;,</span><br><span class=\"line\">\t&#123;<span class=\"attr\">\"id\"</span>:<span class=\"string\">\"CR10001\"</span>,<span class=\"attr\">\"name\"</span>:<span class=\"string\">\"小名\"</span>,<span class=\"attr\">\"age\"</span>:<span class=\"number\">13</span>,<span class=\"attr\">\"sex\"</span>:<span class=\"string\">\"男\"</span>&#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n<p>MongoDB的使用，如何安装的？绿色软件，直接解压缩，设置环境变量。能够使用4个CMD命令：</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>mongod</th>\n<th><code>mongod --dbpath c:\\database</code>开机</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>mongo</td>\n<td>管理数据库的，进入REPL环境</td>\n</tr>\n<tr>\n<td>mongoimport</td>\n<td>mongoimport -d 数据库名字 -c 集合名字 文件的名字.txt —drop</td>\n</tr>\n<tr>\n<td>mongoexport</td>\n<td>mongoexport -d 数据库名字 -c 集合名字 -o 文件的名字.txt</td>\n</tr>\n</tbody>\n</table>\n</div>\n<p>数据库和NodeJS的连接，有原生的方法，不要求会了。只要会Mongoose。</p>\n<p><strong>两步走：创建schema和model → CRUD操作。</strong></p>\n<p>第一步，创建schema和model：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> mongoose = <span class=\"built_in\">require</span>(<span class=\"string\">\"mongoose\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> schema = <span class=\"keyword\">new</span> mongoose.Schema(&#123;</span><br><span class=\"line\">\t<span class=\"string\">\"name\"</span> : <span class=\"built_in\">String</span> ,</span><br><span class=\"line\">\t<span class=\"string\">\"color\"</span> : <span class=\"built_in\">String</span> ,</span><br><span class=\"line\">\t<span class=\"string\">\"age\"</span> : <span class=\"built_in\">Number</span> ,</span><br><span class=\"line\">\t<span class=\"string\">\"pinzhong\"</span> : &#123;</span><br><span class=\"line\">\t\t<span class=\"string\">\"type\"</span> : <span class=\"built_in\">String</span> ,</span><br><span class=\"line\">\t\t<span class=\"string\">\"default\"</span> : <span class=\"string\">\"中型犬\"</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = mongoose.model(<span class=\"string\">\"Dog\"</span> , schema);</span><br></pre></td></tr></table></figure>\n<p>第二步，写CRUD操作：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> mongoose = <span class=\"built_in\">require</span>(<span class=\"string\">\"mongoose\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">mongoose.connect(<span class=\"string\">\"mongodb://localhost/cwgl_system\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> Dog = <span class=\"built_in\">require</span>(<span class=\"string\">\"./models/Dog.js\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">Dog.create(&#123;</span><br><span class=\"line\">\t<span class=\"string\">\"name\"</span> : <span class=\"string\">\"小白\"</span> ,</span><br><span class=\"line\">\t<span class=\"string\">\"color\"</span> : <span class=\"string\">\"白色\"</span> ,</span><br><span class=\"line\">\t<span class=\"string\">\"age\"</span> : <span class=\"number\">2</span> </span><br><span class=\"line\">&#125;,(err)=&gt;&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(err);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>Express中静态化一个资源文件夹</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.use(express.static(<span class=\"string\">\"www\"</span>));</span><br></pre></td></tr></table></figure>\n<p>现在的套路是nodejs制作JSON、JSONP接口 ， 静态资源文件夹里面的文件负责页面的样式，用Ajax请求接口的数据。</p>\n<p>formidable要熟悉：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.post(<span class=\"string\">\"/tijiao\"</span> , <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req,res</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//只要是post请求、delete等等，一定要用formidable来处理请求的参数</span></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> form = <span class=\"keyword\">new</span> formidable.IncomingForm();</span><br><span class=\"line\">\tform.parse(req , <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err , fields , files</span>)</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//往数据库中存一个数据，存的数据来自POST请求的参数</span></span><br><span class=\"line\">\t\tSurvey.create(&#123;</span><br><span class=\"line\">\t\t\t<span class=\"string\">\"timu1\"</span> : fields.timu1 ,</span><br><span class=\"line\">\t\t\t<span class=\"string\">\"timu2\"</span> : fields.timu2 ,</span><br><span class=\"line\">\t\t\t<span class=\"string\">\"timu3\"</span> : fields.timu3 ,</span><br><span class=\"line\">\t\t\t<span class=\"string\">\"date\"</span> : <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>()</span><br><span class=\"line\">\t\t&#125;,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err</span>)</span>&#123;</span><br><span class=\"line\">\t\t\tres.json(&#123;<span class=\"string\">\"result\"</span> : err ? <span class=\"number\">-1</span> : <span class=\"number\">1</span>&#125;);</span><br><span class=\"line\">\t\t&#125;);</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p><strong>编程实际上就是多个东西配合使用：</strong></p>\n<ul>\n<li><p>express的中间件</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.get(<span class=\"string\">\"/\"</span> , <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req,res</span>)</span>&#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>formidable</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> form = <span class=\"keyword\">new</span> formidable.IncomingForm();</span><br><span class=\"line\">form.parse(req , (err , fields , files)=&gt;&#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>数据库</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Dog.create(&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;,(err)=&gt;&#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>结合起来就是这样：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.get(<span class=\"string\">\"/\"</span> , <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req,res</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> form = <span class=\"keyword\">new</span> formidable.IncomingForm();</span><br><span class=\"line\">\tform.parse(req , (err , fields , files)=&gt;&#123;</span><br><span class=\"line\">\t\tDog.create(&#123;</span><br><span class=\"line\">\t\t\tname : fields.name , </span><br><span class=\"line\">\t\t\tage : fields.age</span><br><span class=\"line\">\t\t&#125;,(err)=&gt;&#123;</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t&#125;)</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h1 id=\"二、模板引擎\"><a href=\"#二、模板引擎\" class=\"headerlink\" title=\"二、模板引擎\"></a>二、模板引擎</h1><p><strong>如果要使用模板引擎，要做4个事情：</strong></p>\n<ol>\n<li><p>安装依赖，<code>npm install --save ejs</code></p>\n</li>\n<li><p>设置默认模板引擎 <code>app.set(&quot;view engine&quot; , &quot;ejs&quot;);</code></p>\n</li>\n<li><p>在views文件夹中创建一个.ejs后缀的页面，就是模板</p>\n</li>\n<li><p>在express的中间件中用<code>res.render()</code>来呈递视图，语法就是<code>res.render(模板文件名字 , {字典});</code></p>\n</li>\n</ol>\n<p>我们学习ejs模板引擎，首先安装依赖</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cnpm install --save express ejs</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">┣ views</span><br><span class=\"line\">┃  ┣ shouye.ejs</span><br><span class=\"line\">┣ app.js</span><br></pre></td></tr></table></figure>\n<p>shouye.ejs：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"wrap\"</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>好<span class=\"tag\">&lt;<span class=\"name\">%=xinqing%</span>&gt;</span>啊！今天我买了<span class=\"tag\">&lt;<span class=\"name\">%=dongxi%</span>&gt;</span>，花了<span class=\"tag\">&lt;<span class=\"name\">%=qian%</span>&gt;</span>元！<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>app.js:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">\"express\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> app = express();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//设置默认模板引擎为ejs</span></span><br><span class=\"line\">app.set(<span class=\"string\">\"view engine\"</span> , <span class=\"string\">\"ejs\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">app.get(<span class=\"string\">\"/\"</span> , <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req,res</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//我们现在的res有的功能是：</span></span><br><span class=\"line\">\t<span class=\"comment\">//res.send()、res.json()、res.jsonp()、res.sendFile()</span></span><br><span class=\"line\">\t<span class=\"comment\">//现在多了一个res.render()表示使用模板页面</span></span><br><span class=\"line\">\t<span class=\"comment\">//不需要加上views文件夹，因为模板引擎默认就是放在views文件夹中的</span></span><br><span class=\"line\">\t<span class=\"comment\">//也不需要加上.ejs后缀</span></span><br><span class=\"line\">\tres.render(<span class=\"string\">\"shouye\"</span> , &#123;</span><br><span class=\"line\">\t\t<span class=\"string\">\"xinqing\"</span> : <span class=\"string\">\"高兴\"</span>,</span><br><span class=\"line\">\t\t<span class=\"string\">\"dongxi\"</span> : <span class=\"string\">\"苹果叉\"</span>,</span><br><span class=\"line\">\t\t<span class=\"string\">\"qian\"</span> : <span class=\"number\">8000</span></span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">app.listen(<span class=\"number\">3000</span>);</span><br></pre></td></tr></table></figure>\n<p><strong>一些注意事项：</strong></p>\n<ol>\n<li><p>views文件夹可以改变，使用语</p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.set(<span class=\"string\">\"views\"</span> , <span class=\"string\">\"templates\"</span>);</span><br></pre></td></tr></table></figure>\n<p> 这样我们所有的.ejs文件都要放到 templates文件夹中了。</p>\n</li>\n<li><p>拓展名必须是<code>.ejs</code>，render的时候不需要写<code>.ejs</code></p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">res.render(<span class=\"string\">\"shouye\"</span> , &#123;</span><br><span class=\"line\">    <span class=\"string\">\"xinqing\"</span> : <span class=\"string\">\"高兴\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"dongxi\"</span> : <span class=\"string\">\"苹果叉\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"qian\"</span> : <span class=\"number\">8000</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>可以使用一些for循环和if语句：</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;ul&gt;</span><br><span class=\"line\">    &lt;% for(var i = 0 ; i &lt; ouxiang.length ; i++)&#123; %&gt;</span><br><span class=\"line\">    \t&lt;li&gt;&lt;%= ouxiang[i] %&gt;&lt;/li&gt;</span><br><span class=\"line\">    &lt;% &#125; %&gt;</span><br><span class=\"line\">&lt;/ul&gt;</span><br></pre></td></tr></table></figure>\n<p> <code>&lt;% %&gt;</code>表示for循环、if语句；</p>\n<p> <code>&lt;%= %&gt;</code>表示输出</p>\n</li>\n</ol>\n<p>对应的<strong>字典</strong>就必须是数组：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">res.render(<span class=\"string\">\"shouye\"</span> , &#123;</span><br><span class=\"line\">\t<span class=\"string\">\"xinqing\"</span> : <span class=\"string\">\"高兴\"</span>,</span><br><span class=\"line\">\t<span class=\"string\">\"dongxi\"</span> : <span class=\"string\">\"苹果叉\"</span>,</span><br><span class=\"line\">\t<span class=\"string\">\"qian\"</span> : <span class=\"number\">8000</span> ,</span><br><span class=\"line\">\t<span class=\"string\">\"ouxiang\"</span> : [<span class=\"string\">\"鹿晗\"</span>,<span class=\"string\">\"王源\"</span>,<span class=\"string\">\"王俊凯\"</span>,<span class=\"string\">\"胡歌\"</span>]</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>再比如做一个年份选择的下拉列表：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;select name=&quot;&quot; id=&quot;&quot;&gt;</span><br><span class=\"line\">\t&lt;% for(var i = 1930 ; i &lt;= 2017 ; i++)&#123; %&gt;</span><br><span class=\"line\">\t\t&lt;option value=&quot;&lt;%= i %&gt;&quot;&gt;&lt;%= i %&gt;&lt;/option&gt;</span><br><span class=\"line\">\t&lt;% &#125; %&gt;</span><br><span class=\"line\">&lt;/select&gt;</span><br></pre></td></tr></table></figure>\n<p>还有其他的模板引擎<a href=\"https://www.npmjs.com/package/pug\" target=\"_blank\" rel=\"noopener\">pug</a>（原名叫做Jade） ，有兴趣的同学自己研究。</p>\n<h1 id=\"三、cookie和session\"><a href=\"#三、cookie和session\" class=\"headerlink\" title=\"三、cookie和session\"></a>三、cookie和session</h1><h2 id=\"3-1-cookie\"><a href=\"#3-1-cookie\" class=\"headerlink\" title=\"3.1 cookie\"></a>3.1 cookie</h2><p>HTTP连接是无状态的，所以产生了身份识别问题：</p>\n<p><img src=\"image2.png\" alt=\"\"></p>\n<p>工程师是神奇的物种，解决问题的思路往往非常简单：</p>\n<p><img src=\"image3.png\" alt=\"\"></p>\n<p><strong>老外喜欢用”曲奇饼干”（cookie）当做信物，所以cookie就是上图中的信物。</strong></p>\n<blockquote>\n<p> 服务器会下发一个Set-Cookie的下行报文字段，今后每一次访问这个服务器的时候，浏览器都要携带Cookie上行报文上去。这样服务器就知道你是你了。</p>\n</blockquote>\n<p>express中使用cookie需要安装一个依赖cookie-parser</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cnpm install --save cookie-parser</span><br></pre></td></tr></table></figure>\n<p>设置cookie：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">res.cookie(&apos;visited&apos;, visitedArr, &#123; maxAge: 86400 &#125;);</span><br></pre></td></tr></table></figure>\n<p>读取cookie：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//提前装好cookie-parser</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> cookieParser = <span class=\"built_in\">require</span>(<span class=\"string\">'cookie-parser'</span>);</span><br><span class=\"line\">app.use(cookieParser());</span><br><span class=\"line\"><span class=\"comment\">//中间件中</span></span><br><span class=\"line\">app.get(<span class=\"string\">\"/:city\"</span> , <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req,res</span>)</span>&#123;</span><br><span class=\"line\">\treq.cookies.visited;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p><img src=\"image4.png\" alt=\"\"></p>\n<p>浏览器在2011年之前，如果想往硬盘中存储东西，唯一可以的办法就是cookie。</p>\n<p>2011年本地存储 localStorage诞生了，在2011年之前，cookie扮演了很多本地存储的角色。</p>\n<p><img src=\"image5.png\" alt=\"\"></p>\n<h2 id=\"3-2-session\"><a href=\"#3-2-session\" class=\"headerlink\" title=\"3.2 session\"></a>3.2 session</h2><p>刚才我们制作了cookie的案例，发现服务器每次下发的cookie是有意义的文字。<strong>session的机理是下发一个随机乱码，服务器记录下这个随机乱码的持有者的情况</strong>。</p>\n<p><img src=\"image6.png\" alt=\"\"></p>\n<p>session的使用是对程序员是透明的，程序员不用刻意的设置session，Set-Cookie和Cookie就已经设置好了。</p>\n<p>session在express中的使用，需要npm包：express-session。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cnpm install --save express express-session ejs</span><br></pre></td></tr></table></figure>\n<p>登录成功后，浏览器会下发随机乱码：</p>\n<p><img src=\"image7.png\" alt=\"\"></p>\n<p>对于服务器来说，它只需要记住：</p>\n<blockquote>\n<p><strong>携带s%3ApsMwf4mopanFucq4Urrv2VxaUAB2oD5b.7TvI5TSU1gk9LV55tFvMGyrGYgzn4uTBn1RPiNlDWRk</strong></p>\n<p><strong>的人login是true了，yonghuming是邵山欢。</strong></p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//登录</span></span><br><span class=\"line\">app.post(<span class=\"string\">\"/login\"</span> , <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req,res</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> form = <span class=\"keyword\">new</span> formidable.IncomingForm();</span><br><span class=\"line\">\tform.parse(req , <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err , fields</span>)</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(fields.mima = <span class=\"string\">\"123123\"</span>)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//下发session</span></span><br><span class=\"line\">\t\t\treq.session.login = <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t\t\treq.session.yonghuming = fields.yonghuming;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\tres.redirect(<span class=\"string\">\"/\"</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//首页</span></span><br><span class=\"line\">app.get(<span class=\"string\">\"/\"</span> , <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req,res</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//呈递模板，把登录信息也带上去：</span></span><br><span class=\"line\">\tres.render(<span class=\"string\">\"shouye\"</span> , &#123;</span><br><span class=\"line\">\t\tlogin : req.session.login ,</span><br><span class=\"line\">\t\tyonghuming : req.session.yonghuming ,</span><br><span class=\"line\">\t\tanlian : req.session.anlian</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h1 id=\"四、问答平台项目\"><a href=\"#四、问答平台项目\" class=\"headerlink\" title=\"四、问答平台项目\"></a>四、问答平台项目</h1><h2 id=\"4-1-基本文件夹的结构\"><a href=\"#4-1-基本文件夹的结构\" class=\"headerlink\" title=\"4.1 基本文件夹的结构\"></a>4.1 基本文件夹的结构</h2><p>创建项目文件夹，安装依赖：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cnpm intsall --save express mongoose formidable cookie-parser express-session ejs</span><br></pre></td></tr></table></figure>\n<p>项目的基本文件结构：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">┣ models</span><br><span class=\"line\">┣ views</span><br><span class=\"line\">┣ controllers</span><br><span class=\"line\">┣ www</span><br><span class=\"line\">┃  ┣  js</span><br><span class=\"line\">┃  ┣  css</span><br><span class=\"line\">┃  ┣  images</span><br><span class=\"line\">┣ app.js</span><br></pre></td></tr></table></figure>\n<h2 id=\"4-2-注册业务\"><a href=\"#4-2-注册业务\" class=\"headerlink\" title=\"4.2 注册业务\"></a>4.2 注册业务</h2><p><strong>开通一个业务，有三个事儿要做：</strong></p>\n<ol>\n<li>开路由，罗列一个<code>app.get(&quot;/regist&quot; , *****);</code></li>\n<li>开模板引擎，在views文件夹中创建一个同名的<code>.ejs</code>结尾的模板文件;</li>\n<li>思考模板引擎中的字典，用<code>res.render()</code>呈递</li>\n</ol>\n<p>路由：</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>URL</th>\n<th>方法</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>/regist</td>\n<td>GET</td>\n<td>显示注册页面</td>\n</tr>\n<tr>\n<td>/regist</td>\n<td>POST</td>\n<td>执行注册</td>\n</tr>\n<tr>\n<td>/regist</td>\n<td>CHECKOUT</td>\n<td>验证用户名是否被占用</td>\n</tr>\n</tbody>\n</table>\n</div>\n<p><img src=\"image8.png\" alt=\"\"></p>\n<p><strong>一定要注意一个行业操守：不能将用户的密码的明文直接保存在数据库中。</strong></p>\n<p>CSDN有一次被黑了，结果用户的密码都泄露了，考拉老师的百度贴吧、QQ、网易邮箱都用的一个密码，全完蛋。</p>\n<p><strong>我们不能防止被黑，但是我们可以不让用户的密码泄露。黑客只能得到加密之后的密码。</strong></p>\n<p>这里介绍一个加密的东西MD5或者SHA256：这些加密都是不可逆的加密，不能从密文翻译为明文。常用于校验信息的正确性。</p>\n<p>在线加密网站：<a href=\"http://tool.oschina.net/encrypt?type=2\" target=\"_blank\" rel=\"noopener\">http://tool.oschina.net/encrypt?type=2</a></p>\n<p>我们来看SHA256：</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>明文</th>\n<th>密文</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>妈妈说不管你有多长的文字要加密，一律是64位</td>\n<td>57f146775795fc42689b98cb9e756f7347efd4cfe6626b0a9aeea8c6de58eec7</td>\n</tr>\n<tr>\n<td>妈妈讲不管你有多长的文字要加密，一律是64位</td>\n<td>b56c5f6e489fbd69df47bf21ae9dcaa9771094a6e8224a379eeae6fa96490b5e</td>\n</tr>\n<tr>\n<td>我爱你</td>\n<td>c0ad5411b19cfcba9d674d21411a970159f6ae4e180831ddd6a91797be547752</td>\n</tr>\n<tr>\n<td>你爱我</td>\n<td>f3a5bb9836b59f01cf001bc70c95318fea4cf43a1b148a8b5344aea07b34a279</td>\n</tr>\n</tbody>\n</table>\n</div>\n<p><strong>注册的原理</strong>：服务器的表格中，存储用户名，和加密之后的密码。当用户登录的时候，再次将用户登录填写的密码加密，和数据库的加密的密码进行比对，如果正确了说明用户密码填写正确。</p>\n<p>NodeJS中有一个原生模块叫做crypto，可以实现SHA256、MD5加密。</p>\n"},{"title":"Node.js入门和企业级项目开发05","mathjax":false,"typora-root-url":"nodejs05","typora-copy-images-to":"nodejs05","abbrlink":2974833176,"date":"2018-11-17T15:59:25.000Z","updated":"2018-11-17T15:59:25.000Z","_content":"\n\n\n# 前言\n\n> 第5天课堂笔记\n>\n> 讲师：邵山欢\n>\n> 日期：2017年11月10日\n\n# 一、后期课程的学习方法\n\n2014年：只需要会简单的JavaScript基础，DOM操作，jQuery，HTML5、CSS3，就能找到工作。\n\n2014年的夏天行业巨变：React、Vue这些MVVM框架，让很多C/S架构的项目变为B/S项目，网页项目变得越来越大。单页面应用开始火热。**前端开发工程师现在的主要工作变为开发Dashboard系统**。\n\n![](image2.png)\n\n如果跟不上了，一定先把现在阶段的课程学完，然后再复习之前的，可以选择留级。现在的前端，值得你用大半年的时间学习。\n\n工作的时候，**90%以上的同学是搞React和Vue技术栈，写组件的**。\n\n\n\n**NodeJS对于React和Vue项目的作用：提供有数据库支持的RESTful风格的API接口**。比如我们做一个《宠物店消费管理系统》，有会员管理功能、积分卡功能，能够记录每个主人有什么宠物、消费记录，此时就需要NodeJS和mongoose提供数据库的功能和一套RESTful API的接口。\n\n\n\n现在说说React和Vue到底是干嘛的？\n\n**传统的jQuery编程最麻烦的事情就是数据和DOM的一致性问题。数据变化了，视图也要写代码让它变化**。\n\n![](image3.png)\n\n\n\n**能不能自动变化？？**\n\n能！Vue和React解决了这个问题：**Angular、Vue和React能够让数据变化的时候，DOM自动变化**。\n\n\n\n# 二、用户信息更改页面的制作\n\n## 2.1 用户信息的拉取接口\n\n用户的基本信息：\n\n-   email（一旦注册，不能更改）\n\n-   昵称（全站不能相同）\n\n-   一句话简介（默认：这家伙很懒，什么都没有留下）\n\n-   头像\n\n-   密码（加密之后的密码）\n\n\n\n只要是用户的基本信息，就要更改User这个schema。\n\n```javascript\nvar mongoose = require(\"mongoose\");\n\nvar schema = new mongoose.Schema({\n\t\"email\" : String ,\t\t//email\n\t\"password\" : String ,\t//密码，加密之后的密码\n\t\"nickname\" : String ,\t//昵称\n\t\"introduction\" : {\n\t\t\"type\" : String,\n\t\t\"default\" : \"这家伙很懒，什么都没有留下\"\n\t},\t//简介\n\t\"avatar\" : String //数据库中不保存图片，只保存图片的文件名。\n});\n\nmodule.exports = mongoose.model(\"User\" , schema);\n```\n\n\n\n个人资料页的修改，是建立在用户已经登录的情况下！\n\n**所有的页面信息：涉及安全的内容，用模板引擎；如果普通信息，要用Ajax。**\n\n**只要涉及Ajax，你的服务器必须要开一个GET请求的接口，这个接口可以读取用户的所有信息。接口：**\n\n![](image4.png)\n\n\n\n## 2.2 头像上传\n\n头像的上传很简单，因为formidable天生支持文件的上传，用files来接收就行了。\n\n\n\n图片的上传有两种形式：\n\n-   同步上传 : 必须有form表单，用submit按钮来提交\n\n-   异步上传 ： 用ajax来提交表单（实际上不是ajax，是猫腻，下午说）\n\n\n\n这里使用同步上传，一个能够上传图片的表单，必须有enctype属性：\n\n```html\n<form action=\"/uploadavatar\" method=\"post\" enctype=\"multipart/form-data\">\n\t<input type=\"file\"  name=\"avatar\"/>\n\t<input type=\"submit\" />\n</form>\n```\n\n\n\n后端的中间件基本不用写什么东西，只需要写uploadDir即可。\n\n```javascript\n//处理上传\nexports.uploadavatar = function(req,res){\n\t//得到前端提交的表单信息\n\tvar form = new formidable.IncomingForm();\n\t//设置上传文件夹\n\tform.uploadDir  = path.resolve(__dirname , \"../uploads\");\n\t//保留拓展名\n\tform.keepExtensions = true;\n\n\tform.parse(req , function(err , fields , files){\n\t\tres.send(\"123\");\n\t});\n}\n```\n\n**我们的`<form>`标签有一个特点，当你点击submit按钮的时候，会自动跳转到提交到的那个页面去！**\n\n**此时如何阻止跳转呢？可以内嵌一个iframe小窗口，小这个\"小电视\"中，呈递流程页面**。\n\n![](image5.png)\n\n所以我们单独做一个/form的路由，这个页面专门做一个表单：\n\n![](image6.png)\n\n把这个/form放到iframe中。这样的话，当form被submit的时候，大的URL不会跳转。跳转发生杂小电视里面。\n\n\n\nbootstrap中很方便做一个弹出层。要有一个按钮：\n\n```html\n<button data-target=\"#avatarModal\" data-toggle=\"modal\">更改头像</button>\n```\n\n\n\n一个模态框的div\n\n```html\n<div class=\"modal fade\" id=\"avatarModal\" tabindex=\"-1\" role=\"dialog\" aria-labelledby=\"exampleModalLabel\" aria-hidden=\"true\">\n\t\t<div class=\"modal-dialog\" role=\"document\">\n\t\t\t<div class=\"modal-content\">\n\t\t\t\t<div class=\"modal-header\">\n\t\t\t\t\t<h5 class=\"modal-title\" id=\"exampleModalLabel\">Modal title</h5>\n\t\t\t\t\t<button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-label=\"Close\">\n\t\t\t\t\t\t<span aria-hidden=\"true\">&times;</span>\n\t\t\t\t\t</button>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"modal-body\">...</div>\n\t\t\t\t<div class=\"modal-footer\">\n\t\t\t\t\t<button type=\"button\" class=\"btn btn-secondary\" data-dismiss=\"modal\">Close</button>\n\t\t\t\t\t<button type=\"button\" class=\"btn btn-primary\">Save changes</button>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n```\n\n\n\n## 2.3 头像的剪裁界面的开发\n\n**如何知道用户上传的是什么图片呢？**是在formidable的files变量中。\n\n配合url模块的parse()方法和正则表达式中的match方法，可以轻松提炼上传文件的文件名。\n\n```javascript\nform.parse(req , function(err , fields , files){\n\t//提炼出刚刚上传的图片的文件名\n\tvar pathname = url.parse(files.avatar.path).pathname.match(/\\/(upload_.+)$/)[1];\n\tconsole.log(pathname);\n});\n```\n\n\n\n开路由！将uploads文件夹也静态化出来。所以我们改变app.js文件，增加：\n\n```javascript\n//静态化uploads文件夹\napp.use(\"/uploads\" , express.static(\"uploads\"));\n```\n\n![](image7.png)\n\n\n\n**在裁切页面时，怎么显示刚刚上传的图片呢？**\n\n当用户上传完毕图片之后，将文件名存储到session中，然后呈递cut.ejs模板，通过字典将图片的网址传入。\n\n\n\n处理上传的时候存入session：\n\n```javascript\n//处理上传\nexports.uploadavatar = function(req,res){\n\t//得到前端提交的表单信息\n\tvar form = new formidable.IncomingForm();\n\t//设置上传文件夹\n\tform.uploadDir  = path.resolve(__dirname , \"../uploads\");\n\t//保留拓展名\n\tform.keepExtensions = true;\n\n\tform.parse(req , function(err , fields , files){\n\t\t//提炼出刚刚上传的图片的文件名\n\t\tvar pathname = url.parse(files.avatar.path).pathname.match(/\\/(upload_.+)$/)[1];\n\t\t//将这个文件夹名存入session！\n\t\treq.session.avatarurl = pathname;\n\t\t//跳转页面\n\t\tres.redirect(\"/cut\");\n\t});\n}\n```\n\n\n\n在裁切页面使用这个session:\n\n```javascript\n//呈递裁切页面\nexports.showcut = function(req,res){\n\tres.render(\"cut\" , {\n\t\t\"avatarurl\" : req.session.avatarurl \n\t});\n}\n```\n\n![](image8.png)\n\njQuery-ui有什么功能：\n\n-   Draggable ：拖拽\n\n-   Droppable : 拖放\n\n-   Resizable : 可更改尺寸\n\n-   Selectabel : 可被选择\n\n-   Sortable : 可更改顺序\n\n我们的cut小框框可以被更改尺寸。此时使用jquery-ui提供的：\n\n```javascript\n$(\"#cut_rect\").resizable();\n```\n\n但是一定要注意，必须引用jquery-ui的样式表。\n\n```html\n<link rel=\"stylesheet\" href=\"//code.jquery.com/ui/1.12.1/themes/base/jquery-ui.css\">\n```\n\ncss文件夹中必须有图片\n\n![](image9.png)\n\njQuery中有一个trigger()的方法，可以模拟别的元素的事件。\n\n\n\n## 2.4 使用gm裁剪图片\n\ngm就是GraphicsMagick的缩写。\n\nhttp://www.graphicsmagick.org/\n\n> 开源的库真的很值得尊敬，比如割绳子、愤怒的小鸟都是依靠box2d这个库。\n>\n> 可以看这个演示：http://yuehaowang.github.io/demo/box2d_linkage/ \n\n安装软件，![](image10.png)\n\n下一步、下一步无脑安装。\n\n**然后将你的安装目录C:\\\\Program Files\\\\GraphicsMagick-1.3.22-Q16设置为环境变量！**\n\n设置环境变量成功之后，打开CMD就能使用gm命令了\n\n```\ngm -version\n```\n\n![](image11.png)\n\n命令行里面就能裁剪图片：\n\n```\ngm convert -crop 100x100+50+60 1.jpg 3.jpg\n```\n\n\n\nnode.js如何操作它？此时就要安装npm包gm。\n\n安装依赖：\n\n```\ncnpm install --save gm\n```\n\n程序中引包：\n\n```javascript\nvar gm = require('gm');\n```\n\n使用：\n\n```javascript\ngm(avatarurl).crop(w,h,x,y).write(avatarurl, function (err) {\n\tconsole.log(\"裁剪成功！\");\n});\n```\n\n\n\n**iframe内嵌的页面可以用js调用外部的DOM；但是反之不行。**\n\n调用方法：\n\n```javascript\n$(\"#avatarModal\" , window.parent.document)\n```\n\n\n\n\n","source":"_posts/Dev/nodejs/nodejs05.md","raw":"---\ntitle: Node.js入门和企业级项目开发05\nmathjax: false\ntypora-root-url: nodejs05\ntypora-copy-images-to: nodejs05\ncategories:\n  - nodejs\nabbrlink: 2974833176\ndate: 2018-11-17 23:59:25\nupdated: 2018-11-17 23:59:25\ntags:\n---\n\n\n\n# 前言\n\n> 第5天课堂笔记\n>\n> 讲师：邵山欢\n>\n> 日期：2017年11月10日\n\n# 一、后期课程的学习方法\n\n2014年：只需要会简单的JavaScript基础，DOM操作，jQuery，HTML5、CSS3，就能找到工作。\n\n2014年的夏天行业巨变：React、Vue这些MVVM框架，让很多C/S架构的项目变为B/S项目，网页项目变得越来越大。单页面应用开始火热。**前端开发工程师现在的主要工作变为开发Dashboard系统**。\n\n![](image2.png)\n\n如果跟不上了，一定先把现在阶段的课程学完，然后再复习之前的，可以选择留级。现在的前端，值得你用大半年的时间学习。\n\n工作的时候，**90%以上的同学是搞React和Vue技术栈，写组件的**。\n\n\n\n**NodeJS对于React和Vue项目的作用：提供有数据库支持的RESTful风格的API接口**。比如我们做一个《宠物店消费管理系统》，有会员管理功能、积分卡功能，能够记录每个主人有什么宠物、消费记录，此时就需要NodeJS和mongoose提供数据库的功能和一套RESTful API的接口。\n\n\n\n现在说说React和Vue到底是干嘛的？\n\n**传统的jQuery编程最麻烦的事情就是数据和DOM的一致性问题。数据变化了，视图也要写代码让它变化**。\n\n![](image3.png)\n\n\n\n**能不能自动变化？？**\n\n能！Vue和React解决了这个问题：**Angular、Vue和React能够让数据变化的时候，DOM自动变化**。\n\n\n\n# 二、用户信息更改页面的制作\n\n## 2.1 用户信息的拉取接口\n\n用户的基本信息：\n\n-   email（一旦注册，不能更改）\n\n-   昵称（全站不能相同）\n\n-   一句话简介（默认：这家伙很懒，什么都没有留下）\n\n-   头像\n\n-   密码（加密之后的密码）\n\n\n\n只要是用户的基本信息，就要更改User这个schema。\n\n```javascript\nvar mongoose = require(\"mongoose\");\n\nvar schema = new mongoose.Schema({\n\t\"email\" : String ,\t\t//email\n\t\"password\" : String ,\t//密码，加密之后的密码\n\t\"nickname\" : String ,\t//昵称\n\t\"introduction\" : {\n\t\t\"type\" : String,\n\t\t\"default\" : \"这家伙很懒，什么都没有留下\"\n\t},\t//简介\n\t\"avatar\" : String //数据库中不保存图片，只保存图片的文件名。\n});\n\nmodule.exports = mongoose.model(\"User\" , schema);\n```\n\n\n\n个人资料页的修改，是建立在用户已经登录的情况下！\n\n**所有的页面信息：涉及安全的内容，用模板引擎；如果普通信息，要用Ajax。**\n\n**只要涉及Ajax，你的服务器必须要开一个GET请求的接口，这个接口可以读取用户的所有信息。接口：**\n\n![](image4.png)\n\n\n\n## 2.2 头像上传\n\n头像的上传很简单，因为formidable天生支持文件的上传，用files来接收就行了。\n\n\n\n图片的上传有两种形式：\n\n-   同步上传 : 必须有form表单，用submit按钮来提交\n\n-   异步上传 ： 用ajax来提交表单（实际上不是ajax，是猫腻，下午说）\n\n\n\n这里使用同步上传，一个能够上传图片的表单，必须有enctype属性：\n\n```html\n<form action=\"/uploadavatar\" method=\"post\" enctype=\"multipart/form-data\">\n\t<input type=\"file\"  name=\"avatar\"/>\n\t<input type=\"submit\" />\n</form>\n```\n\n\n\n后端的中间件基本不用写什么东西，只需要写uploadDir即可。\n\n```javascript\n//处理上传\nexports.uploadavatar = function(req,res){\n\t//得到前端提交的表单信息\n\tvar form = new formidable.IncomingForm();\n\t//设置上传文件夹\n\tform.uploadDir  = path.resolve(__dirname , \"../uploads\");\n\t//保留拓展名\n\tform.keepExtensions = true;\n\n\tform.parse(req , function(err , fields , files){\n\t\tres.send(\"123\");\n\t});\n}\n```\n\n**我们的`<form>`标签有一个特点，当你点击submit按钮的时候，会自动跳转到提交到的那个页面去！**\n\n**此时如何阻止跳转呢？可以内嵌一个iframe小窗口，小这个\"小电视\"中，呈递流程页面**。\n\n![](image5.png)\n\n所以我们单独做一个/form的路由，这个页面专门做一个表单：\n\n![](image6.png)\n\n把这个/form放到iframe中。这样的话，当form被submit的时候，大的URL不会跳转。跳转发生杂小电视里面。\n\n\n\nbootstrap中很方便做一个弹出层。要有一个按钮：\n\n```html\n<button data-target=\"#avatarModal\" data-toggle=\"modal\">更改头像</button>\n```\n\n\n\n一个模态框的div\n\n```html\n<div class=\"modal fade\" id=\"avatarModal\" tabindex=\"-1\" role=\"dialog\" aria-labelledby=\"exampleModalLabel\" aria-hidden=\"true\">\n\t\t<div class=\"modal-dialog\" role=\"document\">\n\t\t\t<div class=\"modal-content\">\n\t\t\t\t<div class=\"modal-header\">\n\t\t\t\t\t<h5 class=\"modal-title\" id=\"exampleModalLabel\">Modal title</h5>\n\t\t\t\t\t<button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-label=\"Close\">\n\t\t\t\t\t\t<span aria-hidden=\"true\">&times;</span>\n\t\t\t\t\t</button>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"modal-body\">...</div>\n\t\t\t\t<div class=\"modal-footer\">\n\t\t\t\t\t<button type=\"button\" class=\"btn btn-secondary\" data-dismiss=\"modal\">Close</button>\n\t\t\t\t\t<button type=\"button\" class=\"btn btn-primary\">Save changes</button>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n```\n\n\n\n## 2.3 头像的剪裁界面的开发\n\n**如何知道用户上传的是什么图片呢？**是在formidable的files变量中。\n\n配合url模块的parse()方法和正则表达式中的match方法，可以轻松提炼上传文件的文件名。\n\n```javascript\nform.parse(req , function(err , fields , files){\n\t//提炼出刚刚上传的图片的文件名\n\tvar pathname = url.parse(files.avatar.path).pathname.match(/\\/(upload_.+)$/)[1];\n\tconsole.log(pathname);\n});\n```\n\n\n\n开路由！将uploads文件夹也静态化出来。所以我们改变app.js文件，增加：\n\n```javascript\n//静态化uploads文件夹\napp.use(\"/uploads\" , express.static(\"uploads\"));\n```\n\n![](image7.png)\n\n\n\n**在裁切页面时，怎么显示刚刚上传的图片呢？**\n\n当用户上传完毕图片之后，将文件名存储到session中，然后呈递cut.ejs模板，通过字典将图片的网址传入。\n\n\n\n处理上传的时候存入session：\n\n```javascript\n//处理上传\nexports.uploadavatar = function(req,res){\n\t//得到前端提交的表单信息\n\tvar form = new formidable.IncomingForm();\n\t//设置上传文件夹\n\tform.uploadDir  = path.resolve(__dirname , \"../uploads\");\n\t//保留拓展名\n\tform.keepExtensions = true;\n\n\tform.parse(req , function(err , fields , files){\n\t\t//提炼出刚刚上传的图片的文件名\n\t\tvar pathname = url.parse(files.avatar.path).pathname.match(/\\/(upload_.+)$/)[1];\n\t\t//将这个文件夹名存入session！\n\t\treq.session.avatarurl = pathname;\n\t\t//跳转页面\n\t\tres.redirect(\"/cut\");\n\t});\n}\n```\n\n\n\n在裁切页面使用这个session:\n\n```javascript\n//呈递裁切页面\nexports.showcut = function(req,res){\n\tres.render(\"cut\" , {\n\t\t\"avatarurl\" : req.session.avatarurl \n\t});\n}\n```\n\n![](image8.png)\n\njQuery-ui有什么功能：\n\n-   Draggable ：拖拽\n\n-   Droppable : 拖放\n\n-   Resizable : 可更改尺寸\n\n-   Selectabel : 可被选择\n\n-   Sortable : 可更改顺序\n\n我们的cut小框框可以被更改尺寸。此时使用jquery-ui提供的：\n\n```javascript\n$(\"#cut_rect\").resizable();\n```\n\n但是一定要注意，必须引用jquery-ui的样式表。\n\n```html\n<link rel=\"stylesheet\" href=\"//code.jquery.com/ui/1.12.1/themes/base/jquery-ui.css\">\n```\n\ncss文件夹中必须有图片\n\n![](image9.png)\n\njQuery中有一个trigger()的方法，可以模拟别的元素的事件。\n\n\n\n## 2.4 使用gm裁剪图片\n\ngm就是GraphicsMagick的缩写。\n\nhttp://www.graphicsmagick.org/\n\n> 开源的库真的很值得尊敬，比如割绳子、愤怒的小鸟都是依靠box2d这个库。\n>\n> 可以看这个演示：http://yuehaowang.github.io/demo/box2d_linkage/ \n\n安装软件，![](image10.png)\n\n下一步、下一步无脑安装。\n\n**然后将你的安装目录C:\\\\Program Files\\\\GraphicsMagick-1.3.22-Q16设置为环境变量！**\n\n设置环境变量成功之后，打开CMD就能使用gm命令了\n\n```\ngm -version\n```\n\n![](image11.png)\n\n命令行里面就能裁剪图片：\n\n```\ngm convert -crop 100x100+50+60 1.jpg 3.jpg\n```\n\n\n\nnode.js如何操作它？此时就要安装npm包gm。\n\n安装依赖：\n\n```\ncnpm install --save gm\n```\n\n程序中引包：\n\n```javascript\nvar gm = require('gm');\n```\n\n使用：\n\n```javascript\ngm(avatarurl).crop(w,h,x,y).write(avatarurl, function (err) {\n\tconsole.log(\"裁剪成功！\");\n});\n```\n\n\n\n**iframe内嵌的页面可以用js调用外部的DOM；但是反之不行。**\n\n调用方法：\n\n```javascript\n$(\"#avatarModal\" , window.parent.document)\n```\n\n\n\n\n","slug":"Dev/nodejs/nodejs05","published":1,"_id":"cjoncnbrc000o2gfi9kivkl57","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><blockquote>\n<p>第5天课堂笔记</p>\n<p>讲师：邵山欢</p>\n<p>日期：2017年11月10日</p>\n</blockquote>\n<h1 id=\"一、后期课程的学习方法\"><a href=\"#一、后期课程的学习方法\" class=\"headerlink\" title=\"一、后期课程的学习方法\"></a>一、后期课程的学习方法</h1><p>2014年：只需要会简单的JavaScript基础，DOM操作，jQuery，HTML5、CSS3，就能找到工作。</p>\n<p>2014年的夏天行业巨变：React、Vue这些MVVM框架，让很多C/S架构的项目变为B/S项目，网页项目变得越来越大。单页面应用开始火热。<strong>前端开发工程师现在的主要工作变为开发Dashboard系统</strong>。</p>\n<p><img src=\"image2.png\" alt=\"\"></p>\n<p>如果跟不上了，一定先把现在阶段的课程学完，然后再复习之前的，可以选择留级。现在的前端，值得你用大半年的时间学习。</p>\n<p>工作的时候，<strong>90%以上的同学是搞React和Vue技术栈，写组件的</strong>。</p>\n<p><strong>NodeJS对于React和Vue项目的作用：提供有数据库支持的RESTful风格的API接口</strong>。比如我们做一个《宠物店消费管理系统》，有会员管理功能、积分卡功能，能够记录每个主人有什么宠物、消费记录，此时就需要NodeJS和mongoose提供数据库的功能和一套RESTful API的接口。</p>\n<p>现在说说React和Vue到底是干嘛的？</p>\n<p><strong>传统的jQuery编程最麻烦的事情就是数据和DOM的一致性问题。数据变化了，视图也要写代码让它变化</strong>。</p>\n<p><img src=\"image3.png\" alt=\"\"></p>\n<p><strong>能不能自动变化？？</strong></p>\n<p>能！Vue和React解决了这个问题：<strong>Angular、Vue和React能够让数据变化的时候，DOM自动变化</strong>。</p>\n<h1 id=\"二、用户信息更改页面的制作\"><a href=\"#二、用户信息更改页面的制作\" class=\"headerlink\" title=\"二、用户信息更改页面的制作\"></a>二、用户信息更改页面的制作</h1><h2 id=\"2-1-用户信息的拉取接口\"><a href=\"#2-1-用户信息的拉取接口\" class=\"headerlink\" title=\"2.1 用户信息的拉取接口\"></a>2.1 用户信息的拉取接口</h2><p>用户的基本信息：</p>\n<ul>\n<li><p>email（一旦注册，不能更改）</p>\n</li>\n<li><p>昵称（全站不能相同）</p>\n</li>\n<li><p>一句话简介（默认：这家伙很懒，什么都没有留下）</p>\n</li>\n<li><p>头像</p>\n</li>\n<li><p>密码（加密之后的密码）</p>\n</li>\n</ul>\n<p>只要是用户的基本信息，就要更改User这个schema。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> mongoose = <span class=\"built_in\">require</span>(<span class=\"string\">\"mongoose\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> schema = <span class=\"keyword\">new</span> mongoose.Schema(&#123;</span><br><span class=\"line\">\t<span class=\"string\">\"email\"</span> : <span class=\"built_in\">String</span> ,\t\t<span class=\"comment\">//email</span></span><br><span class=\"line\">\t<span class=\"string\">\"password\"</span> : <span class=\"built_in\">String</span> ,\t<span class=\"comment\">//密码，加密之后的密码</span></span><br><span class=\"line\">\t<span class=\"string\">\"nickname\"</span> : <span class=\"built_in\">String</span> ,\t<span class=\"comment\">//昵称</span></span><br><span class=\"line\">\t<span class=\"string\">\"introduction\"</span> : &#123;</span><br><span class=\"line\">\t\t<span class=\"string\">\"type\"</span> : <span class=\"built_in\">String</span>,</span><br><span class=\"line\">\t\t<span class=\"string\">\"default\"</span> : <span class=\"string\">\"这家伙很懒，什么都没有留下\"</span></span><br><span class=\"line\">\t&#125;,\t<span class=\"comment\">//简介</span></span><br><span class=\"line\">\t<span class=\"string\">\"avatar\"</span> : <span class=\"built_in\">String</span> <span class=\"comment\">//数据库中不保存图片，只保存图片的文件名。</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = mongoose.model(<span class=\"string\">\"User\"</span> , schema);</span><br></pre></td></tr></table></figure>\n<p>个人资料页的修改，是建立在用户已经登录的情况下！</p>\n<p><strong>所有的页面信息：涉及安全的内容，用模板引擎；如果普通信息，要用Ajax。</strong></p>\n<p><strong>只要涉及Ajax，你的服务器必须要开一个GET请求的接口，这个接口可以读取用户的所有信息。接口：</strong></p>\n<p><img src=\"image4.png\" alt=\"\"></p>\n<h2 id=\"2-2-头像上传\"><a href=\"#2-2-头像上传\" class=\"headerlink\" title=\"2.2 头像上传\"></a>2.2 头像上传</h2><p>头像的上传很简单，因为formidable天生支持文件的上传，用files来接收就行了。</p>\n<p>图片的上传有两种形式：</p>\n<ul>\n<li><p>同步上传 : 必须有form表单，用submit按钮来提交</p>\n</li>\n<li><p>异步上传 ： 用ajax来提交表单（实际上不是ajax，是猫腻，下午说）</p>\n</li>\n</ul>\n<p>这里使用同步上传，一个能够上传图片的表单，必须有enctype属性：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">action</span>=<span class=\"string\">\"/uploadavatar\"</span> <span class=\"attr\">method</span>=<span class=\"string\">\"post\"</span> <span class=\"attr\">enctype</span>=<span class=\"string\">\"multipart/form-data\"</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"file\"</span>  <span class=\"attr\">name</span>=<span class=\"string\">\"avatar\"</span>/&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"submit\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>后端的中间件基本不用写什么东西，只需要写uploadDir即可。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//处理上传</span></span><br><span class=\"line\">exports.uploadavatar = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req,res</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//得到前端提交的表单信息</span></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> form = <span class=\"keyword\">new</span> formidable.IncomingForm();</span><br><span class=\"line\">\t<span class=\"comment\">//设置上传文件夹</span></span><br><span class=\"line\">\tform.uploadDir  = path.resolve(__dirname , <span class=\"string\">\"../uploads\"</span>);</span><br><span class=\"line\">\t<span class=\"comment\">//保留拓展名</span></span><br><span class=\"line\">\tform.keepExtensions = <span class=\"literal\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\tform.parse(req , <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err , fields , files</span>)</span>&#123;</span><br><span class=\"line\">\t\tres.send(<span class=\"string\">\"123\"</span>);</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>我们的<code>&lt;form&gt;</code>标签有一个特点，当你点击submit按钮的时候，会自动跳转到提交到的那个页面去！</strong></p>\n<p><strong>此时如何阻止跳转呢？可以内嵌一个iframe小窗口，小这个”小电视”中，呈递流程页面</strong>。</p>\n<p><img src=\"image5.png\" alt=\"\"></p>\n<p>所以我们单独做一个/form的路由，这个页面专门做一个表单：</p>\n<p><img src=\"image6.png\" alt=\"\"></p>\n<p>把这个/form放到iframe中。这样的话，当form被submit的时候，大的URL不会跳转。跳转发生杂小电视里面。</p>\n<p>bootstrap中很方便做一个弹出层。要有一个按钮：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">data-target</span>=<span class=\"string\">\"#avatarModal\"</span> <span class=\"attr\">data-toggle</span>=<span class=\"string\">\"modal\"</span>&gt;</span>更改头像<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>一个模态框的div</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"modal fade\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"avatarModal\"</span> <span class=\"attr\">tabindex</span>=<span class=\"string\">\"-1\"</span> <span class=\"attr\">role</span>=<span class=\"string\">\"dialog\"</span> <span class=\"attr\">aria-labelledby</span>=<span class=\"string\">\"exampleModalLabel\"</span> <span class=\"attr\">aria-hidden</span>=<span class=\"string\">\"true\"</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"modal-dialog\"</span> <span class=\"attr\">role</span>=<span class=\"string\">\"document\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"modal-content\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"modal-header\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">h5</span> <span class=\"attr\">class</span>=<span class=\"string\">\"modal-title\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"exampleModalLabel\"</span>&gt;</span>Modal title<span class=\"tag\">&lt;/<span class=\"name\">h5</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">type</span>=<span class=\"string\">\"button\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"close\"</span> <span class=\"attr\">data-dismiss</span>=<span class=\"string\">\"modal\"</span> <span class=\"attr\">aria-label</span>=<span class=\"string\">\"Close\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">aria-hidden</span>=<span class=\"string\">\"true\"</span>&gt;</span>&amp;times;<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"modal-body\"</span>&gt;</span>...<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"modal-footer\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">type</span>=<span class=\"string\">\"button\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"btn btn-secondary\"</span> <span class=\"attr\">data-dismiss</span>=<span class=\"string\">\"modal\"</span>&gt;</span>Close<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">type</span>=<span class=\"string\">\"button\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"btn btn-primary\"</span>&gt;</span>Save changes<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"2-3-头像的剪裁界面的开发\"><a href=\"#2-3-头像的剪裁界面的开发\" class=\"headerlink\" title=\"2.3 头像的剪裁界面的开发\"></a>2.3 头像的剪裁界面的开发</h2><p><strong>如何知道用户上传的是什么图片呢？</strong>是在formidable的files变量中。</p>\n<p>配合url模块的parse()方法和正则表达式中的match方法，可以轻松提炼上传文件的文件名。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">form.parse(req , <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err , fields , files</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//提炼出刚刚上传的图片的文件名</span></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> pathname = url.parse(files.avatar.path).pathname.match(<span class=\"regexp\">/\\/(upload_.+)$/</span>)[<span class=\"number\">1</span>];</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(pathname);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>开路由！将uploads文件夹也静态化出来。所以我们改变app.js文件，增加：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//静态化uploads文件夹</span></span><br><span class=\"line\">app.use(<span class=\"string\">\"/uploads\"</span> , express.static(<span class=\"string\">\"uploads\"</span>));</span><br></pre></td></tr></table></figure>\n<p><img src=\"image7.png\" alt=\"\"></p>\n<p><strong>在裁切页面时，怎么显示刚刚上传的图片呢？</strong></p>\n<p>当用户上传完毕图片之后，将文件名存储到session中，然后呈递cut.ejs模板，通过字典将图片的网址传入。</p>\n<p>处理上传的时候存入session：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//处理上传</span></span><br><span class=\"line\">exports.uploadavatar = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req,res</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//得到前端提交的表单信息</span></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> form = <span class=\"keyword\">new</span> formidable.IncomingForm();</span><br><span class=\"line\">\t<span class=\"comment\">//设置上传文件夹</span></span><br><span class=\"line\">\tform.uploadDir  = path.resolve(__dirname , <span class=\"string\">\"../uploads\"</span>);</span><br><span class=\"line\">\t<span class=\"comment\">//保留拓展名</span></span><br><span class=\"line\">\tform.keepExtensions = <span class=\"literal\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\tform.parse(req , <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err , fields , files</span>)</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//提炼出刚刚上传的图片的文件名</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> pathname = url.parse(files.avatar.path).pathname.match(<span class=\"regexp\">/\\/(upload_.+)$/</span>)[<span class=\"number\">1</span>];</span><br><span class=\"line\">\t\t<span class=\"comment\">//将这个文件夹名存入session！</span></span><br><span class=\"line\">\t\treq.session.avatarurl = pathname;</span><br><span class=\"line\">\t\t<span class=\"comment\">//跳转页面</span></span><br><span class=\"line\">\t\tres.redirect(<span class=\"string\">\"/cut\"</span>);</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在裁切页面使用这个session:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//呈递裁切页面</span></span><br><span class=\"line\">exports.showcut = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req,res</span>)</span>&#123;</span><br><span class=\"line\">\tres.render(<span class=\"string\">\"cut\"</span> , &#123;</span><br><span class=\"line\">\t\t<span class=\"string\">\"avatarurl\"</span> : req.session.avatarurl </span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"image8.png\" alt=\"\"></p>\n<p>jQuery-ui有什么功能：</p>\n<ul>\n<li><p>Draggable ：拖拽</p>\n</li>\n<li><p>Droppable : 拖放</p>\n</li>\n<li><p>Resizable : 可更改尺寸</p>\n</li>\n<li><p>Selectabel : 可被选择</p>\n</li>\n<li><p>Sortable : 可更改顺序</p>\n</li>\n</ul>\n<p>我们的cut小框框可以被更改尺寸。此时使用jquery-ui提供的：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"string\">\"#cut_rect\"</span>).resizable();</span><br></pre></td></tr></table></figure>\n<p>但是一定要注意，必须引用jquery-ui的样式表。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"//code.jquery.com/ui/1.12.1/themes/base/jquery-ui.css\"</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>css文件夹中必须有图片</p>\n<p><img src=\"image9.png\" alt=\"\"></p>\n<p>jQuery中有一个trigger()的方法，可以模拟别的元素的事件。</p>\n<h2 id=\"2-4-使用gm裁剪图片\"><a href=\"#2-4-使用gm裁剪图片\" class=\"headerlink\" title=\"2.4 使用gm裁剪图片\"></a>2.4 使用gm裁剪图片</h2><p>gm就是GraphicsMagick的缩写。</p>\n<p><a href=\"http://www.graphicsmagick.org/\" target=\"_blank\" rel=\"noopener\">http://www.graphicsmagick.org/</a></p>\n<blockquote>\n<p>开源的库真的很值得尊敬，比如割绳子、愤怒的小鸟都是依靠box2d这个库。</p>\n<p>可以看这个演示：<a href=\"http://yuehaowang.github.io/demo/box2d_linkage/\" target=\"_blank\" rel=\"noopener\">http://yuehaowang.github.io/demo/box2d_linkage/</a> </p>\n</blockquote>\n<p>安装软件，<img src=\"image10.png\" alt=\"\"></p>\n<p>下一步、下一步无脑安装。</p>\n<p><strong>然后将你的安装目录C:\\Program Files\\GraphicsMagick-1.3.22-Q16设置为环境变量！</strong></p>\n<p>设置环境变量成功之后，打开CMD就能使用gm命令了</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gm -version</span><br></pre></td></tr></table></figure>\n<p><img src=\"image11.png\" alt=\"\"></p>\n<p>命令行里面就能裁剪图片：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gm convert -crop 100x100+50+60 1.jpg 3.jpg</span><br></pre></td></tr></table></figure>\n<p>node.js如何操作它？此时就要安装npm包gm。</p>\n<p>安装依赖：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cnpm install --save gm</span><br></pre></td></tr></table></figure>\n<p>程序中引包：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> gm = <span class=\"built_in\">require</span>(<span class=\"string\">'gm'</span>);</span><br></pre></td></tr></table></figure>\n<p>使用：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gm(avatarurl).crop(w,h,x,y).write(avatarurl, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"string\">\"裁剪成功！\"</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p><strong>iframe内嵌的页面可以用js调用外部的DOM；但是反之不行。</strong></p>\n<p>调用方法：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"string\">\"#avatarModal\"</span> , <span class=\"built_in\">window</span>.parent.document)</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><blockquote>\n<p>第5天课堂笔记</p>\n<p>讲师：邵山欢</p>\n<p>日期：2017年11月10日</p>\n</blockquote>\n<h1 id=\"一、后期课程的学习方法\"><a href=\"#一、后期课程的学习方法\" class=\"headerlink\" title=\"一、后期课程的学习方法\"></a>一、后期课程的学习方法</h1><p>2014年：只需要会简单的JavaScript基础，DOM操作，jQuery，HTML5、CSS3，就能找到工作。</p>\n<p>2014年的夏天行业巨变：React、Vue这些MVVM框架，让很多C/S架构的项目变为B/S项目，网页项目变得越来越大。单页面应用开始火热。<strong>前端开发工程师现在的主要工作变为开发Dashboard系统</strong>。</p>\n<p><img src=\"image2.png\" alt=\"\"></p>\n<p>如果跟不上了，一定先把现在阶段的课程学完，然后再复习之前的，可以选择留级。现在的前端，值得你用大半年的时间学习。</p>\n<p>工作的时候，<strong>90%以上的同学是搞React和Vue技术栈，写组件的</strong>。</p>\n<p><strong>NodeJS对于React和Vue项目的作用：提供有数据库支持的RESTful风格的API接口</strong>。比如我们做一个《宠物店消费管理系统》，有会员管理功能、积分卡功能，能够记录每个主人有什么宠物、消费记录，此时就需要NodeJS和mongoose提供数据库的功能和一套RESTful API的接口。</p>\n<p>现在说说React和Vue到底是干嘛的？</p>\n<p><strong>传统的jQuery编程最麻烦的事情就是数据和DOM的一致性问题。数据变化了，视图也要写代码让它变化</strong>。</p>\n<p><img src=\"image3.png\" alt=\"\"></p>\n<p><strong>能不能自动变化？？</strong></p>\n<p>能！Vue和React解决了这个问题：<strong>Angular、Vue和React能够让数据变化的时候，DOM自动变化</strong>。</p>\n<h1 id=\"二、用户信息更改页面的制作\"><a href=\"#二、用户信息更改页面的制作\" class=\"headerlink\" title=\"二、用户信息更改页面的制作\"></a>二、用户信息更改页面的制作</h1><h2 id=\"2-1-用户信息的拉取接口\"><a href=\"#2-1-用户信息的拉取接口\" class=\"headerlink\" title=\"2.1 用户信息的拉取接口\"></a>2.1 用户信息的拉取接口</h2><p>用户的基本信息：</p>\n<ul>\n<li><p>email（一旦注册，不能更改）</p>\n</li>\n<li><p>昵称（全站不能相同）</p>\n</li>\n<li><p>一句话简介（默认：这家伙很懒，什么都没有留下）</p>\n</li>\n<li><p>头像</p>\n</li>\n<li><p>密码（加密之后的密码）</p>\n</li>\n</ul>\n<p>只要是用户的基本信息，就要更改User这个schema。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> mongoose = <span class=\"built_in\">require</span>(<span class=\"string\">\"mongoose\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> schema = <span class=\"keyword\">new</span> mongoose.Schema(&#123;</span><br><span class=\"line\">\t<span class=\"string\">\"email\"</span> : <span class=\"built_in\">String</span> ,\t\t<span class=\"comment\">//email</span></span><br><span class=\"line\">\t<span class=\"string\">\"password\"</span> : <span class=\"built_in\">String</span> ,\t<span class=\"comment\">//密码，加密之后的密码</span></span><br><span class=\"line\">\t<span class=\"string\">\"nickname\"</span> : <span class=\"built_in\">String</span> ,\t<span class=\"comment\">//昵称</span></span><br><span class=\"line\">\t<span class=\"string\">\"introduction\"</span> : &#123;</span><br><span class=\"line\">\t\t<span class=\"string\">\"type\"</span> : <span class=\"built_in\">String</span>,</span><br><span class=\"line\">\t\t<span class=\"string\">\"default\"</span> : <span class=\"string\">\"这家伙很懒，什么都没有留下\"</span></span><br><span class=\"line\">\t&#125;,\t<span class=\"comment\">//简介</span></span><br><span class=\"line\">\t<span class=\"string\">\"avatar\"</span> : <span class=\"built_in\">String</span> <span class=\"comment\">//数据库中不保存图片，只保存图片的文件名。</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = mongoose.model(<span class=\"string\">\"User\"</span> , schema);</span><br></pre></td></tr></table></figure>\n<p>个人资料页的修改，是建立在用户已经登录的情况下！</p>\n<p><strong>所有的页面信息：涉及安全的内容，用模板引擎；如果普通信息，要用Ajax。</strong></p>\n<p><strong>只要涉及Ajax，你的服务器必须要开一个GET请求的接口，这个接口可以读取用户的所有信息。接口：</strong></p>\n<p><img src=\"image4.png\" alt=\"\"></p>\n<h2 id=\"2-2-头像上传\"><a href=\"#2-2-头像上传\" class=\"headerlink\" title=\"2.2 头像上传\"></a>2.2 头像上传</h2><p>头像的上传很简单，因为formidable天生支持文件的上传，用files来接收就行了。</p>\n<p>图片的上传有两种形式：</p>\n<ul>\n<li><p>同步上传 : 必须有form表单，用submit按钮来提交</p>\n</li>\n<li><p>异步上传 ： 用ajax来提交表单（实际上不是ajax，是猫腻，下午说）</p>\n</li>\n</ul>\n<p>这里使用同步上传，一个能够上传图片的表单，必须有enctype属性：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">action</span>=<span class=\"string\">\"/uploadavatar\"</span> <span class=\"attr\">method</span>=<span class=\"string\">\"post\"</span> <span class=\"attr\">enctype</span>=<span class=\"string\">\"multipart/form-data\"</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"file\"</span>  <span class=\"attr\">name</span>=<span class=\"string\">\"avatar\"</span>/&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"submit\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>后端的中间件基本不用写什么东西，只需要写uploadDir即可。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//处理上传</span></span><br><span class=\"line\">exports.uploadavatar = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req,res</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//得到前端提交的表单信息</span></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> form = <span class=\"keyword\">new</span> formidable.IncomingForm();</span><br><span class=\"line\">\t<span class=\"comment\">//设置上传文件夹</span></span><br><span class=\"line\">\tform.uploadDir  = path.resolve(__dirname , <span class=\"string\">\"../uploads\"</span>);</span><br><span class=\"line\">\t<span class=\"comment\">//保留拓展名</span></span><br><span class=\"line\">\tform.keepExtensions = <span class=\"literal\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\tform.parse(req , <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err , fields , files</span>)</span>&#123;</span><br><span class=\"line\">\t\tres.send(<span class=\"string\">\"123\"</span>);</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>我们的<code>&lt;form&gt;</code>标签有一个特点，当你点击submit按钮的时候，会自动跳转到提交到的那个页面去！</strong></p>\n<p><strong>此时如何阻止跳转呢？可以内嵌一个iframe小窗口，小这个”小电视”中，呈递流程页面</strong>。</p>\n<p><img src=\"image5.png\" alt=\"\"></p>\n<p>所以我们单独做一个/form的路由，这个页面专门做一个表单：</p>\n<p><img src=\"image6.png\" alt=\"\"></p>\n<p>把这个/form放到iframe中。这样的话，当form被submit的时候，大的URL不会跳转。跳转发生杂小电视里面。</p>\n<p>bootstrap中很方便做一个弹出层。要有一个按钮：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">data-target</span>=<span class=\"string\">\"#avatarModal\"</span> <span class=\"attr\">data-toggle</span>=<span class=\"string\">\"modal\"</span>&gt;</span>更改头像<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>一个模态框的div</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"modal fade\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"avatarModal\"</span> <span class=\"attr\">tabindex</span>=<span class=\"string\">\"-1\"</span> <span class=\"attr\">role</span>=<span class=\"string\">\"dialog\"</span> <span class=\"attr\">aria-labelledby</span>=<span class=\"string\">\"exampleModalLabel\"</span> <span class=\"attr\">aria-hidden</span>=<span class=\"string\">\"true\"</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"modal-dialog\"</span> <span class=\"attr\">role</span>=<span class=\"string\">\"document\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"modal-content\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"modal-header\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">h5</span> <span class=\"attr\">class</span>=<span class=\"string\">\"modal-title\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"exampleModalLabel\"</span>&gt;</span>Modal title<span class=\"tag\">&lt;/<span class=\"name\">h5</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">type</span>=<span class=\"string\">\"button\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"close\"</span> <span class=\"attr\">data-dismiss</span>=<span class=\"string\">\"modal\"</span> <span class=\"attr\">aria-label</span>=<span class=\"string\">\"Close\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">aria-hidden</span>=<span class=\"string\">\"true\"</span>&gt;</span>&amp;times;<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"modal-body\"</span>&gt;</span>...<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"modal-footer\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">type</span>=<span class=\"string\">\"button\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"btn btn-secondary\"</span> <span class=\"attr\">data-dismiss</span>=<span class=\"string\">\"modal\"</span>&gt;</span>Close<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">type</span>=<span class=\"string\">\"button\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"btn btn-primary\"</span>&gt;</span>Save changes<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"2-3-头像的剪裁界面的开发\"><a href=\"#2-3-头像的剪裁界面的开发\" class=\"headerlink\" title=\"2.3 头像的剪裁界面的开发\"></a>2.3 头像的剪裁界面的开发</h2><p><strong>如何知道用户上传的是什么图片呢？</strong>是在formidable的files变量中。</p>\n<p>配合url模块的parse()方法和正则表达式中的match方法，可以轻松提炼上传文件的文件名。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">form.parse(req , <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err , fields , files</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//提炼出刚刚上传的图片的文件名</span></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> pathname = url.parse(files.avatar.path).pathname.match(<span class=\"regexp\">/\\/(upload_.+)$/</span>)[<span class=\"number\">1</span>];</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(pathname);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>开路由！将uploads文件夹也静态化出来。所以我们改变app.js文件，增加：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//静态化uploads文件夹</span></span><br><span class=\"line\">app.use(<span class=\"string\">\"/uploads\"</span> , express.static(<span class=\"string\">\"uploads\"</span>));</span><br></pre></td></tr></table></figure>\n<p><img src=\"image7.png\" alt=\"\"></p>\n<p><strong>在裁切页面时，怎么显示刚刚上传的图片呢？</strong></p>\n<p>当用户上传完毕图片之后，将文件名存储到session中，然后呈递cut.ejs模板，通过字典将图片的网址传入。</p>\n<p>处理上传的时候存入session：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//处理上传</span></span><br><span class=\"line\">exports.uploadavatar = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req,res</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//得到前端提交的表单信息</span></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> form = <span class=\"keyword\">new</span> formidable.IncomingForm();</span><br><span class=\"line\">\t<span class=\"comment\">//设置上传文件夹</span></span><br><span class=\"line\">\tform.uploadDir  = path.resolve(__dirname , <span class=\"string\">\"../uploads\"</span>);</span><br><span class=\"line\">\t<span class=\"comment\">//保留拓展名</span></span><br><span class=\"line\">\tform.keepExtensions = <span class=\"literal\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\tform.parse(req , <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err , fields , files</span>)</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//提炼出刚刚上传的图片的文件名</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> pathname = url.parse(files.avatar.path).pathname.match(<span class=\"regexp\">/\\/(upload_.+)$/</span>)[<span class=\"number\">1</span>];</span><br><span class=\"line\">\t\t<span class=\"comment\">//将这个文件夹名存入session！</span></span><br><span class=\"line\">\t\treq.session.avatarurl = pathname;</span><br><span class=\"line\">\t\t<span class=\"comment\">//跳转页面</span></span><br><span class=\"line\">\t\tres.redirect(<span class=\"string\">\"/cut\"</span>);</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在裁切页面使用这个session:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//呈递裁切页面</span></span><br><span class=\"line\">exports.showcut = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req,res</span>)</span>&#123;</span><br><span class=\"line\">\tres.render(<span class=\"string\">\"cut\"</span> , &#123;</span><br><span class=\"line\">\t\t<span class=\"string\">\"avatarurl\"</span> : req.session.avatarurl </span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"image8.png\" alt=\"\"></p>\n<p>jQuery-ui有什么功能：</p>\n<ul>\n<li><p>Draggable ：拖拽</p>\n</li>\n<li><p>Droppable : 拖放</p>\n</li>\n<li><p>Resizable : 可更改尺寸</p>\n</li>\n<li><p>Selectabel : 可被选择</p>\n</li>\n<li><p>Sortable : 可更改顺序</p>\n</li>\n</ul>\n<p>我们的cut小框框可以被更改尺寸。此时使用jquery-ui提供的：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"string\">\"#cut_rect\"</span>).resizable();</span><br></pre></td></tr></table></figure>\n<p>但是一定要注意，必须引用jquery-ui的样式表。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"//code.jquery.com/ui/1.12.1/themes/base/jquery-ui.css\"</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>css文件夹中必须有图片</p>\n<p><img src=\"image9.png\" alt=\"\"></p>\n<p>jQuery中有一个trigger()的方法，可以模拟别的元素的事件。</p>\n<h2 id=\"2-4-使用gm裁剪图片\"><a href=\"#2-4-使用gm裁剪图片\" class=\"headerlink\" title=\"2.4 使用gm裁剪图片\"></a>2.4 使用gm裁剪图片</h2><p>gm就是GraphicsMagick的缩写。</p>\n<p><a href=\"http://www.graphicsmagick.org/\" target=\"_blank\" rel=\"noopener\">http://www.graphicsmagick.org/</a></p>\n<blockquote>\n<p>开源的库真的很值得尊敬，比如割绳子、愤怒的小鸟都是依靠box2d这个库。</p>\n<p>可以看这个演示：<a href=\"http://yuehaowang.github.io/demo/box2d_linkage/\" target=\"_blank\" rel=\"noopener\">http://yuehaowang.github.io/demo/box2d_linkage/</a> </p>\n</blockquote>\n<p>安装软件，<img src=\"image10.png\" alt=\"\"></p>\n<p>下一步、下一步无脑安装。</p>\n<p><strong>然后将你的安装目录C:\\Program Files\\GraphicsMagick-1.3.22-Q16设置为环境变量！</strong></p>\n<p>设置环境变量成功之后，打开CMD就能使用gm命令了</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gm -version</span><br></pre></td></tr></table></figure>\n<p><img src=\"image11.png\" alt=\"\"></p>\n<p>命令行里面就能裁剪图片：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gm convert -crop 100x100+50+60 1.jpg 3.jpg</span><br></pre></td></tr></table></figure>\n<p>node.js如何操作它？此时就要安装npm包gm。</p>\n<p>安装依赖：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cnpm install --save gm</span><br></pre></td></tr></table></figure>\n<p>程序中引包：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> gm = <span class=\"built_in\">require</span>(<span class=\"string\">'gm'</span>);</span><br></pre></td></tr></table></figure>\n<p>使用：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gm(avatarurl).crop(w,h,x,y).write(avatarurl, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"string\">\"裁剪成功！\"</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p><strong>iframe内嵌的页面可以用js调用外部的DOM；但是反之不行。</strong></p>\n<p>调用方法：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"string\">\"#avatarModal\"</span> , <span class=\"built_in\">window</span>.parent.document)</span><br></pre></td></tr></table></figure>\n"},{"title":"Node.js入门和企业级项目开发02","mathjax":false,"typora-root-url":"nodejs02","typora-copy-images-to":"nodejs02","abbrlink":791990203,"date":"2018-11-17T15:58:20.000Z","updated":"2018-11-17T15:58:20.000Z","_content":"\n\n\n# 前言\n\n> 第2天课堂笔记\n>\n> 讲师：邵山欢\n>\n> 日期：2017年11月3日\n\n# 一、作业讲解\n\n**开发一个小网站，功能是：**\n\n1. 网址/  ，显示对考拉老师的话（别说坏话）。\n\n2. 网址/qian/12321 ，显示人民币一万两千三百二十一块整\n\n3. 网址/riqi/1997/5/8 ，显示这一天是农历丁酉年甲子月甲子年\n\n4. 网址/pinyin/我爱鹿晗  ，显示wǒ ài lù hán\n\n\n\n\n**讲一下作业：**\n\n第1步，创建package.json文件，使用CMD命令\n\n```\nnpm init\n```\n\n第2步，安装依赖。\n\n这里学习一下，可以用空格隔开所有的依赖的名字，一次性安装多个：\n\n```\nnpm install --save nzh solarlunar pinyin\n```\n\n第3步，写app.js跑一个HelloWorld，验证引包都是正确的，没有少文件。\n\n```javascript\nvar http = require(\"http\");\nvar nzh = require(\"nzh\");\nvar solarlunar = require(\"solarlunar\");\nvar pinyin = require(\"pinyin\");\n\nhttp.createServer((req,res)=>{\n\tres.end(\"123\");\n}).listen(3000);\n```\n\n第4步，写app.js，得到用户的URL，并且得到里面有用的部分。\n\n这里我们使用一个新的内置模块叫做url，这个url模块有一个parse的方法，可以将url进行分解。\n\n比如url：http://127.0.0.1:3000/qian/123123?haha=2&sex=nan\n\n进行\n\n```javascript\nvar url = require(\"url\");\nconsole.log( url.parse(req.url) );\n```\n\n![](image10.png)\n\n两个东西最有用：\n\n● pathname 就是url的主干部分\n\n● query 就是GET请求的查询参数\n\n进一步的，如果parse函数里面加上第二个参数true，此时参数query将会自动成为对象。\n\n```\nurl.parse(req.url , true);\n```\n\n![](image11.png)\n\n第5步，进行正则模式的匹配。\n\n```javascript\nhttp.createServer((req,res)=>{\n\t//得到用户访问的地址的主干部分\n\tvar pathname = url.parse(req.url , true).pathname;\n\n\tif(pathname == \"/\"){\n\t\tres.setHeader(\"Content-Type\" , \"text/html;charset=UTF8\");\n\t\tres.end(\"这是首页\");\n\t}else if(/\\/qian\\/.+$/.test(pathname)){\n\t\tres.setHeader(\"Content-Type\" , \"text/html;charset=UTF8\");\n\t\t//尝试得到qian后面的部分\n\t\tvar money = pathname.match(/\\/qian\\/(.+)$/)[1];\n\t\tvar toMoney = nzh.toMoney(money);\n\t\t//nzh这个包有一个特点，当你toMondy转一个不合法的输入的时候，会返回原串\n\t\tif(money == toMoney){\n\t\t\tres.end(\"不合法的输入\");\n\t\t}else{\n\t\t\tres.end(toMoney);\n\t\t}\n\t}\n}).listen(3000);\n```\n\n第6步，可以将所有的业务放到其他的文件夹中。\n\n```javascript\nvar http = require(\"http\");\nvar url = require(\"url\");\nvar showqian = require(\"./controllers/showqian.js\");\nvar showriqi = require(\"./controllers/showriqi.js\");\nvar showpinyin = require(\"./controllers/showpinyin.js\");\nvar fs = require(\"fs\");\n\nvar server = http.createServer(function(req,res){\n\t//得到用户访问的地址的主干部分\n\tvar pathname = url.parse(req.url , true).pathname;\n\n\tif(pathname == \"/\"){\n\t\tres.setHeader(\"Content-Type\" , \"text/html;charset=UTF8\");\n\t\tfs.readFile(\"./public/index.html\" , function(err , data){\n\t\t\tres.end(data);\n\t\t});\n\t}else if(/\\/qian\\/.+$/.test(pathname)){\n\t\t//如果URL匹配了/qian/...的模式，此时调用外部的函数\n\t\tshowqian(res , pathname);\n\t}else if(/\\/riqi\\/.+$/.test(pathname)){\n\t\tshowriqi(res , pathname);\n\t}else if(/\\/pinyin\\/.+$/.test(pathname)){\n\t\tshowpinyin(res , pathname);\n\t}else{\n\t\tres.statusCode = 404;\n\t\tres.setHeader(\"Content-Type\" , \"text/html;charset=UTF8\");\n\t\tres.end(\"<h1>没有这个页面</h1>\");\n\t}\n});\n\nserver.listen(3000);\n```\n\n\n\n# 二、淘宝CNPM镜像\n\n淘宝做了一个npm的镜像，叫做cnpm。\n\n官网： npm.taobao.org\n\n特别简单复制下面的程序到CMD中按回车就行了：\n\n```\nnpm install -g cnpm --registry=https://registry.npm.taobao.org\n```\n\n`-g`安装表示全局安装命令行程序，安装完毕之后，我们就能在CMD中使用cnpm了。\n\n![](image12.png)\n\n今后使用cnpm命令代替npm命令，比如：\n\n```\ncnpm install --save solarlunar\n```\n\n\n\n# 三、Express框架\n\n## 3.1 整体感知\n\n做http服务的时候，不方便：\n\n-   匹配URL很不方便 if(//.test()){}\n\n-   使用静态页面不方便 fs.readFile(function(err,data){res.end(data)})\n\n-   不能静态化一个文件夹，我们想将一个文件夹中的所有文件自动拥有路由，实现不了\n\n-   ......\n\n    \n\n**Express简化了HTTP应用程序的开发。**\n\n官网： http://www.expressjs.com.cn/\n\n![](image13.png)\n\n\n安装依赖：\n\n```\ncnpm intsall --save express\n```\n\n我们用昨天的作业在express中进行一个演示：\n\n```javascript\nvar express = require(\"express\");\nvar app = express();\n\napp.get(\"/\" , function(req,res){\n\tres.send(\"我是首页\");\n});\n\napp.get(\"/qian/:shu\" , function(req,res){\n\tres.send(\"转钱为大写，要转的钱\" + req.params.shu);\n});\n\napp.get(\"/riqi/:nian/:yue/:ri\" , function(req,res){\n\tres.send(\"客官你好，我会将这个日期转为农历：\" + req.params.nian + req.params.yue + req.params.ri);\n});\n\napp.get(\"/pinyin/:word\" , function(req,res){\n\tres.send(\"将这个词\" + req.params.word + \"转为拼音\");\n});\n\napp.listen(3000);\n```\n\n\n\n## 3.2 创建app和app的监听\n\n我们引入express之后，这个express是一个函数，这个函数可以调用创建出一个app对象。\n\n今后所有的操作都是用app对象来完成，需要注意的是，一个程序中只有一个app。也就是说express不能多次调用。\n\n\n\n**express程序的基本结构：**\n\n```javascript\nvar express = require(\"express\");\nvar app = express();\n\n中间件\n中间件\n中间件\n中间件\n\napp.listen(3000);\n```\n\n\n\n## 3.3 中间件\n\n### 3.3.1 动词\n\n中间件的语法：\n\n```javascript\napp.动词(\"地址\" , function(req,res){\n\n});\n```\n\n我们先说动词，它是26种HTTP请求，必须是小写字母：\n\n![](image14.png)\n\n动词表示当用户用这种请求访问这个页面的时候做的事情。\n\n我们现在就可以区分出用GET请求访问首页和POST请求访问首页做不同的事情：\n\n```javascript\nvar express = require(\"express\");\nvar app = express();\n\napp.get(\"/\" , function(req,res){\n\tconsole.log(\"A\");\n});\n\napp.post(\"/\" , function(req,res){\n\tconsole.log(\"B\");\n});\n\napp.listen(3000);\n```\n\n\n\n### 3.3.2 中间件的路径是自动比对主干部分\n\n路径已经自动被url.parse()了，也就是说express会用用户输入的URL的主干部分来进行比对。\n\n也就是说我的中间件如果是：\n\n```javascript\napp.get(\"/xinwen\" , function(req,res){\n\tres.send(\"<h1>新闻频道</h1>\");\n})\n```\n\n下面的URL都是合法的能够进入这个频道的：\n\n```\nhttp://127.0.0.1:3000/xinwen\nhttp://127.0.0.1:3000/xinwen/\nhttp://127.0.0.1:3000/xinwen?id=234234\nhttp://127.0.0.1:3000/xinwen?id=234234#234234345435234\n```\n\n![](image15.png)\n\n\n\n### 3.3.3 中间件可以有通配符\n\n用`:`来表示画一个通配，要注意这里没有正则表达式的，在程序中可以通过`req.params.***`得到它。\n\n```javascript\napp.get(\"/:banji/:xuehao\" , function(req,res){\n\tvar banji = req.params.banji;\n\tvar xuehao = req.params.xuehao;\n\n\tres.send(banji + \"班\" + xuehao + \"号\");\n});\n```\n\n今后的编程就不用写match()和test()方法了。\n\n还有一种\\*的通配符，没啥用，自己看手册。\n\n\n\n### 3.3.4 中间件的顺序很关键\n\n比如我们输入班级、学号查询学生信息，但是不能查询3班8号。此时一定要注意中间件的顺序。\n\n中间件一旦匹配上的路由，此时不再进行其他匹配。有一种\"拦截\"的感觉。\n\n```javascript\napp.get(\"/3/8\" , function(req,res){\n\tres.send(\"<h1>校长的儿子你也敢查！</h1>\")\n});\n\napp.get(\"/:banji/:xuehao\" , function(req,res){\n\tvar banji = req.params.banji;\n\tvar xuehao = req.params.xuehao;\n\n\tres.send(banji + \"班\" + xuehao + \"号\");\n});\n```\n\n\n\n### 3.3.5 用next()放行拦截\n\n当一个中间件已经匹配了路径，但是自己不希望单独处理这次请求，可以用next来放行。\n\n我们做一个业务能够查询学生或者老师的信息，不管查询什么都要增加计数器的数量。此时可以单独用一个中间件写计数器，放行请求即可：\n\n```javascript\napp.get(\"/chaxun/*\" , function(req,res,next){\n\tcount++;\n\tnext();\n});\n\napp.get(\"/chaxun/xuesheng/:banji/:xuehao\" , function(req,res){\n\tres.send(\"查询\" + req.params.banji + \"班\" + req.params.xuehao + \"号\" + \"<br /> 共查询了\" + count + \"次\");\n});\n\napp.get(\"/chaxun/laoshi/:gonghao\" , function(req,res){\n\tres.send(\"查询\" + req.params.gonghao + \"工号的老师\" + \"<br /> 共查询了\" + count + \"次\");\n});\n```\n\n\n\n## 3.4 输出\n\n● 输出可以用res.send()做输出，会自动加上utf-8。\n\n```javascript\napp.get(\"/\" , function(req,res){\n\tres.send(\"中文\");\n});\n```\n\n● 如果输出的内容是一个JSON，此时要用res.json()来进行输出。\n\n```javascript\napp.get(\"/\" , function(req,res){\n\tres.json({\"a\":1,\"b\":2,\"c\":[1,2,3,4,{\"m\":4}]});\n});\n```\n\n● 如果输出的内容是一个JSONP，此时要用res.jsonp()来输出，此时它会自动检测callback的GET请求，并且加上圆括号的调用。\n\n```javascript\napp.get(\"/\" , function(req,res){\n\tres.jsonp({\"a\":1,\"b\":2,\"c\":[1,2,3,4,{\"m\":4}]});\n});\n```\n\n\n\n**复习一下jQuery中的jsonp跨域：**\n\n```javascript\n$.ajax({\n\t\"url\" : \"/?callback=?\",\n\t\"dataType\" : \"JSONP\",\n\t\"success\" : function(data){\n\n\t}\n});\n\n//原理\n//jQuery帮我们创建了一个<script>标签，src是这个url，用随机的字符串替换了?\n//用随机的字符串为名字创建了一个全局的函数，将success指向它\n```\n\n![](image16.png)\n\n● 如果输出的是一个外置页面，此时要用sendFile()这个API，注意这里必须要用绝对路径，此时我们用***\\_\\_dirname***来进行一个拼合。\n\n```javascript\napp.get(\"/\" , function(req,res){\n\t//__dirname表示当前文件所在的目录\n\tres.sendFile(__dirname + \"/public/a.html\");\n});\n```\n\n● 如果想要跳转页面，用res.redirect()即可\n\n```javascript\napp.get(\"/\" , function(req,res){\n\tres.redirect(\"http://www.163.com\");\n});\n```\n\n\n\n**复习：**\n\nres.send()\n\nres.sendFile()\n\nres.json()\n\nres.jsonp()\n\nres.redirect()\n\n\n\n## 3.5 静态化一个文件夹\n\n如果我们想让某文件夹中的所有文件自动拥有路由，此时非常简单，一句话即可：\n\n```javascript\napp.use(express.static(\"public\"));\n```\n\n此时将把public文件夹进行静态化。\n\n```\n┣ app.js\n┣ public\n┃  ┣  a.html\n┃  ┣  m\n┃  ┃ ┣  n\n┃  ┃ ┃ ┣ wangjunkai.png\n```\n\n\n\n我们在app.js中静态化public文件夹：\n\n```javascript\nvar express = require(\"express\");\nvar app = express();\n\napp.use(express.static(\"public\"));\n\napp.listen(3000);\n```\n\n此时：\n\n![](image17.png)\n\n![](image18.png)\n\n更进一步，如果我们不希望静态的文件夹出现在底层，而是在URL中体现public的名字，此时可用：\n\n```javascript\napp.use(\"/public\" , express.static(\"public\"));\n```\n\n![](image19.png)\n\n\n\n# 四、Express中的GET请求和POST请求参数的获得\n\n## 4.1 GET请求参数的获得\n\n![](image20.png)\n\nGET请求参数的识别实际上就是URL地址的解析。URL解析使用内置的url模块的parse方法即可。\n\n```javascript\nvar url = require(\"url\");\napp.get(\"/tijiao\" , function(req,res){\n\tvar query = url.parse(req.url , true).query;\n\tconsole.log(\"服务器收到了前端交来的数据\" , query);\n});\n```\n\n![](image21.png)\n\n\n\n## 4.2 POST请求参数的获得\n\nPOST请求的参数携带在上行报文的报文体中。\n\n我们使用npm包formidable来识别这样的上行报文。\n\nAPI：https://www.npmjs.com/package/formidable\n\n安装依赖：\n\n```\ncnpm intsall formidable --save\n```\n\n后台app.js识别POST请求需要使用formidable这个包。\n\n```javascript\nvar formidable = require('formidable');\napp.post(\"/tijiao\" , function(req,res){\n\tvar form = new formidable.IncomingForm();\n\n\tform.parse(req , function(err , fields , files){\n\t\tres.json({\"result\" : 1})\n\t});\n});\n```\n\n\n\n总结一下两种请求后台怎么得到参数（伪代码）：\n\n**GET请求** \n\n```\nvar url = require(\"url\");\nvar query = url.parse(req.url , true).query;\n```\n\n**POST请求** \n\n```\nvar formidable = require(\"formidable\");\n\napp.post(\"/tijiao\" , function(req,res){\n\tvar form = new formidable.IncomingForm();\n\tform.parse(req , function(err , fields , files){\n\t\tconsole.log(fields);\n\t});\n});\n```\n\n\n\n## 4.3 其他请求\n\n一共有26种请求，注意只有GET请求是通过URL缀`?`参数来传递参数的。其他的25种请求，都是通过上行报文来传参数的。formidable能够识别其他25种请求的参数。\n\n\n\n先说一下jQuery如何发出DELETE请求：\n\n```javascript\n$(\"#btn3\").click(function(){\n\t$.ajax({\n\t\t\"url\" : \"/tijiao\" ,\n\t\t\"type\" : \"DELETE\" ,\n\t\t\"data\" : {\n\t\t\t\"id\" : 10086\n\t\t},\n\t\t\"success\" : function(data){\n\t\t\talert(data.result);\n\t\t}\n\t});\n});\n```\n\n我们的Express这样识别它：（你会发现和POST请求的处理方法是一样的，都是formidable）：\n\n```javascript\n//识别DELETE请求\napp.delete(\"/tijiao\" , function(req,res){\n\tvar form = new formidable.IncomingForm();\n\tform.parse(req , (err , fields , files) => {\n\t\tconsole.log(\"服务器收到DELETE请求参数\" , fields);\n\t\tres.json({\"result\" : 1});\n\t});\n});\n```\n\n\n\n总结一下：\n\n**GET请求** \n\n```\nvar url = require(\"url\");\nvar query = url.parse(req.url , true).query;\n```\n\n\n\n**其他请求**\n\n```\nvar formidable = require(\"formidable\");\n\napp.动词(\"/tijiao\" , function(req,res){\n\tvar form = new formidable.IncomingForm();\n\tform.parse(req , function(err , fields , files){\n\t\tconsole.log(fields);\n\t});\n});\n```\n\n\n\n## 4.4 RESTful风格路由\n\n注意这个单词的写法：RESTful。REST是Representational State Transfer。\n\n**RESTful风格的路由很简单，指的是用URL表示操作的资源，用HTTP动词表示何种操作。**\n\n\n\n不是RESTful风格的路由：\n\n| 事儿                            | 处理这个事儿的URL                                  |\n| ------------------------------- | -------------------------------------------------- |\n| 增加一个学生                    | http://127.0.0.1/addStudent.php                    |\n| 删除一个学号为10086的学生       | http://127.0.0.1/removeStudent.php?id=10086        |\n| 修改一个学号为10086的学生的性别 | http://127.0.0.1/updateStudent.php?id=10086&sex=男 |\n| 列出所有学生                    | http://127.0.0.1/allStudent.php                    |\n\n\n\nRESTful风格的路由\n\n| 事儿                            | 处理这个事儿的URL                           |\n| ------------------------------- | ------------------------------------------- |\n| 增加一个学生                    | http://127.0.0.1/student   （POST）         |\n| 删除一个学号为10086的学生       | http://127.0.0.1/student/10086   （DELETE） |\n| 修改一个学号为10086的学生的性别 | http://127.0.0.1/student/10086   （PATCH）  |\n| 列出所有学生                    | http://127.0.0.1/student   （GET）          |\n\n\n\n# 五、做一个RESTful风格路由的TodoList\n\n![](image22.png)\n    \n创建身份证，\n```\nnpm init\n```\n安装依赖\n\n```\ncnpm install --save express formidable\n```\n\n先从做一个模拟数据库开始（事实上，第三节课就要学习MongoDB和mongoose）。\n\n创建db文件夹创建db.js文件：\n\n```json\n[\n\t{\"id\" : 1 , \"title\" : \"吃饭\" , \"done\" : false},\n\t{\"id\" : 2 , \"title\" : \"睡觉\" , \"done\" : true},\n\t{\"id\" : 3 , \"title\" : \"打豆豆\" , \"done\" : false}\n]\n```\n\n创建models文件夹，里面创建todo.js的文件。\n\n-   **[这个js文件暴露所有能够操作db.js数据库文件的函数，所有对db的操作必须找它！]**\n\n-   **[这个js文件不是中间件，和http的服务没有关系，这个文件做的是最脏最累的底层的活儿，看不清楚和全局的关系，这个js文件可以单独的进行单元测试]**。\n\nnodejs中内置了一个叫做path的模块，里面提供了resolve()的函数，可以智能合并\\_\\_dirname和层级路径。\n\n```javascript\nvar fs = require(\"fs\");\nvar path = require(\"path\");\n\n//【查】列出所有的todo。结果通过回调函数返回。\nvar allTodo = function(callback){\n\t//path.resolve()表示只能合并路径。\n\tfs.readFile(path.resolve(__dirname , \"../db/db.js\") , function(err , data){\n\t\tcallback(data.toString());\n\t});\n}\n\n//单元测试，测试查询功能：\nallTodo(function(data){\n\tconsole.log(\"哈哈读取啦\" , data);\n});\n```\n\n这个todo.js的全貌：\n\n```javascript\nvar fs = require(\"fs\");\nvar path = require(\"path\");\n\n//文件路径\nvar filepath = path.resolve(__dirname , \"../db/db.js\");\n\n//【查】列出所有的todo。结果通过回调函数返回。\nexports.allTodo = function(callback){\n\t//path.resolve()表示只能合并路径。\n\tfs.readFile(filepath , function(err , data){\n\t\tcallback(data.toString());\n\t});\n}\n\n//【增】增加Todo。思路是先读取所有的Todo，往数组中push一项，然后写文件\nexports.addTodo = function(title , callback){\n\t//利用刚刚写好的allTodo函数读取所有todo\n\tallTodo(function(data){\n\t\t//将字符串的数组变为真的数组\n\t\tvar data = JSON.parse(data);\n\t\t//遍历这个数组找最大的ID，为什么要找呢？因为我们的新Todo要为当前最大id+1\n\t\tvar maxid = 1;\n\t\tfor(var i = 0 ; i < data.length ; i++){\n\t\t\tif(data[i].id > maxid){\n\t\t\t\tmaxid = data[i].id;\n\t\t\t}\n\t\t}\n\t\t//将data中push一项\n\t\tdata.push({\"id\" : maxid + 1 , \"title\" : title , \"done\" : false});\n\t\t//写！\n\t\tfs.writeFile(filepath , JSON.stringify(data) , function(){\n\t\t\tcallback();\n\t\t});\n\t});\n}\n\n//【删】思路是读取全部的数组，删除其中一项，然后写入文件\nexports.removeTodo = function(id , callback){\n\t//利用刚刚写好的allTodo函数读取所有todo\n\tallTodo(function(data){\n\t\t//将字符串的数组变为真的数组\n\t\tvar data = JSON.parse(data);\n\t\t//删除这个todo\n\t\tfor(var i = 0 ; i < data.length ; i++){\n\t\t\tif(data[i].id === id){\n\t\t\t\tdata.splice(i , 1);\n\t\t\t}\n\t\t}\n\t\t//写！\n\t\tfs.writeFile(filepath , JSON.stringify(data) , function(){\n\t\t\tcallback();\n\t\t});\n\t});\n}\n\n//【改】思路是读取全部的数组，改变其中一项，写入\n//k可能是title或者是done\nexports.updateTodo = function(id , k , v , callback){\n\t//利用刚刚写好的allTodo函数读取所有todo\n\tallTodo(function(data){\n\t\t//将字符串的数组变为真的数组\n\t\tvar data = JSON.parse(data);\n\t\t//改变这个todo，遍历所有todo看看哪个todo的id和你要改的id是一样的\n\t\tfor(var i = 0 ; i < data.length ; i++){\n\t\t\tif(data[i].id === id){\n\t\t\t\tdata[i][k] = v;\n\t\t\t}\n\t\t}\n\t\t//写！\n\t\tfs.writeFile(filepath , JSON.stringify(data) , function(){\n\t\t\tcallback();\n\t\t});\n\t});\n}\n```\n\n写app.js主文件，主要是静态化www文件夹。\n\n```javascript\nvar express = require(\"express\");\nvar app = express();\n\n//静态化www文件夹\napp.use(express.static(\"www\"));\n\n//监听端口\napp.listen(3000);\n```\n\n\n\n**接口：就是没有界面的数据，通常是JSON或者JSONP形式**。\n\n","source":"_posts/Dev/nodejs/nodejs02.md","raw":"---\ntitle: Node.js入门和企业级项目开发02\nmathjax: false\ntypora-root-url: nodejs02\ntypora-copy-images-to: nodejs02\ncategories:\n  - nodejs\nabbrlink: 791990203\ndate: 2018-11-17 23:58:20\nupdated: 2018-11-17 23:58:20\ntags:\n---\n\n\n\n# 前言\n\n> 第2天课堂笔记\n>\n> 讲师：邵山欢\n>\n> 日期：2017年11月3日\n\n# 一、作业讲解\n\n**开发一个小网站，功能是：**\n\n1. 网址/  ，显示对考拉老师的话（别说坏话）。\n\n2. 网址/qian/12321 ，显示人民币一万两千三百二十一块整\n\n3. 网址/riqi/1997/5/8 ，显示这一天是农历丁酉年甲子月甲子年\n\n4. 网址/pinyin/我爱鹿晗  ，显示wǒ ài lù hán\n\n\n\n\n**讲一下作业：**\n\n第1步，创建package.json文件，使用CMD命令\n\n```\nnpm init\n```\n\n第2步，安装依赖。\n\n这里学习一下，可以用空格隔开所有的依赖的名字，一次性安装多个：\n\n```\nnpm install --save nzh solarlunar pinyin\n```\n\n第3步，写app.js跑一个HelloWorld，验证引包都是正确的，没有少文件。\n\n```javascript\nvar http = require(\"http\");\nvar nzh = require(\"nzh\");\nvar solarlunar = require(\"solarlunar\");\nvar pinyin = require(\"pinyin\");\n\nhttp.createServer((req,res)=>{\n\tres.end(\"123\");\n}).listen(3000);\n```\n\n第4步，写app.js，得到用户的URL，并且得到里面有用的部分。\n\n这里我们使用一个新的内置模块叫做url，这个url模块有一个parse的方法，可以将url进行分解。\n\n比如url：http://127.0.0.1:3000/qian/123123?haha=2&sex=nan\n\n进行\n\n```javascript\nvar url = require(\"url\");\nconsole.log( url.parse(req.url) );\n```\n\n![](image10.png)\n\n两个东西最有用：\n\n● pathname 就是url的主干部分\n\n● query 就是GET请求的查询参数\n\n进一步的，如果parse函数里面加上第二个参数true，此时参数query将会自动成为对象。\n\n```\nurl.parse(req.url , true);\n```\n\n![](image11.png)\n\n第5步，进行正则模式的匹配。\n\n```javascript\nhttp.createServer((req,res)=>{\n\t//得到用户访问的地址的主干部分\n\tvar pathname = url.parse(req.url , true).pathname;\n\n\tif(pathname == \"/\"){\n\t\tres.setHeader(\"Content-Type\" , \"text/html;charset=UTF8\");\n\t\tres.end(\"这是首页\");\n\t}else if(/\\/qian\\/.+$/.test(pathname)){\n\t\tres.setHeader(\"Content-Type\" , \"text/html;charset=UTF8\");\n\t\t//尝试得到qian后面的部分\n\t\tvar money = pathname.match(/\\/qian\\/(.+)$/)[1];\n\t\tvar toMoney = nzh.toMoney(money);\n\t\t//nzh这个包有一个特点，当你toMondy转一个不合法的输入的时候，会返回原串\n\t\tif(money == toMoney){\n\t\t\tres.end(\"不合法的输入\");\n\t\t}else{\n\t\t\tres.end(toMoney);\n\t\t}\n\t}\n}).listen(3000);\n```\n\n第6步，可以将所有的业务放到其他的文件夹中。\n\n```javascript\nvar http = require(\"http\");\nvar url = require(\"url\");\nvar showqian = require(\"./controllers/showqian.js\");\nvar showriqi = require(\"./controllers/showriqi.js\");\nvar showpinyin = require(\"./controllers/showpinyin.js\");\nvar fs = require(\"fs\");\n\nvar server = http.createServer(function(req,res){\n\t//得到用户访问的地址的主干部分\n\tvar pathname = url.parse(req.url , true).pathname;\n\n\tif(pathname == \"/\"){\n\t\tres.setHeader(\"Content-Type\" , \"text/html;charset=UTF8\");\n\t\tfs.readFile(\"./public/index.html\" , function(err , data){\n\t\t\tres.end(data);\n\t\t});\n\t}else if(/\\/qian\\/.+$/.test(pathname)){\n\t\t//如果URL匹配了/qian/...的模式，此时调用外部的函数\n\t\tshowqian(res , pathname);\n\t}else if(/\\/riqi\\/.+$/.test(pathname)){\n\t\tshowriqi(res , pathname);\n\t}else if(/\\/pinyin\\/.+$/.test(pathname)){\n\t\tshowpinyin(res , pathname);\n\t}else{\n\t\tres.statusCode = 404;\n\t\tres.setHeader(\"Content-Type\" , \"text/html;charset=UTF8\");\n\t\tres.end(\"<h1>没有这个页面</h1>\");\n\t}\n});\n\nserver.listen(3000);\n```\n\n\n\n# 二、淘宝CNPM镜像\n\n淘宝做了一个npm的镜像，叫做cnpm。\n\n官网： npm.taobao.org\n\n特别简单复制下面的程序到CMD中按回车就行了：\n\n```\nnpm install -g cnpm --registry=https://registry.npm.taobao.org\n```\n\n`-g`安装表示全局安装命令行程序，安装完毕之后，我们就能在CMD中使用cnpm了。\n\n![](image12.png)\n\n今后使用cnpm命令代替npm命令，比如：\n\n```\ncnpm install --save solarlunar\n```\n\n\n\n# 三、Express框架\n\n## 3.1 整体感知\n\n做http服务的时候，不方便：\n\n-   匹配URL很不方便 if(//.test()){}\n\n-   使用静态页面不方便 fs.readFile(function(err,data){res.end(data)})\n\n-   不能静态化一个文件夹，我们想将一个文件夹中的所有文件自动拥有路由，实现不了\n\n-   ......\n\n    \n\n**Express简化了HTTP应用程序的开发。**\n\n官网： http://www.expressjs.com.cn/\n\n![](image13.png)\n\n\n安装依赖：\n\n```\ncnpm intsall --save express\n```\n\n我们用昨天的作业在express中进行一个演示：\n\n```javascript\nvar express = require(\"express\");\nvar app = express();\n\napp.get(\"/\" , function(req,res){\n\tres.send(\"我是首页\");\n});\n\napp.get(\"/qian/:shu\" , function(req,res){\n\tres.send(\"转钱为大写，要转的钱\" + req.params.shu);\n});\n\napp.get(\"/riqi/:nian/:yue/:ri\" , function(req,res){\n\tres.send(\"客官你好，我会将这个日期转为农历：\" + req.params.nian + req.params.yue + req.params.ri);\n});\n\napp.get(\"/pinyin/:word\" , function(req,res){\n\tres.send(\"将这个词\" + req.params.word + \"转为拼音\");\n});\n\napp.listen(3000);\n```\n\n\n\n## 3.2 创建app和app的监听\n\n我们引入express之后，这个express是一个函数，这个函数可以调用创建出一个app对象。\n\n今后所有的操作都是用app对象来完成，需要注意的是，一个程序中只有一个app。也就是说express不能多次调用。\n\n\n\n**express程序的基本结构：**\n\n```javascript\nvar express = require(\"express\");\nvar app = express();\n\n中间件\n中间件\n中间件\n中间件\n\napp.listen(3000);\n```\n\n\n\n## 3.3 中间件\n\n### 3.3.1 动词\n\n中间件的语法：\n\n```javascript\napp.动词(\"地址\" , function(req,res){\n\n});\n```\n\n我们先说动词，它是26种HTTP请求，必须是小写字母：\n\n![](image14.png)\n\n动词表示当用户用这种请求访问这个页面的时候做的事情。\n\n我们现在就可以区分出用GET请求访问首页和POST请求访问首页做不同的事情：\n\n```javascript\nvar express = require(\"express\");\nvar app = express();\n\napp.get(\"/\" , function(req,res){\n\tconsole.log(\"A\");\n});\n\napp.post(\"/\" , function(req,res){\n\tconsole.log(\"B\");\n});\n\napp.listen(3000);\n```\n\n\n\n### 3.3.2 中间件的路径是自动比对主干部分\n\n路径已经自动被url.parse()了，也就是说express会用用户输入的URL的主干部分来进行比对。\n\n也就是说我的中间件如果是：\n\n```javascript\napp.get(\"/xinwen\" , function(req,res){\n\tres.send(\"<h1>新闻频道</h1>\");\n})\n```\n\n下面的URL都是合法的能够进入这个频道的：\n\n```\nhttp://127.0.0.1:3000/xinwen\nhttp://127.0.0.1:3000/xinwen/\nhttp://127.0.0.1:3000/xinwen?id=234234\nhttp://127.0.0.1:3000/xinwen?id=234234#234234345435234\n```\n\n![](image15.png)\n\n\n\n### 3.3.3 中间件可以有通配符\n\n用`:`来表示画一个通配，要注意这里没有正则表达式的，在程序中可以通过`req.params.***`得到它。\n\n```javascript\napp.get(\"/:banji/:xuehao\" , function(req,res){\n\tvar banji = req.params.banji;\n\tvar xuehao = req.params.xuehao;\n\n\tres.send(banji + \"班\" + xuehao + \"号\");\n});\n```\n\n今后的编程就不用写match()和test()方法了。\n\n还有一种\\*的通配符，没啥用，自己看手册。\n\n\n\n### 3.3.4 中间件的顺序很关键\n\n比如我们输入班级、学号查询学生信息，但是不能查询3班8号。此时一定要注意中间件的顺序。\n\n中间件一旦匹配上的路由，此时不再进行其他匹配。有一种\"拦截\"的感觉。\n\n```javascript\napp.get(\"/3/8\" , function(req,res){\n\tres.send(\"<h1>校长的儿子你也敢查！</h1>\")\n});\n\napp.get(\"/:banji/:xuehao\" , function(req,res){\n\tvar banji = req.params.banji;\n\tvar xuehao = req.params.xuehao;\n\n\tres.send(banji + \"班\" + xuehao + \"号\");\n});\n```\n\n\n\n### 3.3.5 用next()放行拦截\n\n当一个中间件已经匹配了路径，但是自己不希望单独处理这次请求，可以用next来放行。\n\n我们做一个业务能够查询学生或者老师的信息，不管查询什么都要增加计数器的数量。此时可以单独用一个中间件写计数器，放行请求即可：\n\n```javascript\napp.get(\"/chaxun/*\" , function(req,res,next){\n\tcount++;\n\tnext();\n});\n\napp.get(\"/chaxun/xuesheng/:banji/:xuehao\" , function(req,res){\n\tres.send(\"查询\" + req.params.banji + \"班\" + req.params.xuehao + \"号\" + \"<br /> 共查询了\" + count + \"次\");\n});\n\napp.get(\"/chaxun/laoshi/:gonghao\" , function(req,res){\n\tres.send(\"查询\" + req.params.gonghao + \"工号的老师\" + \"<br /> 共查询了\" + count + \"次\");\n});\n```\n\n\n\n## 3.4 输出\n\n● 输出可以用res.send()做输出，会自动加上utf-8。\n\n```javascript\napp.get(\"/\" , function(req,res){\n\tres.send(\"中文\");\n});\n```\n\n● 如果输出的内容是一个JSON，此时要用res.json()来进行输出。\n\n```javascript\napp.get(\"/\" , function(req,res){\n\tres.json({\"a\":1,\"b\":2,\"c\":[1,2,3,4,{\"m\":4}]});\n});\n```\n\n● 如果输出的内容是一个JSONP，此时要用res.jsonp()来输出，此时它会自动检测callback的GET请求，并且加上圆括号的调用。\n\n```javascript\napp.get(\"/\" , function(req,res){\n\tres.jsonp({\"a\":1,\"b\":2,\"c\":[1,2,3,4,{\"m\":4}]});\n});\n```\n\n\n\n**复习一下jQuery中的jsonp跨域：**\n\n```javascript\n$.ajax({\n\t\"url\" : \"/?callback=?\",\n\t\"dataType\" : \"JSONP\",\n\t\"success\" : function(data){\n\n\t}\n});\n\n//原理\n//jQuery帮我们创建了一个<script>标签，src是这个url，用随机的字符串替换了?\n//用随机的字符串为名字创建了一个全局的函数，将success指向它\n```\n\n![](image16.png)\n\n● 如果输出的是一个外置页面，此时要用sendFile()这个API，注意这里必须要用绝对路径，此时我们用***\\_\\_dirname***来进行一个拼合。\n\n```javascript\napp.get(\"/\" , function(req,res){\n\t//__dirname表示当前文件所在的目录\n\tres.sendFile(__dirname + \"/public/a.html\");\n});\n```\n\n● 如果想要跳转页面，用res.redirect()即可\n\n```javascript\napp.get(\"/\" , function(req,res){\n\tres.redirect(\"http://www.163.com\");\n});\n```\n\n\n\n**复习：**\n\nres.send()\n\nres.sendFile()\n\nres.json()\n\nres.jsonp()\n\nres.redirect()\n\n\n\n## 3.5 静态化一个文件夹\n\n如果我们想让某文件夹中的所有文件自动拥有路由，此时非常简单，一句话即可：\n\n```javascript\napp.use(express.static(\"public\"));\n```\n\n此时将把public文件夹进行静态化。\n\n```\n┣ app.js\n┣ public\n┃  ┣  a.html\n┃  ┣  m\n┃  ┃ ┣  n\n┃  ┃ ┃ ┣ wangjunkai.png\n```\n\n\n\n我们在app.js中静态化public文件夹：\n\n```javascript\nvar express = require(\"express\");\nvar app = express();\n\napp.use(express.static(\"public\"));\n\napp.listen(3000);\n```\n\n此时：\n\n![](image17.png)\n\n![](image18.png)\n\n更进一步，如果我们不希望静态的文件夹出现在底层，而是在URL中体现public的名字，此时可用：\n\n```javascript\napp.use(\"/public\" , express.static(\"public\"));\n```\n\n![](image19.png)\n\n\n\n# 四、Express中的GET请求和POST请求参数的获得\n\n## 4.1 GET请求参数的获得\n\n![](image20.png)\n\nGET请求参数的识别实际上就是URL地址的解析。URL解析使用内置的url模块的parse方法即可。\n\n```javascript\nvar url = require(\"url\");\napp.get(\"/tijiao\" , function(req,res){\n\tvar query = url.parse(req.url , true).query;\n\tconsole.log(\"服务器收到了前端交来的数据\" , query);\n});\n```\n\n![](image21.png)\n\n\n\n## 4.2 POST请求参数的获得\n\nPOST请求的参数携带在上行报文的报文体中。\n\n我们使用npm包formidable来识别这样的上行报文。\n\nAPI：https://www.npmjs.com/package/formidable\n\n安装依赖：\n\n```\ncnpm intsall formidable --save\n```\n\n后台app.js识别POST请求需要使用formidable这个包。\n\n```javascript\nvar formidable = require('formidable');\napp.post(\"/tijiao\" , function(req,res){\n\tvar form = new formidable.IncomingForm();\n\n\tform.parse(req , function(err , fields , files){\n\t\tres.json({\"result\" : 1})\n\t});\n});\n```\n\n\n\n总结一下两种请求后台怎么得到参数（伪代码）：\n\n**GET请求** \n\n```\nvar url = require(\"url\");\nvar query = url.parse(req.url , true).query;\n```\n\n**POST请求** \n\n```\nvar formidable = require(\"formidable\");\n\napp.post(\"/tijiao\" , function(req,res){\n\tvar form = new formidable.IncomingForm();\n\tform.parse(req , function(err , fields , files){\n\t\tconsole.log(fields);\n\t});\n});\n```\n\n\n\n## 4.3 其他请求\n\n一共有26种请求，注意只有GET请求是通过URL缀`?`参数来传递参数的。其他的25种请求，都是通过上行报文来传参数的。formidable能够识别其他25种请求的参数。\n\n\n\n先说一下jQuery如何发出DELETE请求：\n\n```javascript\n$(\"#btn3\").click(function(){\n\t$.ajax({\n\t\t\"url\" : \"/tijiao\" ,\n\t\t\"type\" : \"DELETE\" ,\n\t\t\"data\" : {\n\t\t\t\"id\" : 10086\n\t\t},\n\t\t\"success\" : function(data){\n\t\t\talert(data.result);\n\t\t}\n\t});\n});\n```\n\n我们的Express这样识别它：（你会发现和POST请求的处理方法是一样的，都是formidable）：\n\n```javascript\n//识别DELETE请求\napp.delete(\"/tijiao\" , function(req,res){\n\tvar form = new formidable.IncomingForm();\n\tform.parse(req , (err , fields , files) => {\n\t\tconsole.log(\"服务器收到DELETE请求参数\" , fields);\n\t\tres.json({\"result\" : 1});\n\t});\n});\n```\n\n\n\n总结一下：\n\n**GET请求** \n\n```\nvar url = require(\"url\");\nvar query = url.parse(req.url , true).query;\n```\n\n\n\n**其他请求**\n\n```\nvar formidable = require(\"formidable\");\n\napp.动词(\"/tijiao\" , function(req,res){\n\tvar form = new formidable.IncomingForm();\n\tform.parse(req , function(err , fields , files){\n\t\tconsole.log(fields);\n\t});\n});\n```\n\n\n\n## 4.4 RESTful风格路由\n\n注意这个单词的写法：RESTful。REST是Representational State Transfer。\n\n**RESTful风格的路由很简单，指的是用URL表示操作的资源，用HTTP动词表示何种操作。**\n\n\n\n不是RESTful风格的路由：\n\n| 事儿                            | 处理这个事儿的URL                                  |\n| ------------------------------- | -------------------------------------------------- |\n| 增加一个学生                    | http://127.0.0.1/addStudent.php                    |\n| 删除一个学号为10086的学生       | http://127.0.0.1/removeStudent.php?id=10086        |\n| 修改一个学号为10086的学生的性别 | http://127.0.0.1/updateStudent.php?id=10086&sex=男 |\n| 列出所有学生                    | http://127.0.0.1/allStudent.php                    |\n\n\n\nRESTful风格的路由\n\n| 事儿                            | 处理这个事儿的URL                           |\n| ------------------------------- | ------------------------------------------- |\n| 增加一个学生                    | http://127.0.0.1/student   （POST）         |\n| 删除一个学号为10086的学生       | http://127.0.0.1/student/10086   （DELETE） |\n| 修改一个学号为10086的学生的性别 | http://127.0.0.1/student/10086   （PATCH）  |\n| 列出所有学生                    | http://127.0.0.1/student   （GET）          |\n\n\n\n# 五、做一个RESTful风格路由的TodoList\n\n![](image22.png)\n    \n创建身份证，\n```\nnpm init\n```\n安装依赖\n\n```\ncnpm install --save express formidable\n```\n\n先从做一个模拟数据库开始（事实上，第三节课就要学习MongoDB和mongoose）。\n\n创建db文件夹创建db.js文件：\n\n```json\n[\n\t{\"id\" : 1 , \"title\" : \"吃饭\" , \"done\" : false},\n\t{\"id\" : 2 , \"title\" : \"睡觉\" , \"done\" : true},\n\t{\"id\" : 3 , \"title\" : \"打豆豆\" , \"done\" : false}\n]\n```\n\n创建models文件夹，里面创建todo.js的文件。\n\n-   **[这个js文件暴露所有能够操作db.js数据库文件的函数，所有对db的操作必须找它！]**\n\n-   **[这个js文件不是中间件，和http的服务没有关系，这个文件做的是最脏最累的底层的活儿，看不清楚和全局的关系，这个js文件可以单独的进行单元测试]**。\n\nnodejs中内置了一个叫做path的模块，里面提供了resolve()的函数，可以智能合并\\_\\_dirname和层级路径。\n\n```javascript\nvar fs = require(\"fs\");\nvar path = require(\"path\");\n\n//【查】列出所有的todo。结果通过回调函数返回。\nvar allTodo = function(callback){\n\t//path.resolve()表示只能合并路径。\n\tfs.readFile(path.resolve(__dirname , \"../db/db.js\") , function(err , data){\n\t\tcallback(data.toString());\n\t});\n}\n\n//单元测试，测试查询功能：\nallTodo(function(data){\n\tconsole.log(\"哈哈读取啦\" , data);\n});\n```\n\n这个todo.js的全貌：\n\n```javascript\nvar fs = require(\"fs\");\nvar path = require(\"path\");\n\n//文件路径\nvar filepath = path.resolve(__dirname , \"../db/db.js\");\n\n//【查】列出所有的todo。结果通过回调函数返回。\nexports.allTodo = function(callback){\n\t//path.resolve()表示只能合并路径。\n\tfs.readFile(filepath , function(err , data){\n\t\tcallback(data.toString());\n\t});\n}\n\n//【增】增加Todo。思路是先读取所有的Todo，往数组中push一项，然后写文件\nexports.addTodo = function(title , callback){\n\t//利用刚刚写好的allTodo函数读取所有todo\n\tallTodo(function(data){\n\t\t//将字符串的数组变为真的数组\n\t\tvar data = JSON.parse(data);\n\t\t//遍历这个数组找最大的ID，为什么要找呢？因为我们的新Todo要为当前最大id+1\n\t\tvar maxid = 1;\n\t\tfor(var i = 0 ; i < data.length ; i++){\n\t\t\tif(data[i].id > maxid){\n\t\t\t\tmaxid = data[i].id;\n\t\t\t}\n\t\t}\n\t\t//将data中push一项\n\t\tdata.push({\"id\" : maxid + 1 , \"title\" : title , \"done\" : false});\n\t\t//写！\n\t\tfs.writeFile(filepath , JSON.stringify(data) , function(){\n\t\t\tcallback();\n\t\t});\n\t});\n}\n\n//【删】思路是读取全部的数组，删除其中一项，然后写入文件\nexports.removeTodo = function(id , callback){\n\t//利用刚刚写好的allTodo函数读取所有todo\n\tallTodo(function(data){\n\t\t//将字符串的数组变为真的数组\n\t\tvar data = JSON.parse(data);\n\t\t//删除这个todo\n\t\tfor(var i = 0 ; i < data.length ; i++){\n\t\t\tif(data[i].id === id){\n\t\t\t\tdata.splice(i , 1);\n\t\t\t}\n\t\t}\n\t\t//写！\n\t\tfs.writeFile(filepath , JSON.stringify(data) , function(){\n\t\t\tcallback();\n\t\t});\n\t});\n}\n\n//【改】思路是读取全部的数组，改变其中一项，写入\n//k可能是title或者是done\nexports.updateTodo = function(id , k , v , callback){\n\t//利用刚刚写好的allTodo函数读取所有todo\n\tallTodo(function(data){\n\t\t//将字符串的数组变为真的数组\n\t\tvar data = JSON.parse(data);\n\t\t//改变这个todo，遍历所有todo看看哪个todo的id和你要改的id是一样的\n\t\tfor(var i = 0 ; i < data.length ; i++){\n\t\t\tif(data[i].id === id){\n\t\t\t\tdata[i][k] = v;\n\t\t\t}\n\t\t}\n\t\t//写！\n\t\tfs.writeFile(filepath , JSON.stringify(data) , function(){\n\t\t\tcallback();\n\t\t});\n\t});\n}\n```\n\n写app.js主文件，主要是静态化www文件夹。\n\n```javascript\nvar express = require(\"express\");\nvar app = express();\n\n//静态化www文件夹\napp.use(express.static(\"www\"));\n\n//监听端口\napp.listen(3000);\n```\n\n\n\n**接口：就是没有界面的数据，通常是JSON或者JSONP形式**。\n\n","slug":"Dev/nodejs/nodejs02","published":1,"_id":"cjoncnbrn000u2gfi4cpw9o6w","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><blockquote>\n<p>第2天课堂笔记</p>\n<p>讲师：邵山欢</p>\n<p>日期：2017年11月3日</p>\n</blockquote>\n<h1 id=\"一、作业讲解\"><a href=\"#一、作业讲解\" class=\"headerlink\" title=\"一、作业讲解\"></a>一、作业讲解</h1><p><strong>开发一个小网站，功能是：</strong></p>\n<ol>\n<li><p>网址/  ，显示对考拉老师的话（别说坏话）。</p>\n</li>\n<li><p>网址/qian/12321 ，显示人民币一万两千三百二十一块整</p>\n</li>\n<li><p>网址/riqi/1997/5/8 ，显示这一天是农历丁酉年甲子月甲子年</p>\n</li>\n<li><p>网址/pinyin/我爱鹿晗  ，显示wǒ ài lù hán</p>\n</li>\n</ol>\n<p><strong>讲一下作业：</strong></p>\n<p>第1步，创建package.json文件，使用CMD命令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm init</span><br></pre></td></tr></table></figure>\n<p>第2步，安装依赖。</p>\n<p>这里学习一下，可以用空格隔开所有的依赖的名字，一次性安装多个：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --save nzh solarlunar pinyin</span><br></pre></td></tr></table></figure>\n<p>第3步，写app.js跑一个HelloWorld，验证引包都是正确的，没有少文件。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">\"http\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> nzh = <span class=\"built_in\">require</span>(<span class=\"string\">\"nzh\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> solarlunar = <span class=\"built_in\">require</span>(<span class=\"string\">\"solarlunar\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> pinyin = <span class=\"built_in\">require</span>(<span class=\"string\">\"pinyin\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">http.createServer(<span class=\"function\">(<span class=\"params\">req,res</span>)=&gt;</span>&#123;</span><br><span class=\"line\">\tres.end(<span class=\"string\">\"123\"</span>);</span><br><span class=\"line\">&#125;).listen(<span class=\"number\">3000</span>);</span><br></pre></td></tr></table></figure>\n<p>第4步，写app.js，得到用户的URL，并且得到里面有用的部分。</p>\n<p>这里我们使用一个新的内置模块叫做url，这个url模块有一个parse的方法，可以将url进行分解。</p>\n<p>比如url：<a href=\"http://127.0.0.1:3000/qian/123123?haha=2&amp;sex=nan\" target=\"_blank\" rel=\"noopener\">http://127.0.0.1:3000/qian/123123?haha=2&amp;sex=nan</a></p>\n<p>进行</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> url = <span class=\"built_in\">require</span>(<span class=\"string\">\"url\"</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log( url.parse(req.url) );</span><br></pre></td></tr></table></figure>\n<p><img src=\"image10.png\" alt=\"\"></p>\n<p>两个东西最有用：</p>\n<p>● pathname 就是url的主干部分</p>\n<p>● query 就是GET请求的查询参数</p>\n<p>进一步的，如果parse函数里面加上第二个参数true，此时参数query将会自动成为对象。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">url.parse(req.url , true);</span><br></pre></td></tr></table></figure>\n<p><img src=\"image11.png\" alt=\"\"></p>\n<p>第5步，进行正则模式的匹配。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http.createServer(<span class=\"function\">(<span class=\"params\">req,res</span>)=&gt;</span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//得到用户访问的地址的主干部分</span></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> pathname = url.parse(req.url , <span class=\"literal\">true</span>).pathname;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(pathname == <span class=\"string\">\"/\"</span>)&#123;</span><br><span class=\"line\">\t\tres.setHeader(<span class=\"string\">\"Content-Type\"</span> , <span class=\"string\">\"text/html;charset=UTF8\"</span>);</span><br><span class=\"line\">\t\tres.end(<span class=\"string\">\"这是首页\"</span>);</span><br><span class=\"line\">\t&#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(<span class=\"regexp\">/\\/qian\\/.+$/</span>.test(pathname))&#123;</span><br><span class=\"line\">\t\tres.setHeader(<span class=\"string\">\"Content-Type\"</span> , <span class=\"string\">\"text/html;charset=UTF8\"</span>);</span><br><span class=\"line\">\t\t<span class=\"comment\">//尝试得到qian后面的部分</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> money = pathname.match(<span class=\"regexp\">/\\/qian\\/(.+)$/</span>)[<span class=\"number\">1</span>];</span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> toMoney = nzh.toMoney(money);</span><br><span class=\"line\">\t\t<span class=\"comment\">//nzh这个包有一个特点，当你toMondy转一个不合法的输入的时候，会返回原串</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(money == toMoney)&#123;</span><br><span class=\"line\">\t\t\tres.end(<span class=\"string\">\"不合法的输入\"</span>);</span><br><span class=\"line\">\t\t&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\t\tres.end(toMoney);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;).listen(<span class=\"number\">3000</span>);</span><br></pre></td></tr></table></figure>\n<p>第6步，可以将所有的业务放到其他的文件夹中。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">\"http\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> url = <span class=\"built_in\">require</span>(<span class=\"string\">\"url\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> showqian = <span class=\"built_in\">require</span>(<span class=\"string\">\"./controllers/showqian.js\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> showriqi = <span class=\"built_in\">require</span>(<span class=\"string\">\"./controllers/showriqi.js\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> showpinyin = <span class=\"built_in\">require</span>(<span class=\"string\">\"./controllers/showpinyin.js\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">\"fs\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> server = http.createServer(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req,res</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//得到用户访问的地址的主干部分</span></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> pathname = url.parse(req.url , <span class=\"literal\">true</span>).pathname;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(pathname == <span class=\"string\">\"/\"</span>)&#123;</span><br><span class=\"line\">\t\tres.setHeader(<span class=\"string\">\"Content-Type\"</span> , <span class=\"string\">\"text/html;charset=UTF8\"</span>);</span><br><span class=\"line\">\t\tfs.readFile(<span class=\"string\">\"./public/index.html\"</span> , <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err , data</span>)</span>&#123;</span><br><span class=\"line\">\t\t\tres.end(data);</span><br><span class=\"line\">\t\t&#125;);</span><br><span class=\"line\">\t&#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(<span class=\"regexp\">/\\/qian\\/.+$/</span>.test(pathname))&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//如果URL匹配了/qian/...的模式，此时调用外部的函数</span></span><br><span class=\"line\">\t\tshowqian(res , pathname);</span><br><span class=\"line\">\t&#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(<span class=\"regexp\">/\\/riqi\\/.+$/</span>.test(pathname))&#123;</span><br><span class=\"line\">\t\tshowriqi(res , pathname);</span><br><span class=\"line\">\t&#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(<span class=\"regexp\">/\\/pinyin\\/.+$/</span>.test(pathname))&#123;</span><br><span class=\"line\">\t\tshowpinyin(res , pathname);</span><br><span class=\"line\">\t&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\tres.statusCode = <span class=\"number\">404</span>;</span><br><span class=\"line\">\t\tres.setHeader(<span class=\"string\">\"Content-Type\"</span> , <span class=\"string\">\"text/html;charset=UTF8\"</span>);</span><br><span class=\"line\">\t\tres.end(<span class=\"string\">\"&lt;h1&gt;没有这个页面&lt;/h1&gt;\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">server.listen(<span class=\"number\">3000</span>);</span><br></pre></td></tr></table></figure>\n<h1 id=\"二、淘宝CNPM镜像\"><a href=\"#二、淘宝CNPM镜像\" class=\"headerlink\" title=\"二、淘宝CNPM镜像\"></a>二、淘宝CNPM镜像</h1><p>淘宝做了一个npm的镜像，叫做cnpm。</p>\n<p>官网： npm.taobao.org</p>\n<p>特别简单复制下面的程序到CMD中按回车就行了：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure>\n<p><code>-g</code>安装表示全局安装命令行程序，安装完毕之后，我们就能在CMD中使用cnpm了。</p>\n<p><img src=\"image12.png\" alt=\"\"></p>\n<p>今后使用cnpm命令代替npm命令，比如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cnpm install --save solarlunar</span><br></pre></td></tr></table></figure>\n<h1 id=\"三、Express框架\"><a href=\"#三、Express框架\" class=\"headerlink\" title=\"三、Express框架\"></a>三、Express框架</h1><h2 id=\"3-1-整体感知\"><a href=\"#3-1-整体感知\" class=\"headerlink\" title=\"3.1 整体感知\"></a>3.1 整体感知</h2><p>做http服务的时候，不方便：</p>\n<ul>\n<li><p>匹配URL很不方便 if(//.test()){}</p>\n</li>\n<li><p>使用静态页面不方便 fs.readFile(function(err,data){res.end(data)})</p>\n</li>\n<li><p>不能静态化一个文件夹，我们想将一个文件夹中的所有文件自动拥有路由，实现不了</p>\n</li>\n<li><p>……</p>\n</li>\n</ul>\n<p><strong>Express简化了HTTP应用程序的开发。</strong></p>\n<p>官网： <a href=\"http://www.expressjs.com.cn/\" target=\"_blank\" rel=\"noopener\">http://www.expressjs.com.cn/</a></p>\n<p><img src=\"image13.png\" alt=\"\"></p>\n<p>安装依赖：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cnpm intsall --save express</span><br></pre></td></tr></table></figure>\n<p>我们用昨天的作业在express中进行一个演示：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">\"express\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> app = express();</span><br><span class=\"line\"></span><br><span class=\"line\">app.get(<span class=\"string\">\"/\"</span> , <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req,res</span>)</span>&#123;</span><br><span class=\"line\">\tres.send(<span class=\"string\">\"我是首页\"</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">app.get(<span class=\"string\">\"/qian/:shu\"</span> , <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req,res</span>)</span>&#123;</span><br><span class=\"line\">\tres.send(<span class=\"string\">\"转钱为大写，要转的钱\"</span> + req.params.shu);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">app.get(<span class=\"string\">\"/riqi/:nian/:yue/:ri\"</span> , <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req,res</span>)</span>&#123;</span><br><span class=\"line\">\tres.send(<span class=\"string\">\"客官你好，我会将这个日期转为农历：\"</span> + req.params.nian + req.params.yue + req.params.ri);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">app.get(<span class=\"string\">\"/pinyin/:word\"</span> , <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req,res</span>)</span>&#123;</span><br><span class=\"line\">\tres.send(<span class=\"string\">\"将这个词\"</span> + req.params.word + <span class=\"string\">\"转为拼音\"</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">app.listen(<span class=\"number\">3000</span>);</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-2-创建app和app的监听\"><a href=\"#3-2-创建app和app的监听\" class=\"headerlink\" title=\"3.2 创建app和app的监听\"></a>3.2 创建app和app的监听</h2><p>我们引入express之后，这个express是一个函数，这个函数可以调用创建出一个app对象。</p>\n<p>今后所有的操作都是用app对象来完成，需要注意的是，一个程序中只有一个app。也就是说express不能多次调用。</p>\n<p><strong>express程序的基本结构：</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">\"express\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> app = express();</span><br><span class=\"line\"></span><br><span class=\"line\">中间件</span><br><span class=\"line\">中间件</span><br><span class=\"line\">中间件</span><br><span class=\"line\">中间件</span><br><span class=\"line\"></span><br><span class=\"line\">app.listen(<span class=\"number\">3000</span>);</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-3-中间件\"><a href=\"#3-3-中间件\" class=\"headerlink\" title=\"3.3 中间件\"></a>3.3 中间件</h2><h3 id=\"3-3-1-动词\"><a href=\"#3-3-1-动词\" class=\"headerlink\" title=\"3.3.1 动词\"></a>3.3.1 动词</h3><p>中间件的语法：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.动词(<span class=\"string\">\"地址\"</span> , <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req,res</span>)</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>我们先说动词，它是26种HTTP请求，必须是小写字母：</p>\n<p><img src=\"image14.png\" alt=\"\"></p>\n<p>动词表示当用户用这种请求访问这个页面的时候做的事情。</p>\n<p>我们现在就可以区分出用GET请求访问首页和POST请求访问首页做不同的事情：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">\"express\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> app = express();</span><br><span class=\"line\"></span><br><span class=\"line\">app.get(<span class=\"string\">\"/\"</span> , <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req,res</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"string\">\"A\"</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">app.post(<span class=\"string\">\"/\"</span> , <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req,res</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"string\">\"B\"</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">app.listen(<span class=\"number\">3000</span>);</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-3-2-中间件的路径是自动比对主干部分\"><a href=\"#3-3-2-中间件的路径是自动比对主干部分\" class=\"headerlink\" title=\"3.3.2 中间件的路径是自动比对主干部分\"></a>3.3.2 中间件的路径是自动比对主干部分</h3><p>路径已经自动被url.parse()了，也就是说express会用用户输入的URL的主干部分来进行比对。</p>\n<p>也就是说我的中间件如果是：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.get(<span class=\"string\">\"/xinwen\"</span> , <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req,res</span>)</span>&#123;</span><br><span class=\"line\">\tres.send(<span class=\"string\">\"&lt;h1&gt;新闻频道&lt;/h1&gt;\"</span>);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>下面的URL都是合法的能够进入这个频道的：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://127.0.0.1:3000/xinwen</span><br><span class=\"line\">http://127.0.0.1:3000/xinwen/</span><br><span class=\"line\">http://127.0.0.1:3000/xinwen?id=234234</span><br><span class=\"line\">http://127.0.0.1:3000/xinwen?id=234234#234234345435234</span><br></pre></td></tr></table></figure>\n<p><img src=\"image15.png\" alt=\"\"></p>\n<h3 id=\"3-3-3-中间件可以有通配符\"><a href=\"#3-3-3-中间件可以有通配符\" class=\"headerlink\" title=\"3.3.3 中间件可以有通配符\"></a>3.3.3 中间件可以有通配符</h3><p>用<code>:</code>来表示画一个通配，要注意这里没有正则表达式的，在程序中可以通过<code>req.params.***</code>得到它。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.get(<span class=\"string\">\"/:banji/:xuehao\"</span> , <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req,res</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> banji = req.params.banji;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> xuehao = req.params.xuehao;</span><br><span class=\"line\"></span><br><span class=\"line\">\tres.send(banji + <span class=\"string\">\"班\"</span> + xuehao + <span class=\"string\">\"号\"</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>今后的编程就不用写match()和test()方法了。</p>\n<p>还有一种*的通配符，没啥用，自己看手册。</p>\n<h3 id=\"3-3-4-中间件的顺序很关键\"><a href=\"#3-3-4-中间件的顺序很关键\" class=\"headerlink\" title=\"3.3.4 中间件的顺序很关键\"></a>3.3.4 中间件的顺序很关键</h3><p>比如我们输入班级、学号查询学生信息，但是不能查询3班8号。此时一定要注意中间件的顺序。</p>\n<p>中间件一旦匹配上的路由，此时不再进行其他匹配。有一种”拦截”的感觉。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.get(<span class=\"string\">\"/3/8\"</span> , <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req,res</span>)</span>&#123;</span><br><span class=\"line\">\tres.send(<span class=\"string\">\"&lt;h1&gt;校长的儿子你也敢查！&lt;/h1&gt;\"</span>)</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">app.get(<span class=\"string\">\"/:banji/:xuehao\"</span> , <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req,res</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> banji = req.params.banji;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> xuehao = req.params.xuehao;</span><br><span class=\"line\"></span><br><span class=\"line\">\tres.send(banji + <span class=\"string\">\"班\"</span> + xuehao + <span class=\"string\">\"号\"</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-3-5-用next-放行拦截\"><a href=\"#3-3-5-用next-放行拦截\" class=\"headerlink\" title=\"3.3.5 用next()放行拦截\"></a>3.3.5 用next()放行拦截</h3><p>当一个中间件已经匹配了路径，但是自己不希望单独处理这次请求，可以用next来放行。</p>\n<p>我们做一个业务能够查询学生或者老师的信息，不管查询什么都要增加计数器的数量。此时可以单独用一个中间件写计数器，放行请求即可：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.get(<span class=\"string\">\"/chaxun/*\"</span> , <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req,res,next</span>)</span>&#123;</span><br><span class=\"line\">\tcount++;</span><br><span class=\"line\">\tnext();</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">app.get(<span class=\"string\">\"/chaxun/xuesheng/:banji/:xuehao\"</span> , <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req,res</span>)</span>&#123;</span><br><span class=\"line\">\tres.send(<span class=\"string\">\"查询\"</span> + req.params.banji + <span class=\"string\">\"班\"</span> + req.params.xuehao + <span class=\"string\">\"号\"</span> + <span class=\"string\">\"&lt;br /&gt; 共查询了\"</span> + count + <span class=\"string\">\"次\"</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">app.get(<span class=\"string\">\"/chaxun/laoshi/:gonghao\"</span> , <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req,res</span>)</span>&#123;</span><br><span class=\"line\">\tres.send(<span class=\"string\">\"查询\"</span> + req.params.gonghao + <span class=\"string\">\"工号的老师\"</span> + <span class=\"string\">\"&lt;br /&gt; 共查询了\"</span> + count + <span class=\"string\">\"次\"</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-4-输出\"><a href=\"#3-4-输出\" class=\"headerlink\" title=\"3.4 输出\"></a>3.4 输出</h2><p>● 输出可以用res.send()做输出，会自动加上utf-8。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.get(<span class=\"string\">\"/\"</span> , <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req,res</span>)</span>&#123;</span><br><span class=\"line\">\tres.send(<span class=\"string\">\"中文\"</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>● 如果输出的内容是一个JSON，此时要用res.json()来进行输出。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.get(<span class=\"string\">\"/\"</span> , <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req,res</span>)</span>&#123;</span><br><span class=\"line\">\tres.json(&#123;<span class=\"string\">\"a\"</span>:<span class=\"number\">1</span>,<span class=\"string\">\"b\"</span>:<span class=\"number\">2</span>,<span class=\"string\">\"c\"</span>:[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,&#123;<span class=\"string\">\"m\"</span>:<span class=\"number\">4</span>&#125;]&#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>● 如果输出的内容是一个JSONP，此时要用res.jsonp()来输出，此时它会自动检测callback的GET请求，并且加上圆括号的调用。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.get(<span class=\"string\">\"/\"</span> , <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req,res</span>)</span>&#123;</span><br><span class=\"line\">\tres.jsonp(&#123;<span class=\"string\">\"a\"</span>:<span class=\"number\">1</span>,<span class=\"string\">\"b\"</span>:<span class=\"number\">2</span>,<span class=\"string\">\"c\"</span>:[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,&#123;<span class=\"string\">\"m\"</span>:<span class=\"number\">4</span>&#125;]&#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p><strong>复习一下jQuery中的jsonp跨域：</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$.ajax(&#123;</span><br><span class=\"line\">\t<span class=\"string\">\"url\"</span> : <span class=\"string\">\"/?callback=?\"</span>,</span><br><span class=\"line\">\t<span class=\"string\">\"dataType\"</span> : <span class=\"string\">\"JSONP\"</span>,</span><br><span class=\"line\">\t<span class=\"string\">\"success\"</span> : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>)</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//原理</span></span><br><span class=\"line\"><span class=\"comment\">//jQuery帮我们创建了一个&lt;script&gt;标签，src是这个url，用随机的字符串替换了?</span></span><br><span class=\"line\"><span class=\"comment\">//用随机的字符串为名字创建了一个全局的函数，将success指向它</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"image16.png\" alt=\"\"></p>\n<p>● 如果输出的是一个外置页面，此时要用sendFile()这个API，注意这里必须要用绝对路径，此时我们用<strong><em>__dirname</em></strong>来进行一个拼合。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.get(<span class=\"string\">\"/\"</span> , <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req,res</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//__dirname表示当前文件所在的目录</span></span><br><span class=\"line\">\tres.sendFile(__dirname + <span class=\"string\">\"/public/a.html\"</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>● 如果想要跳转页面，用res.redirect()即可</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.get(<span class=\"string\">\"/\"</span> , <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req,res</span>)</span>&#123;</span><br><span class=\"line\">\tres.redirect(<span class=\"string\">\"http://www.163.com\"</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p><strong>复习：</strong></p>\n<p>res.send()</p>\n<p>res.sendFile()</p>\n<p>res.json()</p>\n<p>res.jsonp()</p>\n<p>res.redirect()</p>\n<h2 id=\"3-5-静态化一个文件夹\"><a href=\"#3-5-静态化一个文件夹\" class=\"headerlink\" title=\"3.5 静态化一个文件夹\"></a>3.5 静态化一个文件夹</h2><p>如果我们想让某文件夹中的所有文件自动拥有路由，此时非常简单，一句话即可：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.use(express.static(<span class=\"string\">\"public\"</span>));</span><br></pre></td></tr></table></figure>\n<p>此时将把public文件夹进行静态化。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">┣ app.js</span><br><span class=\"line\">┣ public</span><br><span class=\"line\">┃  ┣  a.html</span><br><span class=\"line\">┃  ┣  m</span><br><span class=\"line\">┃  ┃ ┣  n</span><br><span class=\"line\">┃  ┃ ┃ ┣ wangjunkai.png</span><br></pre></td></tr></table></figure>\n<p>我们在app.js中静态化public文件夹：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">\"express\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> app = express();</span><br><span class=\"line\"></span><br><span class=\"line\">app.use(express.static(<span class=\"string\">\"public\"</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">app.listen(<span class=\"number\">3000</span>);</span><br></pre></td></tr></table></figure>\n<p>此时：</p>\n<p><img src=\"image17.png\" alt=\"\"></p>\n<p><img src=\"image18.png\" alt=\"\"></p>\n<p>更进一步，如果我们不希望静态的文件夹出现在底层，而是在URL中体现public的名字，此时可用：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.use(<span class=\"string\">\"/public\"</span> , express.static(<span class=\"string\">\"public\"</span>));</span><br></pre></td></tr></table></figure>\n<p><img src=\"image19.png\" alt=\"\"></p>\n<h1 id=\"四、Express中的GET请求和POST请求参数的获得\"><a href=\"#四、Express中的GET请求和POST请求参数的获得\" class=\"headerlink\" title=\"四、Express中的GET请求和POST请求参数的获得\"></a>四、Express中的GET请求和POST请求参数的获得</h1><h2 id=\"4-1-GET请求参数的获得\"><a href=\"#4-1-GET请求参数的获得\" class=\"headerlink\" title=\"4.1 GET请求参数的获得\"></a>4.1 GET请求参数的获得</h2><p><img src=\"image20.png\" alt=\"\"></p>\n<p>GET请求参数的识别实际上就是URL地址的解析。URL解析使用内置的url模块的parse方法即可。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> url = <span class=\"built_in\">require</span>(<span class=\"string\">\"url\"</span>);</span><br><span class=\"line\">app.get(<span class=\"string\">\"/tijiao\"</span> , <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req,res</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> query = url.parse(req.url , <span class=\"literal\">true</span>).query;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"string\">\"服务器收到了前端交来的数据\"</span> , query);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p><img src=\"image21.png\" alt=\"\"></p>\n<h2 id=\"4-2-POST请求参数的获得\"><a href=\"#4-2-POST请求参数的获得\" class=\"headerlink\" title=\"4.2 POST请求参数的获得\"></a>4.2 POST请求参数的获得</h2><p>POST请求的参数携带在上行报文的报文体中。</p>\n<p>我们使用npm包formidable来识别这样的上行报文。</p>\n<p>API：<a href=\"https://www.npmjs.com/package/formidable\" target=\"_blank\" rel=\"noopener\">https://www.npmjs.com/package/formidable</a></p>\n<p>安装依赖：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cnpm intsall formidable --save</span><br></pre></td></tr></table></figure>\n<p>后台app.js识别POST请求需要使用formidable这个包。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> formidable = <span class=\"built_in\">require</span>(<span class=\"string\">'formidable'</span>);</span><br><span class=\"line\">app.post(<span class=\"string\">\"/tijiao\"</span> , <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req,res</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> form = <span class=\"keyword\">new</span> formidable.IncomingForm();</span><br><span class=\"line\"></span><br><span class=\"line\">\tform.parse(req , <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err , fields , files</span>)</span>&#123;</span><br><span class=\"line\">\t\tres.json(&#123;<span class=\"string\">\"result\"</span> : <span class=\"number\">1</span>&#125;)</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>总结一下两种请求后台怎么得到参数（伪代码）：</p>\n<p><strong>GET请求</strong> </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var url = require(&quot;url&quot;);</span><br><span class=\"line\">var query = url.parse(req.url , true).query;</span><br></pre></td></tr></table></figure>\n<p><strong>POST请求</strong> </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var formidable = require(&quot;formidable&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">app.post(&quot;/tijiao&quot; , function(req,res)&#123;</span><br><span class=\"line\">\tvar form = new formidable.IncomingForm();</span><br><span class=\"line\">\tform.parse(req , function(err , fields , files)&#123;</span><br><span class=\"line\">\t\tconsole.log(fields);</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h2 id=\"4-3-其他请求\"><a href=\"#4-3-其他请求\" class=\"headerlink\" title=\"4.3 其他请求\"></a>4.3 其他请求</h2><p>一共有26种请求，注意只有GET请求是通过URL缀<code>?</code>参数来传递参数的。其他的25种请求，都是通过上行报文来传参数的。formidable能够识别其他25种请求的参数。</p>\n<p>先说一下jQuery如何发出DELETE请求：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"string\">\"#btn3\"</span>).click(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t$.ajax(&#123;</span><br><span class=\"line\">\t\t<span class=\"string\">\"url\"</span> : <span class=\"string\">\"/tijiao\"</span> ,</span><br><span class=\"line\">\t\t<span class=\"string\">\"type\"</span> : <span class=\"string\">\"DELETE\"</span> ,</span><br><span class=\"line\">\t\t<span class=\"string\">\"data\"</span> : &#123;</span><br><span class=\"line\">\t\t\t<span class=\"string\">\"id\"</span> : <span class=\"number\">10086</span></span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t\t<span class=\"string\">\"success\"</span> : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>)</span>&#123;</span><br><span class=\"line\">\t\t\talert(data.result);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>我们的Express这样识别它：（你会发现和POST请求的处理方法是一样的，都是formidable）：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//识别DELETE请求</span></span><br><span class=\"line\">app.delete(<span class=\"string\">\"/tijiao\"</span> , <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req,res</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> form = <span class=\"keyword\">new</span> formidable.IncomingForm();</span><br><span class=\"line\">\tform.parse(req , (err , fields , files) =&gt; &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">\"服务器收到DELETE请求参数\"</span> , fields);</span><br><span class=\"line\">\t\tres.json(&#123;<span class=\"string\">\"result\"</span> : <span class=\"number\">1</span>&#125;);</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>总结一下：</p>\n<p><strong>GET请求</strong> </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var url = require(&quot;url&quot;);</span><br><span class=\"line\">var query = url.parse(req.url , true).query;</span><br></pre></td></tr></table></figure>\n<p><strong>其他请求</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var formidable = require(&quot;formidable&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">app.动词(&quot;/tijiao&quot; , function(req,res)&#123;</span><br><span class=\"line\">\tvar form = new formidable.IncomingForm();</span><br><span class=\"line\">\tform.parse(req , function(err , fields , files)&#123;</span><br><span class=\"line\">\t\tconsole.log(fields);</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h2 id=\"4-4-RESTful风格路由\"><a href=\"#4-4-RESTful风格路由\" class=\"headerlink\" title=\"4.4 RESTful风格路由\"></a>4.4 RESTful风格路由</h2><p>注意这个单词的写法：RESTful。REST是Representational State Transfer。</p>\n<p><strong>RESTful风格的路由很简单，指的是用URL表示操作的资源，用HTTP动词表示何种操作。</strong></p>\n<p>不是RESTful风格的路由：</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>事儿</th>\n<th>处理这个事儿的URL</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>增加一个学生</td>\n<td><a href=\"http://127.0.0.1/addStudent.php\" target=\"_blank\" rel=\"noopener\">http://127.0.0.1/addStudent.php</a></td>\n</tr>\n<tr>\n<td>删除一个学号为10086的学生</td>\n<td><a href=\"http://127.0.0.1/removeStudent.php?id=10086\" target=\"_blank\" rel=\"noopener\">http://127.0.0.1/removeStudent.php?id=10086</a></td>\n</tr>\n<tr>\n<td>修改一个学号为10086的学生的性别</td>\n<td><a href=\"http://127.0.0.1/updateStudent.php?id=10086&amp;sex=男\" target=\"_blank\" rel=\"noopener\">http://127.0.0.1/updateStudent.php?id=10086&amp;sex=男</a></td>\n</tr>\n<tr>\n<td>列出所有学生</td>\n<td><a href=\"http://127.0.0.1/allStudent.php\" target=\"_blank\" rel=\"noopener\">http://127.0.0.1/allStudent.php</a></td>\n</tr>\n</tbody>\n</table>\n</div>\n<p>RESTful风格的路由</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>事儿</th>\n<th>处理这个事儿的URL</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>增加一个学生</td>\n<td><a href=\"http://127.0.0.1/student\" target=\"_blank\" rel=\"noopener\">http://127.0.0.1/student</a>   （POST）</td>\n</tr>\n<tr>\n<td>删除一个学号为10086的学生</td>\n<td><a href=\"http://127.0.0.1/student/10086\" target=\"_blank\" rel=\"noopener\">http://127.0.0.1/student/10086</a>   （DELETE）</td>\n</tr>\n<tr>\n<td>修改一个学号为10086的学生的性别</td>\n<td><a href=\"http://127.0.0.1/student/10086\" target=\"_blank\" rel=\"noopener\">http://127.0.0.1/student/10086</a>   （PATCH）</td>\n</tr>\n<tr>\n<td>列出所有学生</td>\n<td><a href=\"http://127.0.0.1/student\" target=\"_blank\" rel=\"noopener\">http://127.0.0.1/student</a>   （GET）</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h1 id=\"五、做一个RESTful风格路由的TodoList\"><a href=\"#五、做一个RESTful风格路由的TodoList\" class=\"headerlink\" title=\"五、做一个RESTful风格路由的TodoList\"></a>五、做一个RESTful风格路由的TodoList</h1><p><img src=\"image22.png\" alt=\"\"></p>\n<p>创建身份证，<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm init</span><br></pre></td></tr></table></figure></p>\n<p>安装依赖</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cnpm install --save express formidable</span><br></pre></td></tr></table></figure>\n<p>先从做一个模拟数据库开始（事实上，第三节课就要学习MongoDB和mongoose）。</p>\n<p>创建db文件夹创建db.js文件：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[</span><br><span class=\"line\">\t&#123;<span class=\"attr\">\"id\"</span> : <span class=\"number\">1</span> , <span class=\"attr\">\"title\"</span> : <span class=\"string\">\"吃饭\"</span> , <span class=\"attr\">\"done\"</span> : <span class=\"literal\">false</span>&#125;,</span><br><span class=\"line\">\t&#123;<span class=\"attr\">\"id\"</span> : <span class=\"number\">2</span> , <span class=\"attr\">\"title\"</span> : <span class=\"string\">\"睡觉\"</span> , <span class=\"attr\">\"done\"</span> : <span class=\"literal\">true</span>&#125;,</span><br><span class=\"line\">\t&#123;<span class=\"attr\">\"id\"</span> : <span class=\"number\">3</span> , <span class=\"attr\">\"title\"</span> : <span class=\"string\">\"打豆豆\"</span> , <span class=\"attr\">\"done\"</span> : <span class=\"literal\">false</span>&#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n<p>创建models文件夹，里面创建todo.js的文件。</p>\n<ul>\n<li><p><strong>[这个js文件暴露所有能够操作db.js数据库文件的函数，所有对db的操作必须找它！]</strong></p>\n</li>\n<li><p><strong>[这个js文件不是中间件，和http的服务没有关系，这个文件做的是最脏最累的底层的活儿，看不清楚和全局的关系，这个js文件可以单独的进行单元测试]</strong>。</p>\n</li>\n</ul>\n<p>nodejs中内置了一个叫做path的模块，里面提供了resolve()的函数，可以智能合并__dirname和层级路径。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">\"fs\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">\"path\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//【查】列出所有的todo。结果通过回调函数返回。</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> allTodo = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">callback</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//path.resolve()表示只能合并路径。</span></span><br><span class=\"line\">\tfs.readFile(path.resolve(__dirname , <span class=\"string\">\"../db/db.js\"</span>) , <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err , data</span>)</span>&#123;</span><br><span class=\"line\">\t\tcallback(data.toString());</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//单元测试，测试查询功能：</span></span><br><span class=\"line\">allTodo(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"string\">\"哈哈读取啦\"</span> , data);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>这个todo.js的全貌：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">\"fs\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">\"path\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//文件路径</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> filepath = path.resolve(__dirname , <span class=\"string\">\"../db/db.js\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//【查】列出所有的todo。结果通过回调函数返回。</span></span><br><span class=\"line\">exports.allTodo = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">callback</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//path.resolve()表示只能合并路径。</span></span><br><span class=\"line\">\tfs.readFile(filepath , <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err , data</span>)</span>&#123;</span><br><span class=\"line\">\t\tcallback(data.toString());</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//【增】增加Todo。思路是先读取所有的Todo，往数组中push一项，然后写文件</span></span><br><span class=\"line\">exports.addTodo = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">title , callback</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//利用刚刚写好的allTodo函数读取所有todo</span></span><br><span class=\"line\">\tallTodo(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>)</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//将字符串的数组变为真的数组</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> data = <span class=\"built_in\">JSON</span>.parse(data);</span><br><span class=\"line\">\t\t<span class=\"comment\">//遍历这个数组找最大的ID，为什么要找呢？因为我们的新Todo要为当前最大id+1</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> maxid = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span> ; i &lt; data.length ; i++)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(data[i].id &gt; maxid)&#123;</span><br><span class=\"line\">\t\t\t\tmaxid = data[i].id;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">//将data中push一项</span></span><br><span class=\"line\">\t\tdata.push(&#123;<span class=\"string\">\"id\"</span> : maxid + <span class=\"number\">1</span> , <span class=\"string\">\"title\"</span> : title , <span class=\"string\">\"done\"</span> : <span class=\"literal\">false</span>&#125;);</span><br><span class=\"line\">\t\t<span class=\"comment\">//写！</span></span><br><span class=\"line\">\t\tfs.writeFile(filepath , <span class=\"built_in\">JSON</span>.stringify(data) , <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t\t\tcallback();</span><br><span class=\"line\">\t\t&#125;);</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//【删】思路是读取全部的数组，删除其中一项，然后写入文件</span></span><br><span class=\"line\">exports.removeTodo = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">id , callback</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//利用刚刚写好的allTodo函数读取所有todo</span></span><br><span class=\"line\">\tallTodo(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>)</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//将字符串的数组变为真的数组</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> data = <span class=\"built_in\">JSON</span>.parse(data);</span><br><span class=\"line\">\t\t<span class=\"comment\">//删除这个todo</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span> ; i &lt; data.length ; i++)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(data[i].id === id)&#123;</span><br><span class=\"line\">\t\t\t\tdata.splice(i , <span class=\"number\">1</span>);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">//写！</span></span><br><span class=\"line\">\t\tfs.writeFile(filepath , <span class=\"built_in\">JSON</span>.stringify(data) , <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t\t\tcallback();</span><br><span class=\"line\">\t\t&#125;);</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//【改】思路是读取全部的数组，改变其中一项，写入</span></span><br><span class=\"line\"><span class=\"comment\">//k可能是title或者是done</span></span><br><span class=\"line\">exports.updateTodo = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">id , k , v , callback</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//利用刚刚写好的allTodo函数读取所有todo</span></span><br><span class=\"line\">\tallTodo(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>)</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//将字符串的数组变为真的数组</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> data = <span class=\"built_in\">JSON</span>.parse(data);</span><br><span class=\"line\">\t\t<span class=\"comment\">//改变这个todo，遍历所有todo看看哪个todo的id和你要改的id是一样的</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span> ; i &lt; data.length ; i++)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(data[i].id === id)&#123;</span><br><span class=\"line\">\t\t\t\tdata[i][k] = v;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">//写！</span></span><br><span class=\"line\">\t\tfs.writeFile(filepath , <span class=\"built_in\">JSON</span>.stringify(data) , <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t\t\tcallback();</span><br><span class=\"line\">\t\t&#125;);</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>写app.js主文件，主要是静态化www文件夹。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">\"express\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> app = express();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//静态化www文件夹</span></span><br><span class=\"line\">app.use(express.static(<span class=\"string\">\"www\"</span>));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//监听端口</span></span><br><span class=\"line\">app.listen(<span class=\"number\">3000</span>);</span><br></pre></td></tr></table></figure>\n<p><strong>接口：就是没有界面的数据，通常是JSON或者JSONP形式</strong>。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><blockquote>\n<p>第2天课堂笔记</p>\n<p>讲师：邵山欢</p>\n<p>日期：2017年11月3日</p>\n</blockquote>\n<h1 id=\"一、作业讲解\"><a href=\"#一、作业讲解\" class=\"headerlink\" title=\"一、作业讲解\"></a>一、作业讲解</h1><p><strong>开发一个小网站，功能是：</strong></p>\n<ol>\n<li><p>网址/  ，显示对考拉老师的话（别说坏话）。</p>\n</li>\n<li><p>网址/qian/12321 ，显示人民币一万两千三百二十一块整</p>\n</li>\n<li><p>网址/riqi/1997/5/8 ，显示这一天是农历丁酉年甲子月甲子年</p>\n</li>\n<li><p>网址/pinyin/我爱鹿晗  ，显示wǒ ài lù hán</p>\n</li>\n</ol>\n<p><strong>讲一下作业：</strong></p>\n<p>第1步，创建package.json文件，使用CMD命令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm init</span><br></pre></td></tr></table></figure>\n<p>第2步，安装依赖。</p>\n<p>这里学习一下，可以用空格隔开所有的依赖的名字，一次性安装多个：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --save nzh solarlunar pinyin</span><br></pre></td></tr></table></figure>\n<p>第3步，写app.js跑一个HelloWorld，验证引包都是正确的，没有少文件。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">\"http\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> nzh = <span class=\"built_in\">require</span>(<span class=\"string\">\"nzh\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> solarlunar = <span class=\"built_in\">require</span>(<span class=\"string\">\"solarlunar\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> pinyin = <span class=\"built_in\">require</span>(<span class=\"string\">\"pinyin\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">http.createServer(<span class=\"function\">(<span class=\"params\">req,res</span>)=&gt;</span>&#123;</span><br><span class=\"line\">\tres.end(<span class=\"string\">\"123\"</span>);</span><br><span class=\"line\">&#125;).listen(<span class=\"number\">3000</span>);</span><br></pre></td></tr></table></figure>\n<p>第4步，写app.js，得到用户的URL，并且得到里面有用的部分。</p>\n<p>这里我们使用一个新的内置模块叫做url，这个url模块有一个parse的方法，可以将url进行分解。</p>\n<p>比如url：<a href=\"http://127.0.0.1:3000/qian/123123?haha=2&amp;sex=nan\" target=\"_blank\" rel=\"noopener\">http://127.0.0.1:3000/qian/123123?haha=2&amp;sex=nan</a></p>\n<p>进行</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> url = <span class=\"built_in\">require</span>(<span class=\"string\">\"url\"</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log( url.parse(req.url) );</span><br></pre></td></tr></table></figure>\n<p><img src=\"image10.png\" alt=\"\"></p>\n<p>两个东西最有用：</p>\n<p>● pathname 就是url的主干部分</p>\n<p>● query 就是GET请求的查询参数</p>\n<p>进一步的，如果parse函数里面加上第二个参数true，此时参数query将会自动成为对象。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">url.parse(req.url , true);</span><br></pre></td></tr></table></figure>\n<p><img src=\"image11.png\" alt=\"\"></p>\n<p>第5步，进行正则模式的匹配。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http.createServer(<span class=\"function\">(<span class=\"params\">req,res</span>)=&gt;</span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//得到用户访问的地址的主干部分</span></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> pathname = url.parse(req.url , <span class=\"literal\">true</span>).pathname;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(pathname == <span class=\"string\">\"/\"</span>)&#123;</span><br><span class=\"line\">\t\tres.setHeader(<span class=\"string\">\"Content-Type\"</span> , <span class=\"string\">\"text/html;charset=UTF8\"</span>);</span><br><span class=\"line\">\t\tres.end(<span class=\"string\">\"这是首页\"</span>);</span><br><span class=\"line\">\t&#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(<span class=\"regexp\">/\\/qian\\/.+$/</span>.test(pathname))&#123;</span><br><span class=\"line\">\t\tres.setHeader(<span class=\"string\">\"Content-Type\"</span> , <span class=\"string\">\"text/html;charset=UTF8\"</span>);</span><br><span class=\"line\">\t\t<span class=\"comment\">//尝试得到qian后面的部分</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> money = pathname.match(<span class=\"regexp\">/\\/qian\\/(.+)$/</span>)[<span class=\"number\">1</span>];</span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> toMoney = nzh.toMoney(money);</span><br><span class=\"line\">\t\t<span class=\"comment\">//nzh这个包有一个特点，当你toMondy转一个不合法的输入的时候，会返回原串</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(money == toMoney)&#123;</span><br><span class=\"line\">\t\t\tres.end(<span class=\"string\">\"不合法的输入\"</span>);</span><br><span class=\"line\">\t\t&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\t\tres.end(toMoney);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;).listen(<span class=\"number\">3000</span>);</span><br></pre></td></tr></table></figure>\n<p>第6步，可以将所有的业务放到其他的文件夹中。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">\"http\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> url = <span class=\"built_in\">require</span>(<span class=\"string\">\"url\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> showqian = <span class=\"built_in\">require</span>(<span class=\"string\">\"./controllers/showqian.js\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> showriqi = <span class=\"built_in\">require</span>(<span class=\"string\">\"./controllers/showriqi.js\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> showpinyin = <span class=\"built_in\">require</span>(<span class=\"string\">\"./controllers/showpinyin.js\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">\"fs\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> server = http.createServer(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req,res</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//得到用户访问的地址的主干部分</span></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> pathname = url.parse(req.url , <span class=\"literal\">true</span>).pathname;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(pathname == <span class=\"string\">\"/\"</span>)&#123;</span><br><span class=\"line\">\t\tres.setHeader(<span class=\"string\">\"Content-Type\"</span> , <span class=\"string\">\"text/html;charset=UTF8\"</span>);</span><br><span class=\"line\">\t\tfs.readFile(<span class=\"string\">\"./public/index.html\"</span> , <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err , data</span>)</span>&#123;</span><br><span class=\"line\">\t\t\tres.end(data);</span><br><span class=\"line\">\t\t&#125;);</span><br><span class=\"line\">\t&#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(<span class=\"regexp\">/\\/qian\\/.+$/</span>.test(pathname))&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//如果URL匹配了/qian/...的模式，此时调用外部的函数</span></span><br><span class=\"line\">\t\tshowqian(res , pathname);</span><br><span class=\"line\">\t&#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(<span class=\"regexp\">/\\/riqi\\/.+$/</span>.test(pathname))&#123;</span><br><span class=\"line\">\t\tshowriqi(res , pathname);</span><br><span class=\"line\">\t&#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(<span class=\"regexp\">/\\/pinyin\\/.+$/</span>.test(pathname))&#123;</span><br><span class=\"line\">\t\tshowpinyin(res , pathname);</span><br><span class=\"line\">\t&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\tres.statusCode = <span class=\"number\">404</span>;</span><br><span class=\"line\">\t\tres.setHeader(<span class=\"string\">\"Content-Type\"</span> , <span class=\"string\">\"text/html;charset=UTF8\"</span>);</span><br><span class=\"line\">\t\tres.end(<span class=\"string\">\"&lt;h1&gt;没有这个页面&lt;/h1&gt;\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">server.listen(<span class=\"number\">3000</span>);</span><br></pre></td></tr></table></figure>\n<h1 id=\"二、淘宝CNPM镜像\"><a href=\"#二、淘宝CNPM镜像\" class=\"headerlink\" title=\"二、淘宝CNPM镜像\"></a>二、淘宝CNPM镜像</h1><p>淘宝做了一个npm的镜像，叫做cnpm。</p>\n<p>官网： npm.taobao.org</p>\n<p>特别简单复制下面的程序到CMD中按回车就行了：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure>\n<p><code>-g</code>安装表示全局安装命令行程序，安装完毕之后，我们就能在CMD中使用cnpm了。</p>\n<p><img src=\"image12.png\" alt=\"\"></p>\n<p>今后使用cnpm命令代替npm命令，比如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cnpm install --save solarlunar</span><br></pre></td></tr></table></figure>\n<h1 id=\"三、Express框架\"><a href=\"#三、Express框架\" class=\"headerlink\" title=\"三、Express框架\"></a>三、Express框架</h1><h2 id=\"3-1-整体感知\"><a href=\"#3-1-整体感知\" class=\"headerlink\" title=\"3.1 整体感知\"></a>3.1 整体感知</h2><p>做http服务的时候，不方便：</p>\n<ul>\n<li><p>匹配URL很不方便 if(//.test()){}</p>\n</li>\n<li><p>使用静态页面不方便 fs.readFile(function(err,data){res.end(data)})</p>\n</li>\n<li><p>不能静态化一个文件夹，我们想将一个文件夹中的所有文件自动拥有路由，实现不了</p>\n</li>\n<li><p>……</p>\n</li>\n</ul>\n<p><strong>Express简化了HTTP应用程序的开发。</strong></p>\n<p>官网： <a href=\"http://www.expressjs.com.cn/\" target=\"_blank\" rel=\"noopener\">http://www.expressjs.com.cn/</a></p>\n<p><img src=\"image13.png\" alt=\"\"></p>\n<p>安装依赖：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cnpm intsall --save express</span><br></pre></td></tr></table></figure>\n<p>我们用昨天的作业在express中进行一个演示：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">\"express\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> app = express();</span><br><span class=\"line\"></span><br><span class=\"line\">app.get(<span class=\"string\">\"/\"</span> , <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req,res</span>)</span>&#123;</span><br><span class=\"line\">\tres.send(<span class=\"string\">\"我是首页\"</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">app.get(<span class=\"string\">\"/qian/:shu\"</span> , <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req,res</span>)</span>&#123;</span><br><span class=\"line\">\tres.send(<span class=\"string\">\"转钱为大写，要转的钱\"</span> + req.params.shu);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">app.get(<span class=\"string\">\"/riqi/:nian/:yue/:ri\"</span> , <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req,res</span>)</span>&#123;</span><br><span class=\"line\">\tres.send(<span class=\"string\">\"客官你好，我会将这个日期转为农历：\"</span> + req.params.nian + req.params.yue + req.params.ri);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">app.get(<span class=\"string\">\"/pinyin/:word\"</span> , <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req,res</span>)</span>&#123;</span><br><span class=\"line\">\tres.send(<span class=\"string\">\"将这个词\"</span> + req.params.word + <span class=\"string\">\"转为拼音\"</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">app.listen(<span class=\"number\">3000</span>);</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-2-创建app和app的监听\"><a href=\"#3-2-创建app和app的监听\" class=\"headerlink\" title=\"3.2 创建app和app的监听\"></a>3.2 创建app和app的监听</h2><p>我们引入express之后，这个express是一个函数，这个函数可以调用创建出一个app对象。</p>\n<p>今后所有的操作都是用app对象来完成，需要注意的是，一个程序中只有一个app。也就是说express不能多次调用。</p>\n<p><strong>express程序的基本结构：</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">\"express\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> app = express();</span><br><span class=\"line\"></span><br><span class=\"line\">中间件</span><br><span class=\"line\">中间件</span><br><span class=\"line\">中间件</span><br><span class=\"line\">中间件</span><br><span class=\"line\"></span><br><span class=\"line\">app.listen(<span class=\"number\">3000</span>);</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-3-中间件\"><a href=\"#3-3-中间件\" class=\"headerlink\" title=\"3.3 中间件\"></a>3.3 中间件</h2><h3 id=\"3-3-1-动词\"><a href=\"#3-3-1-动词\" class=\"headerlink\" title=\"3.3.1 动词\"></a>3.3.1 动词</h3><p>中间件的语法：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.动词(<span class=\"string\">\"地址\"</span> , <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req,res</span>)</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>我们先说动词，它是26种HTTP请求，必须是小写字母：</p>\n<p><img src=\"image14.png\" alt=\"\"></p>\n<p>动词表示当用户用这种请求访问这个页面的时候做的事情。</p>\n<p>我们现在就可以区分出用GET请求访问首页和POST请求访问首页做不同的事情：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">\"express\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> app = express();</span><br><span class=\"line\"></span><br><span class=\"line\">app.get(<span class=\"string\">\"/\"</span> , <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req,res</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"string\">\"A\"</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">app.post(<span class=\"string\">\"/\"</span> , <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req,res</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"string\">\"B\"</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">app.listen(<span class=\"number\">3000</span>);</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-3-2-中间件的路径是自动比对主干部分\"><a href=\"#3-3-2-中间件的路径是自动比对主干部分\" class=\"headerlink\" title=\"3.3.2 中间件的路径是自动比对主干部分\"></a>3.3.2 中间件的路径是自动比对主干部分</h3><p>路径已经自动被url.parse()了，也就是说express会用用户输入的URL的主干部分来进行比对。</p>\n<p>也就是说我的中间件如果是：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.get(<span class=\"string\">\"/xinwen\"</span> , <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req,res</span>)</span>&#123;</span><br><span class=\"line\">\tres.send(<span class=\"string\">\"&lt;h1&gt;新闻频道&lt;/h1&gt;\"</span>);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>下面的URL都是合法的能够进入这个频道的：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://127.0.0.1:3000/xinwen</span><br><span class=\"line\">http://127.0.0.1:3000/xinwen/</span><br><span class=\"line\">http://127.0.0.1:3000/xinwen?id=234234</span><br><span class=\"line\">http://127.0.0.1:3000/xinwen?id=234234#234234345435234</span><br></pre></td></tr></table></figure>\n<p><img src=\"image15.png\" alt=\"\"></p>\n<h3 id=\"3-3-3-中间件可以有通配符\"><a href=\"#3-3-3-中间件可以有通配符\" class=\"headerlink\" title=\"3.3.3 中间件可以有通配符\"></a>3.3.3 中间件可以有通配符</h3><p>用<code>:</code>来表示画一个通配，要注意这里没有正则表达式的，在程序中可以通过<code>req.params.***</code>得到它。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.get(<span class=\"string\">\"/:banji/:xuehao\"</span> , <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req,res</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> banji = req.params.banji;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> xuehao = req.params.xuehao;</span><br><span class=\"line\"></span><br><span class=\"line\">\tres.send(banji + <span class=\"string\">\"班\"</span> + xuehao + <span class=\"string\">\"号\"</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>今后的编程就不用写match()和test()方法了。</p>\n<p>还有一种*的通配符，没啥用，自己看手册。</p>\n<h3 id=\"3-3-4-中间件的顺序很关键\"><a href=\"#3-3-4-中间件的顺序很关键\" class=\"headerlink\" title=\"3.3.4 中间件的顺序很关键\"></a>3.3.4 中间件的顺序很关键</h3><p>比如我们输入班级、学号查询学生信息，但是不能查询3班8号。此时一定要注意中间件的顺序。</p>\n<p>中间件一旦匹配上的路由，此时不再进行其他匹配。有一种”拦截”的感觉。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.get(<span class=\"string\">\"/3/8\"</span> , <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req,res</span>)</span>&#123;</span><br><span class=\"line\">\tres.send(<span class=\"string\">\"&lt;h1&gt;校长的儿子你也敢查！&lt;/h1&gt;\"</span>)</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">app.get(<span class=\"string\">\"/:banji/:xuehao\"</span> , <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req,res</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> banji = req.params.banji;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> xuehao = req.params.xuehao;</span><br><span class=\"line\"></span><br><span class=\"line\">\tres.send(banji + <span class=\"string\">\"班\"</span> + xuehao + <span class=\"string\">\"号\"</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-3-5-用next-放行拦截\"><a href=\"#3-3-5-用next-放行拦截\" class=\"headerlink\" title=\"3.3.5 用next()放行拦截\"></a>3.3.5 用next()放行拦截</h3><p>当一个中间件已经匹配了路径，但是自己不希望单独处理这次请求，可以用next来放行。</p>\n<p>我们做一个业务能够查询学生或者老师的信息，不管查询什么都要增加计数器的数量。此时可以单独用一个中间件写计数器，放行请求即可：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.get(<span class=\"string\">\"/chaxun/*\"</span> , <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req,res,next</span>)</span>&#123;</span><br><span class=\"line\">\tcount++;</span><br><span class=\"line\">\tnext();</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">app.get(<span class=\"string\">\"/chaxun/xuesheng/:banji/:xuehao\"</span> , <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req,res</span>)</span>&#123;</span><br><span class=\"line\">\tres.send(<span class=\"string\">\"查询\"</span> + req.params.banji + <span class=\"string\">\"班\"</span> + req.params.xuehao + <span class=\"string\">\"号\"</span> + <span class=\"string\">\"&lt;br /&gt; 共查询了\"</span> + count + <span class=\"string\">\"次\"</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">app.get(<span class=\"string\">\"/chaxun/laoshi/:gonghao\"</span> , <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req,res</span>)</span>&#123;</span><br><span class=\"line\">\tres.send(<span class=\"string\">\"查询\"</span> + req.params.gonghao + <span class=\"string\">\"工号的老师\"</span> + <span class=\"string\">\"&lt;br /&gt; 共查询了\"</span> + count + <span class=\"string\">\"次\"</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-4-输出\"><a href=\"#3-4-输出\" class=\"headerlink\" title=\"3.4 输出\"></a>3.4 输出</h2><p>● 输出可以用res.send()做输出，会自动加上utf-8。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.get(<span class=\"string\">\"/\"</span> , <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req,res</span>)</span>&#123;</span><br><span class=\"line\">\tres.send(<span class=\"string\">\"中文\"</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>● 如果输出的内容是一个JSON，此时要用res.json()来进行输出。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.get(<span class=\"string\">\"/\"</span> , <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req,res</span>)</span>&#123;</span><br><span class=\"line\">\tres.json(&#123;<span class=\"string\">\"a\"</span>:<span class=\"number\">1</span>,<span class=\"string\">\"b\"</span>:<span class=\"number\">2</span>,<span class=\"string\">\"c\"</span>:[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,&#123;<span class=\"string\">\"m\"</span>:<span class=\"number\">4</span>&#125;]&#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>● 如果输出的内容是一个JSONP，此时要用res.jsonp()来输出，此时它会自动检测callback的GET请求，并且加上圆括号的调用。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.get(<span class=\"string\">\"/\"</span> , <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req,res</span>)</span>&#123;</span><br><span class=\"line\">\tres.jsonp(&#123;<span class=\"string\">\"a\"</span>:<span class=\"number\">1</span>,<span class=\"string\">\"b\"</span>:<span class=\"number\">2</span>,<span class=\"string\">\"c\"</span>:[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,&#123;<span class=\"string\">\"m\"</span>:<span class=\"number\">4</span>&#125;]&#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p><strong>复习一下jQuery中的jsonp跨域：</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$.ajax(&#123;</span><br><span class=\"line\">\t<span class=\"string\">\"url\"</span> : <span class=\"string\">\"/?callback=?\"</span>,</span><br><span class=\"line\">\t<span class=\"string\">\"dataType\"</span> : <span class=\"string\">\"JSONP\"</span>,</span><br><span class=\"line\">\t<span class=\"string\">\"success\"</span> : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>)</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//原理</span></span><br><span class=\"line\"><span class=\"comment\">//jQuery帮我们创建了一个&lt;script&gt;标签，src是这个url，用随机的字符串替换了?</span></span><br><span class=\"line\"><span class=\"comment\">//用随机的字符串为名字创建了一个全局的函数，将success指向它</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"image16.png\" alt=\"\"></p>\n<p>● 如果输出的是一个外置页面，此时要用sendFile()这个API，注意这里必须要用绝对路径，此时我们用<strong><em>__dirname</em></strong>来进行一个拼合。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.get(<span class=\"string\">\"/\"</span> , <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req,res</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//__dirname表示当前文件所在的目录</span></span><br><span class=\"line\">\tres.sendFile(__dirname + <span class=\"string\">\"/public/a.html\"</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>● 如果想要跳转页面，用res.redirect()即可</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.get(<span class=\"string\">\"/\"</span> , <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req,res</span>)</span>&#123;</span><br><span class=\"line\">\tres.redirect(<span class=\"string\">\"http://www.163.com\"</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p><strong>复习：</strong></p>\n<p>res.send()</p>\n<p>res.sendFile()</p>\n<p>res.json()</p>\n<p>res.jsonp()</p>\n<p>res.redirect()</p>\n<h2 id=\"3-5-静态化一个文件夹\"><a href=\"#3-5-静态化一个文件夹\" class=\"headerlink\" title=\"3.5 静态化一个文件夹\"></a>3.5 静态化一个文件夹</h2><p>如果我们想让某文件夹中的所有文件自动拥有路由，此时非常简单，一句话即可：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.use(express.static(<span class=\"string\">\"public\"</span>));</span><br></pre></td></tr></table></figure>\n<p>此时将把public文件夹进行静态化。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">┣ app.js</span><br><span class=\"line\">┣ public</span><br><span class=\"line\">┃  ┣  a.html</span><br><span class=\"line\">┃  ┣  m</span><br><span class=\"line\">┃  ┃ ┣  n</span><br><span class=\"line\">┃  ┃ ┃ ┣ wangjunkai.png</span><br></pre></td></tr></table></figure>\n<p>我们在app.js中静态化public文件夹：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">\"express\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> app = express();</span><br><span class=\"line\"></span><br><span class=\"line\">app.use(express.static(<span class=\"string\">\"public\"</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">app.listen(<span class=\"number\">3000</span>);</span><br></pre></td></tr></table></figure>\n<p>此时：</p>\n<p><img src=\"image17.png\" alt=\"\"></p>\n<p><img src=\"image18.png\" alt=\"\"></p>\n<p>更进一步，如果我们不希望静态的文件夹出现在底层，而是在URL中体现public的名字，此时可用：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.use(<span class=\"string\">\"/public\"</span> , express.static(<span class=\"string\">\"public\"</span>));</span><br></pre></td></tr></table></figure>\n<p><img src=\"image19.png\" alt=\"\"></p>\n<h1 id=\"四、Express中的GET请求和POST请求参数的获得\"><a href=\"#四、Express中的GET请求和POST请求参数的获得\" class=\"headerlink\" title=\"四、Express中的GET请求和POST请求参数的获得\"></a>四、Express中的GET请求和POST请求参数的获得</h1><h2 id=\"4-1-GET请求参数的获得\"><a href=\"#4-1-GET请求参数的获得\" class=\"headerlink\" title=\"4.1 GET请求参数的获得\"></a>4.1 GET请求参数的获得</h2><p><img src=\"image20.png\" alt=\"\"></p>\n<p>GET请求参数的识别实际上就是URL地址的解析。URL解析使用内置的url模块的parse方法即可。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> url = <span class=\"built_in\">require</span>(<span class=\"string\">\"url\"</span>);</span><br><span class=\"line\">app.get(<span class=\"string\">\"/tijiao\"</span> , <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req,res</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> query = url.parse(req.url , <span class=\"literal\">true</span>).query;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"string\">\"服务器收到了前端交来的数据\"</span> , query);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p><img src=\"image21.png\" alt=\"\"></p>\n<h2 id=\"4-2-POST请求参数的获得\"><a href=\"#4-2-POST请求参数的获得\" class=\"headerlink\" title=\"4.2 POST请求参数的获得\"></a>4.2 POST请求参数的获得</h2><p>POST请求的参数携带在上行报文的报文体中。</p>\n<p>我们使用npm包formidable来识别这样的上行报文。</p>\n<p>API：<a href=\"https://www.npmjs.com/package/formidable\" target=\"_blank\" rel=\"noopener\">https://www.npmjs.com/package/formidable</a></p>\n<p>安装依赖：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cnpm intsall formidable --save</span><br></pre></td></tr></table></figure>\n<p>后台app.js识别POST请求需要使用formidable这个包。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> formidable = <span class=\"built_in\">require</span>(<span class=\"string\">'formidable'</span>);</span><br><span class=\"line\">app.post(<span class=\"string\">\"/tijiao\"</span> , <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req,res</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> form = <span class=\"keyword\">new</span> formidable.IncomingForm();</span><br><span class=\"line\"></span><br><span class=\"line\">\tform.parse(req , <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err , fields , files</span>)</span>&#123;</span><br><span class=\"line\">\t\tres.json(&#123;<span class=\"string\">\"result\"</span> : <span class=\"number\">1</span>&#125;)</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>总结一下两种请求后台怎么得到参数（伪代码）：</p>\n<p><strong>GET请求</strong> </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var url = require(&quot;url&quot;);</span><br><span class=\"line\">var query = url.parse(req.url , true).query;</span><br></pre></td></tr></table></figure>\n<p><strong>POST请求</strong> </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var formidable = require(&quot;formidable&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">app.post(&quot;/tijiao&quot; , function(req,res)&#123;</span><br><span class=\"line\">\tvar form = new formidable.IncomingForm();</span><br><span class=\"line\">\tform.parse(req , function(err , fields , files)&#123;</span><br><span class=\"line\">\t\tconsole.log(fields);</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h2 id=\"4-3-其他请求\"><a href=\"#4-3-其他请求\" class=\"headerlink\" title=\"4.3 其他请求\"></a>4.3 其他请求</h2><p>一共有26种请求，注意只有GET请求是通过URL缀<code>?</code>参数来传递参数的。其他的25种请求，都是通过上行报文来传参数的。formidable能够识别其他25种请求的参数。</p>\n<p>先说一下jQuery如何发出DELETE请求：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"string\">\"#btn3\"</span>).click(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t$.ajax(&#123;</span><br><span class=\"line\">\t\t<span class=\"string\">\"url\"</span> : <span class=\"string\">\"/tijiao\"</span> ,</span><br><span class=\"line\">\t\t<span class=\"string\">\"type\"</span> : <span class=\"string\">\"DELETE\"</span> ,</span><br><span class=\"line\">\t\t<span class=\"string\">\"data\"</span> : &#123;</span><br><span class=\"line\">\t\t\t<span class=\"string\">\"id\"</span> : <span class=\"number\">10086</span></span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t\t<span class=\"string\">\"success\"</span> : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>)</span>&#123;</span><br><span class=\"line\">\t\t\talert(data.result);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>我们的Express这样识别它：（你会发现和POST请求的处理方法是一样的，都是formidable）：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//识别DELETE请求</span></span><br><span class=\"line\">app.delete(<span class=\"string\">\"/tijiao\"</span> , <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req,res</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> form = <span class=\"keyword\">new</span> formidable.IncomingForm();</span><br><span class=\"line\">\tform.parse(req , (err , fields , files) =&gt; &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">\"服务器收到DELETE请求参数\"</span> , fields);</span><br><span class=\"line\">\t\tres.json(&#123;<span class=\"string\">\"result\"</span> : <span class=\"number\">1</span>&#125;);</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>总结一下：</p>\n<p><strong>GET请求</strong> </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var url = require(&quot;url&quot;);</span><br><span class=\"line\">var query = url.parse(req.url , true).query;</span><br></pre></td></tr></table></figure>\n<p><strong>其他请求</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var formidable = require(&quot;formidable&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">app.动词(&quot;/tijiao&quot; , function(req,res)&#123;</span><br><span class=\"line\">\tvar form = new formidable.IncomingForm();</span><br><span class=\"line\">\tform.parse(req , function(err , fields , files)&#123;</span><br><span class=\"line\">\t\tconsole.log(fields);</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h2 id=\"4-4-RESTful风格路由\"><a href=\"#4-4-RESTful风格路由\" class=\"headerlink\" title=\"4.4 RESTful风格路由\"></a>4.4 RESTful风格路由</h2><p>注意这个单词的写法：RESTful。REST是Representational State Transfer。</p>\n<p><strong>RESTful风格的路由很简单，指的是用URL表示操作的资源，用HTTP动词表示何种操作。</strong></p>\n<p>不是RESTful风格的路由：</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>事儿</th>\n<th>处理这个事儿的URL</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>增加一个学生</td>\n<td><a href=\"http://127.0.0.1/addStudent.php\" target=\"_blank\" rel=\"noopener\">http://127.0.0.1/addStudent.php</a></td>\n</tr>\n<tr>\n<td>删除一个学号为10086的学生</td>\n<td><a href=\"http://127.0.0.1/removeStudent.php?id=10086\" target=\"_blank\" rel=\"noopener\">http://127.0.0.1/removeStudent.php?id=10086</a></td>\n</tr>\n<tr>\n<td>修改一个学号为10086的学生的性别</td>\n<td><a href=\"http://127.0.0.1/updateStudent.php?id=10086&amp;sex=男\" target=\"_blank\" rel=\"noopener\">http://127.0.0.1/updateStudent.php?id=10086&amp;sex=男</a></td>\n</tr>\n<tr>\n<td>列出所有学生</td>\n<td><a href=\"http://127.0.0.1/allStudent.php\" target=\"_blank\" rel=\"noopener\">http://127.0.0.1/allStudent.php</a></td>\n</tr>\n</tbody>\n</table>\n</div>\n<p>RESTful风格的路由</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>事儿</th>\n<th>处理这个事儿的URL</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>增加一个学生</td>\n<td><a href=\"http://127.0.0.1/student\" target=\"_blank\" rel=\"noopener\">http://127.0.0.1/student</a>   （POST）</td>\n</tr>\n<tr>\n<td>删除一个学号为10086的学生</td>\n<td><a href=\"http://127.0.0.1/student/10086\" target=\"_blank\" rel=\"noopener\">http://127.0.0.1/student/10086</a>   （DELETE）</td>\n</tr>\n<tr>\n<td>修改一个学号为10086的学生的性别</td>\n<td><a href=\"http://127.0.0.1/student/10086\" target=\"_blank\" rel=\"noopener\">http://127.0.0.1/student/10086</a>   （PATCH）</td>\n</tr>\n<tr>\n<td>列出所有学生</td>\n<td><a href=\"http://127.0.0.1/student\" target=\"_blank\" rel=\"noopener\">http://127.0.0.1/student</a>   （GET）</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h1 id=\"五、做一个RESTful风格路由的TodoList\"><a href=\"#五、做一个RESTful风格路由的TodoList\" class=\"headerlink\" title=\"五、做一个RESTful风格路由的TodoList\"></a>五、做一个RESTful风格路由的TodoList</h1><p><img src=\"image22.png\" alt=\"\"></p>\n<p>创建身份证，<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm init</span><br></pre></td></tr></table></figure></p>\n<p>安装依赖</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cnpm install --save express formidable</span><br></pre></td></tr></table></figure>\n<p>先从做一个模拟数据库开始（事实上，第三节课就要学习MongoDB和mongoose）。</p>\n<p>创建db文件夹创建db.js文件：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[</span><br><span class=\"line\">\t&#123;<span class=\"attr\">\"id\"</span> : <span class=\"number\">1</span> , <span class=\"attr\">\"title\"</span> : <span class=\"string\">\"吃饭\"</span> , <span class=\"attr\">\"done\"</span> : <span class=\"literal\">false</span>&#125;,</span><br><span class=\"line\">\t&#123;<span class=\"attr\">\"id\"</span> : <span class=\"number\">2</span> , <span class=\"attr\">\"title\"</span> : <span class=\"string\">\"睡觉\"</span> , <span class=\"attr\">\"done\"</span> : <span class=\"literal\">true</span>&#125;,</span><br><span class=\"line\">\t&#123;<span class=\"attr\">\"id\"</span> : <span class=\"number\">3</span> , <span class=\"attr\">\"title\"</span> : <span class=\"string\">\"打豆豆\"</span> , <span class=\"attr\">\"done\"</span> : <span class=\"literal\">false</span>&#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n<p>创建models文件夹，里面创建todo.js的文件。</p>\n<ul>\n<li><p><strong>[这个js文件暴露所有能够操作db.js数据库文件的函数，所有对db的操作必须找它！]</strong></p>\n</li>\n<li><p><strong>[这个js文件不是中间件，和http的服务没有关系，这个文件做的是最脏最累的底层的活儿，看不清楚和全局的关系，这个js文件可以单独的进行单元测试]</strong>。</p>\n</li>\n</ul>\n<p>nodejs中内置了一个叫做path的模块，里面提供了resolve()的函数，可以智能合并__dirname和层级路径。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">\"fs\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">\"path\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//【查】列出所有的todo。结果通过回调函数返回。</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> allTodo = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">callback</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//path.resolve()表示只能合并路径。</span></span><br><span class=\"line\">\tfs.readFile(path.resolve(__dirname , <span class=\"string\">\"../db/db.js\"</span>) , <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err , data</span>)</span>&#123;</span><br><span class=\"line\">\t\tcallback(data.toString());</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//单元测试，测试查询功能：</span></span><br><span class=\"line\">allTodo(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"string\">\"哈哈读取啦\"</span> , data);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>这个todo.js的全貌：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">\"fs\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">\"path\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//文件路径</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> filepath = path.resolve(__dirname , <span class=\"string\">\"../db/db.js\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//【查】列出所有的todo。结果通过回调函数返回。</span></span><br><span class=\"line\">exports.allTodo = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">callback</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//path.resolve()表示只能合并路径。</span></span><br><span class=\"line\">\tfs.readFile(filepath , <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err , data</span>)</span>&#123;</span><br><span class=\"line\">\t\tcallback(data.toString());</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//【增】增加Todo。思路是先读取所有的Todo，往数组中push一项，然后写文件</span></span><br><span class=\"line\">exports.addTodo = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">title , callback</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//利用刚刚写好的allTodo函数读取所有todo</span></span><br><span class=\"line\">\tallTodo(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>)</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//将字符串的数组变为真的数组</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> data = <span class=\"built_in\">JSON</span>.parse(data);</span><br><span class=\"line\">\t\t<span class=\"comment\">//遍历这个数组找最大的ID，为什么要找呢？因为我们的新Todo要为当前最大id+1</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> maxid = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span> ; i &lt; data.length ; i++)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(data[i].id &gt; maxid)&#123;</span><br><span class=\"line\">\t\t\t\tmaxid = data[i].id;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">//将data中push一项</span></span><br><span class=\"line\">\t\tdata.push(&#123;<span class=\"string\">\"id\"</span> : maxid + <span class=\"number\">1</span> , <span class=\"string\">\"title\"</span> : title , <span class=\"string\">\"done\"</span> : <span class=\"literal\">false</span>&#125;);</span><br><span class=\"line\">\t\t<span class=\"comment\">//写！</span></span><br><span class=\"line\">\t\tfs.writeFile(filepath , <span class=\"built_in\">JSON</span>.stringify(data) , <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t\t\tcallback();</span><br><span class=\"line\">\t\t&#125;);</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//【删】思路是读取全部的数组，删除其中一项，然后写入文件</span></span><br><span class=\"line\">exports.removeTodo = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">id , callback</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//利用刚刚写好的allTodo函数读取所有todo</span></span><br><span class=\"line\">\tallTodo(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>)</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//将字符串的数组变为真的数组</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> data = <span class=\"built_in\">JSON</span>.parse(data);</span><br><span class=\"line\">\t\t<span class=\"comment\">//删除这个todo</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span> ; i &lt; data.length ; i++)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(data[i].id === id)&#123;</span><br><span class=\"line\">\t\t\t\tdata.splice(i , <span class=\"number\">1</span>);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">//写！</span></span><br><span class=\"line\">\t\tfs.writeFile(filepath , <span class=\"built_in\">JSON</span>.stringify(data) , <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t\t\tcallback();</span><br><span class=\"line\">\t\t&#125;);</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//【改】思路是读取全部的数组，改变其中一项，写入</span></span><br><span class=\"line\"><span class=\"comment\">//k可能是title或者是done</span></span><br><span class=\"line\">exports.updateTodo = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">id , k , v , callback</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//利用刚刚写好的allTodo函数读取所有todo</span></span><br><span class=\"line\">\tallTodo(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>)</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//将字符串的数组变为真的数组</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> data = <span class=\"built_in\">JSON</span>.parse(data);</span><br><span class=\"line\">\t\t<span class=\"comment\">//改变这个todo，遍历所有todo看看哪个todo的id和你要改的id是一样的</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span> ; i &lt; data.length ; i++)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(data[i].id === id)&#123;</span><br><span class=\"line\">\t\t\t\tdata[i][k] = v;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">//写！</span></span><br><span class=\"line\">\t\tfs.writeFile(filepath , <span class=\"built_in\">JSON</span>.stringify(data) , <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t\t\tcallback();</span><br><span class=\"line\">\t\t&#125;);</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>写app.js主文件，主要是静态化www文件夹。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">\"express\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> app = express();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//静态化www文件夹</span></span><br><span class=\"line\">app.use(express.static(<span class=\"string\">\"www\"</span>));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//监听端口</span></span><br><span class=\"line\">app.listen(<span class=\"number\">3000</span>);</span><br></pre></td></tr></table></figure>\n<p><strong>接口：就是没有界面的数据，通常是JSON或者JSONP形式</strong>。</p>\n"},{"title":"Node.js入门和企业级项目开发03","mathjax":false,"typora-root-url":"nodejs03","typora-copy-images-to":"nodejs03","abbrlink":1479802669,"date":"2018-11-17T15:58:47.000Z","updated":"2018-11-17T15:58:47.000Z","_content":"\n\n\n# 前言\n\n> 第3天课堂笔记\n>\n> 讲师：邵山欢\n>\n> 日期：2017年11月6日\n\n# 复习\n\n**先说一下，工作的时候关于nodejs有两种情况：**\n\n1.  直接找关于nodejs的工作，此时99%是在写HTTP业务。不会让你去写nodejs内核。\n\n    现在企业需要的人就是能够加班、有超强学习能力。刚刚过去的两天，Vue出了2.5、Angular出了5。\n\n    ![](image2.png)\n\n2.  在开发vue（40%市场份额）、react（60%市场份额）的时候，使用nodejs的工作流工作，比如gulp、grunt、yeoman、webpack等等。最常见的，就是用nodejs做路由层。\n\n\n\n项目的后台现在80%以上仍然是PHP、ASP、JSP，因为nodejs是单线程的脚本程序，无法撼动老牌后台服务器语言的。PHP、ASP、JSP是绝对不会找前端去写接口的。\n\n\n\n**复习一些知识点：**\n\n* nodejs不是一个语言，是一个平台。js是语言。和PHP + Apache不同，nodejs即是语言的承接平台又是提供http服务的平台。\n\n\n* nodejs的安装，跨操作系统的，我们写的代码在任何的操作系统中都能运行。但是要装不同的nodejs环境。\n\n\n* nodejs没有根目录，得用http和fs共同配合做顶层路由设计，在原生的开发中，通常用：\n\n  ```javascript\n  var server = http.createServer(function(req,res){\n  \tif(req.url == \"\"){\n  \n  \t}else if(req.url == \"\"){\n  \n  \t}\n  });\n  ```\n\n*  npm要会用，模块的使用。\n\n\n* Express简化了http程序的开发：\n\n  ```javascript\n  var express = require(\"exprss\");\n  var app = express();\n  \n  app.get(\"/\" , function(req,res){\n  \tres.send(\"<h1>你好</h1>\")\n  });\n  \n  app.listen(3000);\n  ```\n\n*  GET请求和POST请求\n\n  ```javascript\n  app.get(\"/\" , function(req,res){\n  \tvar id = url.parse(req.url , true).query.id;\n  \tres.send(\"<h1>你好</h1>\");\n  });\n  \n  app.post(\"/\" , function(req,res){\n  \tvar form = new formidable.IncomingForm();\n  \tform.parse(req , function(err , fields , files){\n  \n  \t});\n  });\n  ```\n\n*   params：\n\n  ```javascript\n  app.get(\"/:xuehao\" , function(req,res){\n  \tvar xuehao = req.params.xuehao;\n  \tres.send(\"<h1>你好</h1>\");\n  });\n  ```\n\n  \n\n# 二、TodoList的深入学习\n\n## 2.1 复习\n\n我们有了db.js这个模拟数据库之后，接下来写了一个todo.js的文件，里面有4个函数是操作db.js的。\n\n此时我们说db.js文件是**可被预测状态的（predictable）**。\n\n说A文件可被预测状态：\n\n1.  **清晰性**：对A文件的所有操作，都罗列出函数了；\n\n2.  **私有性**：对A对象的操作，必须通过这些函数；\n\n3.  **灵活性**：对A的操作可以任意插拔，删除一个函数就去掉了一种操作，增加一个函数就增加一个操作。\n\n\n\nnodejs中的所有的关于文件的操作，都是异步的。比如：\n\n```javascript\nfs.readFile();\nfs.writeFile();\nfs.appendFile();\n```\n\n所以他们都提供了回调函数：\n\n```javascript\nfs.write(filepath , function(err , data){\n\n});\n```\n\n\n\n**如果再把这个异步函数封装成一个函数，外层函数要接受一个callback回调函数，当fs的readFile执行完毕之后，调用callback通过实参将data传出去**。\n\n```javascript\nfunction read(callback){\n\tfs.write(filepath , function(err , data){\n\t\tcallback(JSON.parse(data.toString()));\n\t});\n}\n\nread(function(jsonobj){\n\tconsole.log(jsonobj);\n});\n```\n\n\n\n**RESTful接口：**\n\n| 功能         | URL地址    | 请求   |\n| ------------ | ---------- | ------ |\n| 增加TodO     | /todo      | POST   |\n| 列出TODO     | /todo      | GET    |\n| 更改TODO顺序 | /todo      | MOVE   |\n| 删除TODO     | /todo/id号 | DELETE |\n| 更改TODO     | /todo/id号 | PATCH  |\n\n\n\n我们将app.js中的中间件的function(req,res)都挪出去：\n\n```javascript\nvar express = require(\"express\");\nvar app = express();\n\n//引入控制器\nvar mainctrl = require(\"./controllers/mainctrl.js\");\n//静态化www文件夹\napp.use(express.static(\"www\"));\n\n//罗列中间件\napp.get(\"/todo\"  \t\t, mainctrl.showTodo);\t\t//列出所有的todo\napp.post(\"/todo\" \t\t, mainctrl.addTodo);\t\t//增加todo\napp.delete(\"/todo/:id\"  , mainctrl.removeTodo); \t//删除todo\napp.patch(\"/todo/:id\" \t, mainctrl.updateTodo); \t//更改todo\napp.move(\"/todo\" \t\t, mainctrl.moveTodo);\t\t//更改TODO的顺序\n\n//监听端口\napp.listen(3000);\n```\n\n控制器controllers/mainctrl.js:\n\n```javascript\nvar formidable = require(\"formidable\");\n//引入苦工（就是我们的model）\nvar todo = require(\"../models/todo.js\");\n\n//列出所有todo\nexports.showTodo = function(req,res){\n\t//当用户访问/todo命令苦工读取数据库\n\ttodo.allTodo(function(data){\n\t\t//呈递在页面上\n\t\tres.json({\"results\" : data});\n\t});\n}\n\n//增加todo\nexports.addTodo = function(req,res){\n\t//识别用户传入的title\n\tvar form = new formidable.IncomingForm();\n\n\tform.parse(req , function(err , fields , files){\n\t\tvar title = fields.title;\n\t\ttodo.addTodo(title , function(){\n\t\t\tres.json({\"result\" : 1});\n\t\t})\n\t});\n}\n\n//删除todo\nexports.removeTodo = function(req,res){\n\tvar id = req.params.id;\n\n\t//命令苦工删除\n\ttodo.removeTodo(id , function(){\n\t\tres.json({\"result\" : 1});\n\t});\n}\n\n\n//更改todo\nexports.updateTodo = function(req,res){\n\tvar id = req.params.id;\n\n\tvar form = new formidable.IncomingForm();\n\n\tform.parse(req , function(err , fields , files){\n\t\t//命令苦工删除\n\t\ttodo.updateTodo(id , fields.k , fields.v , function(){\n\t\t\tres.json({\"result\" : 1});\n\t\t});\n\t});\n}\n\n\n//移动todo\nexports.moveTodo =  function(req,res){\n\tvar form = new formidable.IncomingForm();\n\n\tform.parse(req , function(err , fields , files){\n\t\tvar startidx = fields.startidx;\n\t\tvar endidx = fields.endidx;\n\n\t\t//命令苦工更改顺序\n\t\ttodo.moveTodo(startidx , endidx , function(){\n\t\t\tres.json({\"result\" : 1});\n\t\t});\n\t});\n}\n```\n\n\n\n## 2.2 MVC架构\n\n**MVC、MVVM不是设计模式，而是代码的架构模式**。\n\n-   **设计模式**比如中介者模式、发布订阅模式、装饰器模式等等，他们解决的是偶尔性问题，类和类中间怎么一起工作；\n\n-   **代码的架构**模式是编程的时候文件的组织的模式。\n\n**MVC全名是Model View Controller，是模型(model)－视图(view)－控制器(controller)的缩写。**\n\n-   **Model（模型）**是应用程序中用于处理应用程序数据逻辑的部分。通常模型对象负责在数据库中存取数据。\n\n-   **View（视图）**是应用程序中处理数据显示的部分。通常视图是依据模型数据创建的。\n\n-   **Controller（控制器）**是应用程序中处理用户交互的部分。通常控制器负责从视图读取数据，控制用户输入，并向模型发送数据。\n\n![](image3.png)\n\nMVC的一个图示：\n\n![IMG\\_256](image4.jpeg)\n\n\n\n# 三、MongoDB\n\n## 3.1 NoSQL简介\n\n之前学习的是SQL（structure query language ， 结构化查询语言）。**SQL数据库有一个最大特点：限制每一个字段的类型。**\n\n![](image5.png)\n\n比如id现在是数字类型，但是突然间国家开放成人本科，此时学校说学号要以CR打头，你就傻了，因为id必须是数字。**现在我们要修改字段类型，时间耗费很多，因为所有已经存在的条目要跟着一起修改**。**如果要增加列，更是灾难，因为所有已经存在的条目都要跟着一起修改**。\n\n\n\nNoSQL（非结构化数据库，Not Only SQL）应运而生。\n\n下面的数据就是合法的4条NoSQL数据：\n\n```\n{\"id\":10001 , \"name\":\"小明\" , \"age\" : 12 , \"sex\" : \"男\"}\n{\"id\":10002 , \"name\":\"小强\" , \"age\" : 13 , \"sex\" : \"男\"}\n{\"id\":10003 , \"name\":\"小吕\" , \"age\" : 14 , \"sex\" : \"女\"}\n{\"id\":\"CR10001\" , \"name\":\"小钢炮\" , \"age\" : 44 , \"sex\" : \"男\",\"score\":560}\n```\n\n每个字段都不限制类型，id可以是数字，然后突然间变为字符串是合法的；也可以增加字段。\n\n|       | 优点                                                         | 缺点                                                 |\n| ----- | ------------------------------------------------------------ | ---------------------------------------------------- |\n| SQL   | 适合复杂的查找、查询很迅速                                   | 限制了字段的类型、表格一旦确定不容易更改表格的形态。 |\n| NoSQL | 不限制字段类型，数据条目每一条都可以有不同的字段，便于修改表格的形态。 | 不适合复杂的查找、查询不迅速                         |\n\n\n\n## 3.2 MongoDB数据库的安装\n\n官网：https://www.mongodb.com/\n\n![](image6.png)\n\n下载之后：\n\n![](image7.png)\n\n注意系统是64位的同学，学习mongodb3.0.6，32位的同学只能安装2代。\n\n![](image8.png)\n\n![](image9.png)\n\n现在要把bin这个文件夹设置为系统的环境变量。\n\n![](image10.png)\n\n一路确定之后，就可以打开CMD：\n\n![](image11.png)\n\n输入：\n\n```\nmongo -version\n```\n\n可以查看mongo数据库的版本号了，说明安装成功。\n\n\n\n## 3.3 数据库的开机mongod\n\n开启数据库我们称作\"开机\"。\n\n首先需要在c盘创建一个database文件夹。然后打开CMD输入：\n\n```\nmongod --dbpath c:\\database\n```\n\nmongo**d**负责开机。读作\"芒果第\"。\n\n`--dbpath`表示设置数据库的存放目录。\n\n![](image12.png)\n\n如果能够在CMD的最后一行看见：waiting for connections on port 27017\n\n说明开机成功。\n\n\n\n**注意，必须事先安装了windows补丁KB2731284，如果没有安装这个补丁，数据库将开机失败。**\n\n怎么知道自己是不是安装了这个补丁呢？\n\n```\nsysteminfo\n```\n\n![](image13.png)\n\n如果就是跑不成功，此时尝试用管理员模式打开CMD：\n\n![](image14.png)\n\n如果还是开不了，就换为2.0.6版本即可。\n\n\n\n## 3.4 简单的数据库操作mongo\n\nMongoDB有可视化管理软件，叫做MongoBooster，前期我们先用CMD来管理。\n\n使用数据库之前要先用mongod开机，然后此CMD不能关闭，再次打开一个窗口，用mongo命令进入REPL环境。\n\nbin文件夹中两个工具：\n\n| 工具名字        | 负责的事情     |\n| --------------- | -------------- |\n| mongod.exe      | 负责开机       |\n| mongo.exe       | 负责管理数据库 |\n| mongoimport.exe | 负责导入数据   |\n| mongoexport.exe | 负责导出数据   |\n\n\n![](image15.png)\n\n\n\n**数据库**用use来**创建**，比如创建一个学生管理数据库：\n\n```\n> use xsgl\n```\n\n这个叫做使用数据库，只不过当这个数据库不存在的时候，系统自动帮你创建。\n\n创建完数据库之后，要创建一个\"表格\"叫做banji0716，\"表格\"在MongoDB中称为\"集合\"。\n\n集合不用刻意创建，只需要在集合中插入一条数据，集合自动创建。\n\n**插入数据**的语法：\n\n```\n> db.banji0716.insert({\"id\":10001,\"name\":\"小明\",\"age\":12,\"sex\":\"男\"});\n```\n\n数据库中的数据就是JSON。\n\n![](image16.png)\n\n\n\n查看集合中的全部数据，用\n\n```\n> db.banji0716.find()\n```\n\n![](image17.png)\n\n\n\n查看0716班所有男生：\n\n```\n> db.banji0716.find({\"sex\":\"男\"});\n```\n\n\n\n查看0716班所有大于15岁的男生：\n\n```\n> db.banji0716.find({\"sex\":\"男\" , \"age\" : {\"$gt\" : 15}});\n```\n\n\n\n查看0716班所有大于15岁的男生或者小于17岁的女生：\n\n```\n> db.banji0716.find({\"$or\" : [{\"sex\":\"男\",\"age\":{\"$gt\":15}},{\"sex\":\"女\",\"age\":{\"$lt\":17}}]});\n```\n\n也就是说NoSQL的CRUD（增删改查）操作，一律不使用SQL。\n\n\n\n原来的SQL现在不用了：\n\n```sql\nSELECT * FROM banji0716 WHERE (sex = \"男\" AND age > 13) OR (sex = \"女\" AND age < 17)\n```\n\n\n\n查看已经有的数据库\n\n```\n> show dbs\n```\n\n![](image18.png)\n\n\n\n需要注意的是：数据库中必须有一条数据之后，才能被创建。\n\n\n\n删除数据库（实现要use 一个数据库）\n\n```\n> db.dropDatabase()\n```\n\n\n\n查看已有集合：\n\n```\n> show collections\n```\n\n\n\n删除集合：\n\n```\n> db.banji0716.drop()\n```\n\n\n\n删除一个条目：\n\n```\n> db.banji0716.remove({\"id\":\"CR10001\"})\n```\n\n\n\n## 3.5 数据的导入(mongoimport)和导出(mongoexport)\n\n先开机，但是不要进入REPL环境！\n\n**数据导入**：\n\n在桌面上准备一个数据.txt\n\n```json\n{\"id\":10001 , \"name\":\"小明\" , \"age\" : 12 , \"sex\" : \"男\"}\n{\"id\":10002 , \"name\":\"小强\" , \"age\" : 13 , \"sex\" : \"男\"}\n{\"id\":10003 , \"name\":\"小吕\" , \"age\" : 14 , \"sex\" : \"女\"}\n{\"id\":\"CR10001\" , \"name\":\"小钢炮\" , \"age\" : 44 , \"sex\" : \"男\",\"score\":560}\n```\n\n使用CMD命令：\n\n```bash\nmongoimport -d xsgl -c banji0716 C:\\Users\\Danny\\Desktop\\数据.txt --drop\n```\n\n`-d`表示选择database数据库\n\n`-c`表示选择collection集合（表）\n\n`--drop`表示删除这个集合中已经有的数据\n\n\n\n**导出数据**：\n\n```\nmongoexport -d xsgl -c banji0716 -o c:\\beifen.txt\n```\n\n\n\n## 3.6 使用mongobooster可视化数据库管理软件\n\n![](image19.png)\n\n\n\n\n# 四、NodeJS操作MongoDB（非重点）\n\n> 因为一会儿我们就要讲解Mongoose，将颠覆这里的知识。\n>\n> 手册：https://docs.mongodb.com/ecosystem/drivers/node-js/\n>\n> 或者：https://www.npmjs.com/package/mongodb\n\n\n\n## 4.1 连接数据库\n\n安装依赖\n\n```\ncnpm install --save mongodb\n```\n\n用mongod开启数据库之后，写app.js:\n\n```javascript\nvar MongoClient = require('mongodb').MongoClient;\n\n//数据库的地址，最末尾的斜杠是数据库的名字\nvar url = 'mongodb://localhost:27017/xsgl';\n\nMongoClient.connect(url, function(err, db) {\n\tif(!err){\n\t\tconsole.log(\"数据库连接成功\");\n\t}else{\n\t\tconsole.log(\"数据库连接失败\");\n\t\treturn;\n\t}\n});\n```\n\n\n\n运行node app.js即可。\n\n![](image20.png)\n\n\n\n## 4.2 查询和增加操作\n\n```javascript\nvar MongoClient = require('mongodb').MongoClient;\n\n//数据库的地址，最末尾的斜杠是数据库的名字\nvar url = 'mongodb://localhost:27017/xsgl';\n\n//连接数据库\nMongoClient.connect(url, function(err, db) {\n\tif(!err){\n\t\tconsole.log(\"数据库连接成功\");\n\t}else{\n\t\tconsole.log(\"数据库连接失败\");\n\t\treturn;\n\t}\n\t\n\n\t//查询\n\t// db.collection(\"banji0716\").find({}).toArray(function(err , docs){\n\t// \tconsole.log(docs);\n\t// });\n\n\t//增加\n\tdb.collection(\"banji0716\").insert({\"name\":\"小张\",\"age\":7},function(err){\n\t\tif(!err){\n\t\t\tconsole.log(\"插入成功\");\n\t\t}\n\t});\n\t\n});\n```\n\n**原生nodejs操作mongodb问题很多：**\n\n1.  语法形式上大的回调函数太大了，要包裹所有的代码，甚至要包裹express的中间件；\n\n2.  不利于MVC编程，我们几乎不能将所有对数据库的操作封装到一个文件中。\n\n\n\n\n\n# 五、Mongoose\n\nMongoose简化了nodejs对nodejs的操作。\n\nmongoose是nodejs中的model那个文件。\n    \n![](image21.png)\n\n\n\n## 5.1 基本使用\n\n安装\n\n```\ncnpm install --save mongoose\n```\n\n\n\n两步走：\n\n![](image22.png)\n\n我们首先创建一个models的文件夹，创建一个Student.js的构造函数：\n\n```javascript\nvar mongoose = require(\"mongoose\");\n\n//创建schema\nvar studentSchema = new mongoose.Schema({\n\t\"xuehao\" \t: Number, \n\t\"xingming\" \t: String,\n\t\"age\" \t\t: Number,\n\t\"sex\" \t\t: String\n});\n\n//通过schema创建model\nvar Student = mongoose.model(\"Student\" , studentSchema);\n\n//暴露\nmodule.exports = Student;\n```\n\n然后创建app.js:\n\n```javascript\nvar mongoose = require('mongoose');\n\n//连接数据库\nmongoose.connect('mongodb://localhost/xsgl');\n\n//连接我们的model\nvar Student = require(\"./models/Student.js\");\n\n//实例化一个Student类的实例：\nvar xiaoming = new Student({\n\t\"xuehao\" : 10001 ,\n\t\"age\" : 12,\n\t\"sex\" : \"男\",\n\t\"xingming\" : \"小明\"\n});\n\n//调用它的save方法即可放到数据库中持久\nxiaoming.save(function(err){\n\tif(err){\n\t\tconsole.log(\"保存失败\");\n\t}else{\n\t\tconsole.log(\"保存成功\");\n\t}\n});\n```\n\n\n\n集合就是students，会被自动加上复数s：\n\n![](image23.png)\n\n\n\n你创建model的时候：\n\n```javascript\nvar Student = mongoose.model(\"Student\" , studentSchema);\n```\n\n它将会自动将开头字母变为小心，末尾加s作为集合名字。\n\n\n\n## 5.2 增\n\n**注意，mongoose牛逼之处在于，schema、model一旦写好了，再也不用改**！\n\n方法1：（实例化，然后save）\n\n```javascript\nvar xiaohong = new Student({\n\t\"xuehao\" \t: 10002, \n\t\"xingming\" \t: \"小红\",\n\t\"age\" \t\t: 9,\n\t\"sex\" \t\t: \"女\"\n});\n\nxiaohong.save((err)=>{\n\t!err && console.log(\"成功\");\n});\n```\n\n\n\n方法2：（直接调用create）\n\n```javascript\nStudent.create({\n\t\"xuehao\" \t: 10003, \n\t\"xingming\" \t: \"小花\",\n\t\"age\" \t\t: 5,\n\t\"sex\" \t\t: \"女\"\n},(err)=>{\n\t!err && console.log(\"成功\");\n});\n```\n\n\n\n## 5.3 删\n\n方法1（先找到这个人，然后remove）：\n\n```javascript\nStudent.find({\"xingming\" : \"小红\"} , function(err , results){\n\tvar zhegeren = results[0];\n\tzhegeren.remove((err)=>{\n\t\t!err && console.log(\"成功\");\n\t});\n});\n```\n\n\n\n方法2（直接remove）：\n\n```javascript\nStudent.remove({\"xingming\" : \"小花\"} , (err)=>{\n\t!err && console.log(\"成功\");\n});\n```\n\n\n\n## 5.4 改\n\n方法1（找到，改了，然后save）\n\n```javascript\nStudent.find({\"xingming\" : \"小明\"} , function(err , results){\n\tvar thepeople = results[0];\n\n\tthepeople.sex = \"女\";\n\n\tthepeople.save((err)=>{\n\t\t!err && console.log(\"成功\");\n\t});\n});\n```\n\n\n\n方法2（直接改）：\n\n```javascript\nStudent.update({\"xingming\" : \"小明\"} , {\"$set\" : {\"age\" : 99}} , function(err){\n\t!err && console.log(\"成功\");\n});\n```\n\n\n\n语法：\n\n```javascript\nStudent.update(改变谁 , {\"$set\" : 怎么改} , function(err){\n\t!err && console.log(\"成功\");\n});\n```\n\n\n\n## 5.5 查\n\n```javascript\nStudent.find({\"xingming\" : \"小红\"} , function(err , results){\n\n});\n```\n\n\n\n# 六、Mongoose小案例 - 小小调查问卷表单\n\n**我们设计三个题目：**\n\n【单选题】双十一你最期待的事情：商场打折、淘宝购物节、单身狗过节啦\n\n【多选题】双十一你想买的东西：零食、衣服、电子产品、美容产品\n\n【数字题】你预算花费：range条，10块 \\~ 20000块\n\n我们现在从前端、nodejs服务端、数据库，都是JavaScript语境！数据库也是JOSN！所以数组不会变形！\n\n\n\n**统计集合中有多少数据：**\n\n```\n> db.surveys.count()\n```\n\n\n\n存储数据库特别简单：\n\n```javascript\n//中间件\napp.post(\"/tijiao\" , function(req,res){\n\tvar form = new formidable.IncomingForm();\n\tform.parse(req , function(err , fields){\n\t\tSurvey.create({\n\t\t\t\"timu1\" : fields.timu1 ,\n\t\t\t\"timu2\" : fields.timu2 ,\n\t\t\t\"timu3\" : fields.timu3 ,\n\t\t\t\"date\" : new Date()\n\t\t},function(err){\n\t\t\tres.json({\"result\" : err ? -1 : 1});\n\t\t});\n\t});\n});\n```\n\n数据可视化：http://echarts.baidu.com/demo.html#pie-simple\n\n\n\n","source":"_posts/Dev/nodejs/nodejs03.md","raw":"---\ntitle: Node.js入门和企业级项目开发03\nmathjax: false\ntypora-root-url: nodejs03\ntypora-copy-images-to: nodejs03\ncategories:\n  - nodejs\nabbrlink: 1479802669\ndate: 2018-11-17 23:58:47\nupdated: 2018-11-17 23:58:47\ntags:\n---\n\n\n\n# 前言\n\n> 第3天课堂笔记\n>\n> 讲师：邵山欢\n>\n> 日期：2017年11月6日\n\n# 复习\n\n**先说一下，工作的时候关于nodejs有两种情况：**\n\n1.  直接找关于nodejs的工作，此时99%是在写HTTP业务。不会让你去写nodejs内核。\n\n    现在企业需要的人就是能够加班、有超强学习能力。刚刚过去的两天，Vue出了2.5、Angular出了5。\n\n    ![](image2.png)\n\n2.  在开发vue（40%市场份额）、react（60%市场份额）的时候，使用nodejs的工作流工作，比如gulp、grunt、yeoman、webpack等等。最常见的，就是用nodejs做路由层。\n\n\n\n项目的后台现在80%以上仍然是PHP、ASP、JSP，因为nodejs是单线程的脚本程序，无法撼动老牌后台服务器语言的。PHP、ASP、JSP是绝对不会找前端去写接口的。\n\n\n\n**复习一些知识点：**\n\n* nodejs不是一个语言，是一个平台。js是语言。和PHP + Apache不同，nodejs即是语言的承接平台又是提供http服务的平台。\n\n\n* nodejs的安装，跨操作系统的，我们写的代码在任何的操作系统中都能运行。但是要装不同的nodejs环境。\n\n\n* nodejs没有根目录，得用http和fs共同配合做顶层路由设计，在原生的开发中，通常用：\n\n  ```javascript\n  var server = http.createServer(function(req,res){\n  \tif(req.url == \"\"){\n  \n  \t}else if(req.url == \"\"){\n  \n  \t}\n  });\n  ```\n\n*  npm要会用，模块的使用。\n\n\n* Express简化了http程序的开发：\n\n  ```javascript\n  var express = require(\"exprss\");\n  var app = express();\n  \n  app.get(\"/\" , function(req,res){\n  \tres.send(\"<h1>你好</h1>\")\n  });\n  \n  app.listen(3000);\n  ```\n\n*  GET请求和POST请求\n\n  ```javascript\n  app.get(\"/\" , function(req,res){\n  \tvar id = url.parse(req.url , true).query.id;\n  \tres.send(\"<h1>你好</h1>\");\n  });\n  \n  app.post(\"/\" , function(req,res){\n  \tvar form = new formidable.IncomingForm();\n  \tform.parse(req , function(err , fields , files){\n  \n  \t});\n  });\n  ```\n\n*   params：\n\n  ```javascript\n  app.get(\"/:xuehao\" , function(req,res){\n  \tvar xuehao = req.params.xuehao;\n  \tres.send(\"<h1>你好</h1>\");\n  });\n  ```\n\n  \n\n# 二、TodoList的深入学习\n\n## 2.1 复习\n\n我们有了db.js这个模拟数据库之后，接下来写了一个todo.js的文件，里面有4个函数是操作db.js的。\n\n此时我们说db.js文件是**可被预测状态的（predictable）**。\n\n说A文件可被预测状态：\n\n1.  **清晰性**：对A文件的所有操作，都罗列出函数了；\n\n2.  **私有性**：对A对象的操作，必须通过这些函数；\n\n3.  **灵活性**：对A的操作可以任意插拔，删除一个函数就去掉了一种操作，增加一个函数就增加一个操作。\n\n\n\nnodejs中的所有的关于文件的操作，都是异步的。比如：\n\n```javascript\nfs.readFile();\nfs.writeFile();\nfs.appendFile();\n```\n\n所以他们都提供了回调函数：\n\n```javascript\nfs.write(filepath , function(err , data){\n\n});\n```\n\n\n\n**如果再把这个异步函数封装成一个函数，外层函数要接受一个callback回调函数，当fs的readFile执行完毕之后，调用callback通过实参将data传出去**。\n\n```javascript\nfunction read(callback){\n\tfs.write(filepath , function(err , data){\n\t\tcallback(JSON.parse(data.toString()));\n\t});\n}\n\nread(function(jsonobj){\n\tconsole.log(jsonobj);\n});\n```\n\n\n\n**RESTful接口：**\n\n| 功能         | URL地址    | 请求   |\n| ------------ | ---------- | ------ |\n| 增加TodO     | /todo      | POST   |\n| 列出TODO     | /todo      | GET    |\n| 更改TODO顺序 | /todo      | MOVE   |\n| 删除TODO     | /todo/id号 | DELETE |\n| 更改TODO     | /todo/id号 | PATCH  |\n\n\n\n我们将app.js中的中间件的function(req,res)都挪出去：\n\n```javascript\nvar express = require(\"express\");\nvar app = express();\n\n//引入控制器\nvar mainctrl = require(\"./controllers/mainctrl.js\");\n//静态化www文件夹\napp.use(express.static(\"www\"));\n\n//罗列中间件\napp.get(\"/todo\"  \t\t, mainctrl.showTodo);\t\t//列出所有的todo\napp.post(\"/todo\" \t\t, mainctrl.addTodo);\t\t//增加todo\napp.delete(\"/todo/:id\"  , mainctrl.removeTodo); \t//删除todo\napp.patch(\"/todo/:id\" \t, mainctrl.updateTodo); \t//更改todo\napp.move(\"/todo\" \t\t, mainctrl.moveTodo);\t\t//更改TODO的顺序\n\n//监听端口\napp.listen(3000);\n```\n\n控制器controllers/mainctrl.js:\n\n```javascript\nvar formidable = require(\"formidable\");\n//引入苦工（就是我们的model）\nvar todo = require(\"../models/todo.js\");\n\n//列出所有todo\nexports.showTodo = function(req,res){\n\t//当用户访问/todo命令苦工读取数据库\n\ttodo.allTodo(function(data){\n\t\t//呈递在页面上\n\t\tres.json({\"results\" : data});\n\t});\n}\n\n//增加todo\nexports.addTodo = function(req,res){\n\t//识别用户传入的title\n\tvar form = new formidable.IncomingForm();\n\n\tform.parse(req , function(err , fields , files){\n\t\tvar title = fields.title;\n\t\ttodo.addTodo(title , function(){\n\t\t\tres.json({\"result\" : 1});\n\t\t})\n\t});\n}\n\n//删除todo\nexports.removeTodo = function(req,res){\n\tvar id = req.params.id;\n\n\t//命令苦工删除\n\ttodo.removeTodo(id , function(){\n\t\tres.json({\"result\" : 1});\n\t});\n}\n\n\n//更改todo\nexports.updateTodo = function(req,res){\n\tvar id = req.params.id;\n\n\tvar form = new formidable.IncomingForm();\n\n\tform.parse(req , function(err , fields , files){\n\t\t//命令苦工删除\n\t\ttodo.updateTodo(id , fields.k , fields.v , function(){\n\t\t\tres.json({\"result\" : 1});\n\t\t});\n\t});\n}\n\n\n//移动todo\nexports.moveTodo =  function(req,res){\n\tvar form = new formidable.IncomingForm();\n\n\tform.parse(req , function(err , fields , files){\n\t\tvar startidx = fields.startidx;\n\t\tvar endidx = fields.endidx;\n\n\t\t//命令苦工更改顺序\n\t\ttodo.moveTodo(startidx , endidx , function(){\n\t\t\tres.json({\"result\" : 1});\n\t\t});\n\t});\n}\n```\n\n\n\n## 2.2 MVC架构\n\n**MVC、MVVM不是设计模式，而是代码的架构模式**。\n\n-   **设计模式**比如中介者模式、发布订阅模式、装饰器模式等等，他们解决的是偶尔性问题，类和类中间怎么一起工作；\n\n-   **代码的架构**模式是编程的时候文件的组织的模式。\n\n**MVC全名是Model View Controller，是模型(model)－视图(view)－控制器(controller)的缩写。**\n\n-   **Model（模型）**是应用程序中用于处理应用程序数据逻辑的部分。通常模型对象负责在数据库中存取数据。\n\n-   **View（视图）**是应用程序中处理数据显示的部分。通常视图是依据模型数据创建的。\n\n-   **Controller（控制器）**是应用程序中处理用户交互的部分。通常控制器负责从视图读取数据，控制用户输入，并向模型发送数据。\n\n![](image3.png)\n\nMVC的一个图示：\n\n![IMG\\_256](image4.jpeg)\n\n\n\n# 三、MongoDB\n\n## 3.1 NoSQL简介\n\n之前学习的是SQL（structure query language ， 结构化查询语言）。**SQL数据库有一个最大特点：限制每一个字段的类型。**\n\n![](image5.png)\n\n比如id现在是数字类型，但是突然间国家开放成人本科，此时学校说学号要以CR打头，你就傻了，因为id必须是数字。**现在我们要修改字段类型，时间耗费很多，因为所有已经存在的条目要跟着一起修改**。**如果要增加列，更是灾难，因为所有已经存在的条目都要跟着一起修改**。\n\n\n\nNoSQL（非结构化数据库，Not Only SQL）应运而生。\n\n下面的数据就是合法的4条NoSQL数据：\n\n```\n{\"id\":10001 , \"name\":\"小明\" , \"age\" : 12 , \"sex\" : \"男\"}\n{\"id\":10002 , \"name\":\"小强\" , \"age\" : 13 , \"sex\" : \"男\"}\n{\"id\":10003 , \"name\":\"小吕\" , \"age\" : 14 , \"sex\" : \"女\"}\n{\"id\":\"CR10001\" , \"name\":\"小钢炮\" , \"age\" : 44 , \"sex\" : \"男\",\"score\":560}\n```\n\n每个字段都不限制类型，id可以是数字，然后突然间变为字符串是合法的；也可以增加字段。\n\n|       | 优点                                                         | 缺点                                                 |\n| ----- | ------------------------------------------------------------ | ---------------------------------------------------- |\n| SQL   | 适合复杂的查找、查询很迅速                                   | 限制了字段的类型、表格一旦确定不容易更改表格的形态。 |\n| NoSQL | 不限制字段类型，数据条目每一条都可以有不同的字段，便于修改表格的形态。 | 不适合复杂的查找、查询不迅速                         |\n\n\n\n## 3.2 MongoDB数据库的安装\n\n官网：https://www.mongodb.com/\n\n![](image6.png)\n\n下载之后：\n\n![](image7.png)\n\n注意系统是64位的同学，学习mongodb3.0.6，32位的同学只能安装2代。\n\n![](image8.png)\n\n![](image9.png)\n\n现在要把bin这个文件夹设置为系统的环境变量。\n\n![](image10.png)\n\n一路确定之后，就可以打开CMD：\n\n![](image11.png)\n\n输入：\n\n```\nmongo -version\n```\n\n可以查看mongo数据库的版本号了，说明安装成功。\n\n\n\n## 3.3 数据库的开机mongod\n\n开启数据库我们称作\"开机\"。\n\n首先需要在c盘创建一个database文件夹。然后打开CMD输入：\n\n```\nmongod --dbpath c:\\database\n```\n\nmongo**d**负责开机。读作\"芒果第\"。\n\n`--dbpath`表示设置数据库的存放目录。\n\n![](image12.png)\n\n如果能够在CMD的最后一行看见：waiting for connections on port 27017\n\n说明开机成功。\n\n\n\n**注意，必须事先安装了windows补丁KB2731284，如果没有安装这个补丁，数据库将开机失败。**\n\n怎么知道自己是不是安装了这个补丁呢？\n\n```\nsysteminfo\n```\n\n![](image13.png)\n\n如果就是跑不成功，此时尝试用管理员模式打开CMD：\n\n![](image14.png)\n\n如果还是开不了，就换为2.0.6版本即可。\n\n\n\n## 3.4 简单的数据库操作mongo\n\nMongoDB有可视化管理软件，叫做MongoBooster，前期我们先用CMD来管理。\n\n使用数据库之前要先用mongod开机，然后此CMD不能关闭，再次打开一个窗口，用mongo命令进入REPL环境。\n\nbin文件夹中两个工具：\n\n| 工具名字        | 负责的事情     |\n| --------------- | -------------- |\n| mongod.exe      | 负责开机       |\n| mongo.exe       | 负责管理数据库 |\n| mongoimport.exe | 负责导入数据   |\n| mongoexport.exe | 负责导出数据   |\n\n\n![](image15.png)\n\n\n\n**数据库**用use来**创建**，比如创建一个学生管理数据库：\n\n```\n> use xsgl\n```\n\n这个叫做使用数据库，只不过当这个数据库不存在的时候，系统自动帮你创建。\n\n创建完数据库之后，要创建一个\"表格\"叫做banji0716，\"表格\"在MongoDB中称为\"集合\"。\n\n集合不用刻意创建，只需要在集合中插入一条数据，集合自动创建。\n\n**插入数据**的语法：\n\n```\n> db.banji0716.insert({\"id\":10001,\"name\":\"小明\",\"age\":12,\"sex\":\"男\"});\n```\n\n数据库中的数据就是JSON。\n\n![](image16.png)\n\n\n\n查看集合中的全部数据，用\n\n```\n> db.banji0716.find()\n```\n\n![](image17.png)\n\n\n\n查看0716班所有男生：\n\n```\n> db.banji0716.find({\"sex\":\"男\"});\n```\n\n\n\n查看0716班所有大于15岁的男生：\n\n```\n> db.banji0716.find({\"sex\":\"男\" , \"age\" : {\"$gt\" : 15}});\n```\n\n\n\n查看0716班所有大于15岁的男生或者小于17岁的女生：\n\n```\n> db.banji0716.find({\"$or\" : [{\"sex\":\"男\",\"age\":{\"$gt\":15}},{\"sex\":\"女\",\"age\":{\"$lt\":17}}]});\n```\n\n也就是说NoSQL的CRUD（增删改查）操作，一律不使用SQL。\n\n\n\n原来的SQL现在不用了：\n\n```sql\nSELECT * FROM banji0716 WHERE (sex = \"男\" AND age > 13) OR (sex = \"女\" AND age < 17)\n```\n\n\n\n查看已经有的数据库\n\n```\n> show dbs\n```\n\n![](image18.png)\n\n\n\n需要注意的是：数据库中必须有一条数据之后，才能被创建。\n\n\n\n删除数据库（实现要use 一个数据库）\n\n```\n> db.dropDatabase()\n```\n\n\n\n查看已有集合：\n\n```\n> show collections\n```\n\n\n\n删除集合：\n\n```\n> db.banji0716.drop()\n```\n\n\n\n删除一个条目：\n\n```\n> db.banji0716.remove({\"id\":\"CR10001\"})\n```\n\n\n\n## 3.5 数据的导入(mongoimport)和导出(mongoexport)\n\n先开机，但是不要进入REPL环境！\n\n**数据导入**：\n\n在桌面上准备一个数据.txt\n\n```json\n{\"id\":10001 , \"name\":\"小明\" , \"age\" : 12 , \"sex\" : \"男\"}\n{\"id\":10002 , \"name\":\"小强\" , \"age\" : 13 , \"sex\" : \"男\"}\n{\"id\":10003 , \"name\":\"小吕\" , \"age\" : 14 , \"sex\" : \"女\"}\n{\"id\":\"CR10001\" , \"name\":\"小钢炮\" , \"age\" : 44 , \"sex\" : \"男\",\"score\":560}\n```\n\n使用CMD命令：\n\n```bash\nmongoimport -d xsgl -c banji0716 C:\\Users\\Danny\\Desktop\\数据.txt --drop\n```\n\n`-d`表示选择database数据库\n\n`-c`表示选择collection集合（表）\n\n`--drop`表示删除这个集合中已经有的数据\n\n\n\n**导出数据**：\n\n```\nmongoexport -d xsgl -c banji0716 -o c:\\beifen.txt\n```\n\n\n\n## 3.6 使用mongobooster可视化数据库管理软件\n\n![](image19.png)\n\n\n\n\n# 四、NodeJS操作MongoDB（非重点）\n\n> 因为一会儿我们就要讲解Mongoose，将颠覆这里的知识。\n>\n> 手册：https://docs.mongodb.com/ecosystem/drivers/node-js/\n>\n> 或者：https://www.npmjs.com/package/mongodb\n\n\n\n## 4.1 连接数据库\n\n安装依赖\n\n```\ncnpm install --save mongodb\n```\n\n用mongod开启数据库之后，写app.js:\n\n```javascript\nvar MongoClient = require('mongodb').MongoClient;\n\n//数据库的地址，最末尾的斜杠是数据库的名字\nvar url = 'mongodb://localhost:27017/xsgl';\n\nMongoClient.connect(url, function(err, db) {\n\tif(!err){\n\t\tconsole.log(\"数据库连接成功\");\n\t}else{\n\t\tconsole.log(\"数据库连接失败\");\n\t\treturn;\n\t}\n});\n```\n\n\n\n运行node app.js即可。\n\n![](image20.png)\n\n\n\n## 4.2 查询和增加操作\n\n```javascript\nvar MongoClient = require('mongodb').MongoClient;\n\n//数据库的地址，最末尾的斜杠是数据库的名字\nvar url = 'mongodb://localhost:27017/xsgl';\n\n//连接数据库\nMongoClient.connect(url, function(err, db) {\n\tif(!err){\n\t\tconsole.log(\"数据库连接成功\");\n\t}else{\n\t\tconsole.log(\"数据库连接失败\");\n\t\treturn;\n\t}\n\t\n\n\t//查询\n\t// db.collection(\"banji0716\").find({}).toArray(function(err , docs){\n\t// \tconsole.log(docs);\n\t// });\n\n\t//增加\n\tdb.collection(\"banji0716\").insert({\"name\":\"小张\",\"age\":7},function(err){\n\t\tif(!err){\n\t\t\tconsole.log(\"插入成功\");\n\t\t}\n\t});\n\t\n});\n```\n\n**原生nodejs操作mongodb问题很多：**\n\n1.  语法形式上大的回调函数太大了，要包裹所有的代码，甚至要包裹express的中间件；\n\n2.  不利于MVC编程，我们几乎不能将所有对数据库的操作封装到一个文件中。\n\n\n\n\n\n# 五、Mongoose\n\nMongoose简化了nodejs对nodejs的操作。\n\nmongoose是nodejs中的model那个文件。\n    \n![](image21.png)\n\n\n\n## 5.1 基本使用\n\n安装\n\n```\ncnpm install --save mongoose\n```\n\n\n\n两步走：\n\n![](image22.png)\n\n我们首先创建一个models的文件夹，创建一个Student.js的构造函数：\n\n```javascript\nvar mongoose = require(\"mongoose\");\n\n//创建schema\nvar studentSchema = new mongoose.Schema({\n\t\"xuehao\" \t: Number, \n\t\"xingming\" \t: String,\n\t\"age\" \t\t: Number,\n\t\"sex\" \t\t: String\n});\n\n//通过schema创建model\nvar Student = mongoose.model(\"Student\" , studentSchema);\n\n//暴露\nmodule.exports = Student;\n```\n\n然后创建app.js:\n\n```javascript\nvar mongoose = require('mongoose');\n\n//连接数据库\nmongoose.connect('mongodb://localhost/xsgl');\n\n//连接我们的model\nvar Student = require(\"./models/Student.js\");\n\n//实例化一个Student类的实例：\nvar xiaoming = new Student({\n\t\"xuehao\" : 10001 ,\n\t\"age\" : 12,\n\t\"sex\" : \"男\",\n\t\"xingming\" : \"小明\"\n});\n\n//调用它的save方法即可放到数据库中持久\nxiaoming.save(function(err){\n\tif(err){\n\t\tconsole.log(\"保存失败\");\n\t}else{\n\t\tconsole.log(\"保存成功\");\n\t}\n});\n```\n\n\n\n集合就是students，会被自动加上复数s：\n\n![](image23.png)\n\n\n\n你创建model的时候：\n\n```javascript\nvar Student = mongoose.model(\"Student\" , studentSchema);\n```\n\n它将会自动将开头字母变为小心，末尾加s作为集合名字。\n\n\n\n## 5.2 增\n\n**注意，mongoose牛逼之处在于，schema、model一旦写好了，再也不用改**！\n\n方法1：（实例化，然后save）\n\n```javascript\nvar xiaohong = new Student({\n\t\"xuehao\" \t: 10002, \n\t\"xingming\" \t: \"小红\",\n\t\"age\" \t\t: 9,\n\t\"sex\" \t\t: \"女\"\n});\n\nxiaohong.save((err)=>{\n\t!err && console.log(\"成功\");\n});\n```\n\n\n\n方法2：（直接调用create）\n\n```javascript\nStudent.create({\n\t\"xuehao\" \t: 10003, \n\t\"xingming\" \t: \"小花\",\n\t\"age\" \t\t: 5,\n\t\"sex\" \t\t: \"女\"\n},(err)=>{\n\t!err && console.log(\"成功\");\n});\n```\n\n\n\n## 5.3 删\n\n方法1（先找到这个人，然后remove）：\n\n```javascript\nStudent.find({\"xingming\" : \"小红\"} , function(err , results){\n\tvar zhegeren = results[0];\n\tzhegeren.remove((err)=>{\n\t\t!err && console.log(\"成功\");\n\t});\n});\n```\n\n\n\n方法2（直接remove）：\n\n```javascript\nStudent.remove({\"xingming\" : \"小花\"} , (err)=>{\n\t!err && console.log(\"成功\");\n});\n```\n\n\n\n## 5.4 改\n\n方法1（找到，改了，然后save）\n\n```javascript\nStudent.find({\"xingming\" : \"小明\"} , function(err , results){\n\tvar thepeople = results[0];\n\n\tthepeople.sex = \"女\";\n\n\tthepeople.save((err)=>{\n\t\t!err && console.log(\"成功\");\n\t});\n});\n```\n\n\n\n方法2（直接改）：\n\n```javascript\nStudent.update({\"xingming\" : \"小明\"} , {\"$set\" : {\"age\" : 99}} , function(err){\n\t!err && console.log(\"成功\");\n});\n```\n\n\n\n语法：\n\n```javascript\nStudent.update(改变谁 , {\"$set\" : 怎么改} , function(err){\n\t!err && console.log(\"成功\");\n});\n```\n\n\n\n## 5.5 查\n\n```javascript\nStudent.find({\"xingming\" : \"小红\"} , function(err , results){\n\n});\n```\n\n\n\n# 六、Mongoose小案例 - 小小调查问卷表单\n\n**我们设计三个题目：**\n\n【单选题】双十一你最期待的事情：商场打折、淘宝购物节、单身狗过节啦\n\n【多选题】双十一你想买的东西：零食、衣服、电子产品、美容产品\n\n【数字题】你预算花费：range条，10块 \\~ 20000块\n\n我们现在从前端、nodejs服务端、数据库，都是JavaScript语境！数据库也是JOSN！所以数组不会变形！\n\n\n\n**统计集合中有多少数据：**\n\n```\n> db.surveys.count()\n```\n\n\n\n存储数据库特别简单：\n\n```javascript\n//中间件\napp.post(\"/tijiao\" , function(req,res){\n\tvar form = new formidable.IncomingForm();\n\tform.parse(req , function(err , fields){\n\t\tSurvey.create({\n\t\t\t\"timu1\" : fields.timu1 ,\n\t\t\t\"timu2\" : fields.timu2 ,\n\t\t\t\"timu3\" : fields.timu3 ,\n\t\t\t\"date\" : new Date()\n\t\t},function(err){\n\t\t\tres.json({\"result\" : err ? -1 : 1});\n\t\t});\n\t});\n});\n```\n\n数据可视化：http://echarts.baidu.com/demo.html#pie-simple\n\n\n\n","slug":"Dev/nodejs/nodejs03","published":1,"_id":"cjoncnbro000v2gfia3vc7ha1","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><blockquote>\n<p>第3天课堂笔记</p>\n<p>讲师：邵山欢</p>\n<p>日期：2017年11月6日</p>\n</blockquote>\n<h1 id=\"复习\"><a href=\"#复习\" class=\"headerlink\" title=\"复习\"></a>复习</h1><p><strong>先说一下，工作的时候关于nodejs有两种情况：</strong></p>\n<ol>\n<li><p>直接找关于nodejs的工作，此时99%是在写HTTP业务。不会让你去写nodejs内核。</p>\n<p>现在企业需要的人就是能够加班、有超强学习能力。刚刚过去的两天，Vue出了2.5、Angular出了5。</p>\n<p><img src=\"image2.png\" alt=\"\"></p>\n</li>\n<li><p>在开发vue（40%市场份额）、react（60%市场份额）的时候，使用nodejs的工作流工作，比如gulp、grunt、yeoman、webpack等等。最常见的，就是用nodejs做路由层。</p>\n</li>\n</ol>\n<p>项目的后台现在80%以上仍然是PHP、ASP、JSP，因为nodejs是单线程的脚本程序，无法撼动老牌后台服务器语言的。PHP、ASP、JSP是绝对不会找前端去写接口的。</p>\n<p><strong>复习一些知识点：</strong></p>\n<ul>\n<li>nodejs不是一个语言，是一个平台。js是语言。和PHP + Apache不同，nodejs即是语言的承接平台又是提供http服务的平台。</li>\n</ul>\n<ul>\n<li>nodejs的安装，跨操作系统的，我们写的代码在任何的操作系统中都能运行。但是要装不同的nodejs环境。</li>\n</ul>\n<ul>\n<li><p>nodejs没有根目录，得用http和fs共同配合做顶层路由设计，在原生的开发中，通常用：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> server = http.createServer(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req,res</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(req.url == <span class=\"string\">\"\"</span>)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(req.url == <span class=\"string\">\"\"</span>)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>npm要会用，模块的使用。</p>\n</li>\n</ul>\n<ul>\n<li><p>Express简化了http程序的开发：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">\"exprss\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> app = express();</span><br><span class=\"line\"></span><br><span class=\"line\">app.get(<span class=\"string\">\"/\"</span> , <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req,res</span>)</span>&#123;</span><br><span class=\"line\">\tres.send(<span class=\"string\">\"&lt;h1&gt;你好&lt;/h1&gt;\"</span>)</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">app.listen(<span class=\"number\">3000</span>);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>GET请求和POST请求</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.get(<span class=\"string\">\"/\"</span> , <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req,res</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> id = url.parse(req.url , <span class=\"literal\">true</span>).query.id;</span><br><span class=\"line\">\tres.send(<span class=\"string\">\"&lt;h1&gt;你好&lt;/h1&gt;\"</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">app.post(<span class=\"string\">\"/\"</span> , <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req,res</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> form = <span class=\"keyword\">new</span> formidable.IncomingForm();</span><br><span class=\"line\">\tform.parse(req , <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err , fields , files</span>)</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>params：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.get(<span class=\"string\">\"/:xuehao\"</span> , <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req,res</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> xuehao = req.params.xuehao;</span><br><span class=\"line\">\tres.send(<span class=\"string\">\"&lt;h1&gt;你好&lt;/h1&gt;\"</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h1 id=\"二、TodoList的深入学习\"><a href=\"#二、TodoList的深入学习\" class=\"headerlink\" title=\"二、TodoList的深入学习\"></a>二、TodoList的深入学习</h1><h2 id=\"2-1-复习\"><a href=\"#2-1-复习\" class=\"headerlink\" title=\"2.1 复习\"></a>2.1 复习</h2><p>我们有了db.js这个模拟数据库之后，接下来写了一个todo.js的文件，里面有4个函数是操作db.js的。</p>\n<p>此时我们说db.js文件是<strong>可被预测状态的（predictable）</strong>。</p>\n<p>说A文件可被预测状态：</p>\n<ol>\n<li><p><strong>清晰性</strong>：对A文件的所有操作，都罗列出函数了；</p>\n</li>\n<li><p><strong>私有性</strong>：对A对象的操作，必须通过这些函数；</p>\n</li>\n<li><p><strong>灵活性</strong>：对A的操作可以任意插拔，删除一个函数就去掉了一种操作，增加一个函数就增加一个操作。</p>\n</li>\n</ol>\n<p>nodejs中的所有的关于文件的操作，都是异步的。比如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fs.readFile();</span><br><span class=\"line\">fs.writeFile();</span><br><span class=\"line\">fs.appendFile();</span><br></pre></td></tr></table></figure>\n<p>所以他们都提供了回调函数：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fs.write(filepath , <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err , data</span>)</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p><strong>如果再把这个异步函数封装成一个函数，外层函数要接受一个callback回调函数，当fs的readFile执行完毕之后，调用callback通过实参将data传出去</strong>。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">read</span>(<span class=\"params\">callback</span>)</span>&#123;</span><br><span class=\"line\">\tfs.write(filepath , <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err , data</span>)</span>&#123;</span><br><span class=\"line\">\t\tcallback(<span class=\"built_in\">JSON</span>.parse(data.toString()));</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">read(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">jsonobj</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(jsonobj);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p><strong>RESTful接口：</strong></p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>功能</th>\n<th>URL地址</th>\n<th>请求</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>增加TodO</td>\n<td>/todo</td>\n<td>POST</td>\n</tr>\n<tr>\n<td>列出TODO</td>\n<td>/todo</td>\n<td>GET</td>\n</tr>\n<tr>\n<td>更改TODO顺序</td>\n<td>/todo</td>\n<td>MOVE</td>\n</tr>\n<tr>\n<td>删除TODO</td>\n<td>/todo/id号</td>\n<td>DELETE</td>\n</tr>\n<tr>\n<td>更改TODO</td>\n<td>/todo/id号</td>\n<td>PATCH</td>\n</tr>\n</tbody>\n</table>\n</div>\n<p>我们将app.js中的中间件的function(req,res)都挪出去：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">\"express\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> app = express();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//引入控制器</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> mainctrl = <span class=\"built_in\">require</span>(<span class=\"string\">\"./controllers/mainctrl.js\"</span>);</span><br><span class=\"line\"><span class=\"comment\">//静态化www文件夹</span></span><br><span class=\"line\">app.use(express.static(<span class=\"string\">\"www\"</span>));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//罗列中间件</span></span><br><span class=\"line\">app.get(<span class=\"string\">\"/todo\"</span>  \t\t, mainctrl.showTodo);\t\t<span class=\"comment\">//列出所有的todo</span></span><br><span class=\"line\">app.post(<span class=\"string\">\"/todo\"</span> \t\t, mainctrl.addTodo);\t\t<span class=\"comment\">//增加todo</span></span><br><span class=\"line\">app.delete(<span class=\"string\">\"/todo/:id\"</span>  , mainctrl.removeTodo); \t<span class=\"comment\">//删除todo</span></span><br><span class=\"line\">app.patch(<span class=\"string\">\"/todo/:id\"</span> \t, mainctrl.updateTodo); \t<span class=\"comment\">//更改todo</span></span><br><span class=\"line\">app.move(<span class=\"string\">\"/todo\"</span> \t\t, mainctrl.moveTodo);\t\t<span class=\"comment\">//更改TODO的顺序</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//监听端口</span></span><br><span class=\"line\">app.listen(<span class=\"number\">3000</span>);</span><br></pre></td></tr></table></figure>\n<p>控制器controllers/mainctrl.js:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> formidable = <span class=\"built_in\">require</span>(<span class=\"string\">\"formidable\"</span>);</span><br><span class=\"line\"><span class=\"comment\">//引入苦工（就是我们的model）</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> todo = <span class=\"built_in\">require</span>(<span class=\"string\">\"../models/todo.js\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//列出所有todo</span></span><br><span class=\"line\">exports.showTodo = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req,res</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//当用户访问/todo命令苦工读取数据库</span></span><br><span class=\"line\">\ttodo.allTodo(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>)</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//呈递在页面上</span></span><br><span class=\"line\">\t\tres.json(&#123;<span class=\"string\">\"results\"</span> : data&#125;);</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//增加todo</span></span><br><span class=\"line\">exports.addTodo = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req,res</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//识别用户传入的title</span></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> form = <span class=\"keyword\">new</span> formidable.IncomingForm();</span><br><span class=\"line\"></span><br><span class=\"line\">\tform.parse(req , <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err , fields , files</span>)</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> title = fields.title;</span><br><span class=\"line\">\t\ttodo.addTodo(title , <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t\t\tres.json(&#123;<span class=\"string\">\"result\"</span> : <span class=\"number\">1</span>&#125;);</span><br><span class=\"line\">\t\t&#125;)</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//删除todo</span></span><br><span class=\"line\">exports.removeTodo = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req,res</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> id = req.params.id;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//命令苦工删除</span></span><br><span class=\"line\">\ttodo.removeTodo(id , <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t\tres.json(&#123;<span class=\"string\">\"result\"</span> : <span class=\"number\">1</span>&#125;);</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//更改todo</span></span><br><span class=\"line\">exports.updateTodo = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req,res</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> id = req.params.id;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> form = <span class=\"keyword\">new</span> formidable.IncomingForm();</span><br><span class=\"line\"></span><br><span class=\"line\">\tform.parse(req , <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err , fields , files</span>)</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//命令苦工删除</span></span><br><span class=\"line\">\t\ttodo.updateTodo(id , fields.k , fields.v , <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t\t\tres.json(&#123;<span class=\"string\">\"result\"</span> : <span class=\"number\">1</span>&#125;);</span><br><span class=\"line\">\t\t&#125;);</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//移动todo</span></span><br><span class=\"line\">exports.moveTodo =  <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req,res</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> form = <span class=\"keyword\">new</span> formidable.IncomingForm();</span><br><span class=\"line\"></span><br><span class=\"line\">\tform.parse(req , <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err , fields , files</span>)</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> startidx = fields.startidx;</span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> endidx = fields.endidx;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">//命令苦工更改顺序</span></span><br><span class=\"line\">\t\ttodo.moveTodo(startidx , endidx , <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t\t\tres.json(&#123;<span class=\"string\">\"result\"</span> : <span class=\"number\">1</span>&#125;);</span><br><span class=\"line\">\t\t&#125;);</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"2-2-MVC架构\"><a href=\"#2-2-MVC架构\" class=\"headerlink\" title=\"2.2 MVC架构\"></a>2.2 MVC架构</h2><p><strong>MVC、MVVM不是设计模式，而是代码的架构模式</strong>。</p>\n<ul>\n<li><p><strong>设计模式</strong>比如中介者模式、发布订阅模式、装饰器模式等等，他们解决的是偶尔性问题，类和类中间怎么一起工作；</p>\n</li>\n<li><p><strong>代码的架构</strong>模式是编程的时候文件的组织的模式。</p>\n</li>\n</ul>\n<p><strong>MVC全名是Model View Controller，是模型(model)－视图(view)－控制器(controller)的缩写。</strong></p>\n<ul>\n<li><p><strong>Model（模型）</strong>是应用程序中用于处理应用程序数据逻辑的部分。通常模型对象负责在数据库中存取数据。</p>\n</li>\n<li><p><strong>View（视图）</strong>是应用程序中处理数据显示的部分。通常视图是依据模型数据创建的。</p>\n</li>\n<li><p><strong>Controller（控制器）</strong>是应用程序中处理用户交互的部分。通常控制器负责从视图读取数据，控制用户输入，并向模型发送数据。</p>\n</li>\n</ul>\n<p><img src=\"image3.png\" alt=\"\"></p>\n<p>MVC的一个图示：</p>\n<p><img src=\"image4.jpeg\" alt=\"IMG\\_256\"></p>\n<h1 id=\"三、MongoDB\"><a href=\"#三、MongoDB\" class=\"headerlink\" title=\"三、MongoDB\"></a>三、MongoDB</h1><h2 id=\"3-1-NoSQL简介\"><a href=\"#3-1-NoSQL简介\" class=\"headerlink\" title=\"3.1 NoSQL简介\"></a>3.1 NoSQL简介</h2><p>之前学习的是SQL（structure query language ， 结构化查询语言）。<strong>SQL数据库有一个最大特点：限制每一个字段的类型。</strong></p>\n<p><img src=\"image5.png\" alt=\"\"></p>\n<p>比如id现在是数字类型，但是突然间国家开放成人本科，此时学校说学号要以CR打头，你就傻了，因为id必须是数字。<strong>现在我们要修改字段类型，时间耗费很多，因为所有已经存在的条目要跟着一起修改</strong>。<strong>如果要增加列，更是灾难，因为所有已经存在的条目都要跟着一起修改</strong>。</p>\n<p>NoSQL（非结构化数据库，Not Only SQL）应运而生。</p>\n<p>下面的数据就是合法的4条NoSQL数据：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;&quot;id&quot;:10001 , &quot;name&quot;:&quot;小明&quot; , &quot;age&quot; : 12 , &quot;sex&quot; : &quot;男&quot;&#125;</span><br><span class=\"line\">&#123;&quot;id&quot;:10002 , &quot;name&quot;:&quot;小强&quot; , &quot;age&quot; : 13 , &quot;sex&quot; : &quot;男&quot;&#125;</span><br><span class=\"line\">&#123;&quot;id&quot;:10003 , &quot;name&quot;:&quot;小吕&quot; , &quot;age&quot; : 14 , &quot;sex&quot; : &quot;女&quot;&#125;</span><br><span class=\"line\">&#123;&quot;id&quot;:&quot;CR10001&quot; , &quot;name&quot;:&quot;小钢炮&quot; , &quot;age&quot; : 44 , &quot;sex&quot; : &quot;男&quot;,&quot;score&quot;:560&#125;</span><br></pre></td></tr></table></figure>\n<p>每个字段都不限制类型，id可以是数字，然后突然间变为字符串是合法的；也可以增加字段。</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th></th>\n<th>优点</th>\n<th>缺点</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>SQL</td>\n<td>适合复杂的查找、查询很迅速</td>\n<td>限制了字段的类型、表格一旦确定不容易更改表格的形态。</td>\n</tr>\n<tr>\n<td>NoSQL</td>\n<td>不限制字段类型，数据条目每一条都可以有不同的字段，便于修改表格的形态。</td>\n<td>不适合复杂的查找、查询不迅速</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h2 id=\"3-2-MongoDB数据库的安装\"><a href=\"#3-2-MongoDB数据库的安装\" class=\"headerlink\" title=\"3.2 MongoDB数据库的安装\"></a>3.2 MongoDB数据库的安装</h2><p>官网：<a href=\"https://www.mongodb.com/\" target=\"_blank\" rel=\"noopener\">https://www.mongodb.com/</a></p>\n<p><img src=\"image6.png\" alt=\"\"></p>\n<p>下载之后：</p>\n<p><img src=\"image7.png\" alt=\"\"></p>\n<p>注意系统是64位的同学，学习mongodb3.0.6，32位的同学只能安装2代。</p>\n<p><img src=\"image8.png\" alt=\"\"></p>\n<p><img src=\"image9.png\" alt=\"\"></p>\n<p>现在要把bin这个文件夹设置为系统的环境变量。</p>\n<p><img src=\"image10.png\" alt=\"\"></p>\n<p>一路确定之后，就可以打开CMD：</p>\n<p><img src=\"image11.png\" alt=\"\"></p>\n<p>输入：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mongo -version</span><br></pre></td></tr></table></figure>\n<p>可以查看mongo数据库的版本号了，说明安装成功。</p>\n<h2 id=\"3-3-数据库的开机mongod\"><a href=\"#3-3-数据库的开机mongod\" class=\"headerlink\" title=\"3.3 数据库的开机mongod\"></a>3.3 数据库的开机mongod</h2><p>开启数据库我们称作”开机”。</p>\n<p>首先需要在c盘创建一个database文件夹。然后打开CMD输入：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mongod --dbpath c:\\database</span><br></pre></td></tr></table></figure>\n<p>mongo<strong>d</strong>负责开机。读作”芒果第”。</p>\n<p><code>--dbpath</code>表示设置数据库的存放目录。</p>\n<p><img src=\"image12.png\" alt=\"\"></p>\n<p>如果能够在CMD的最后一行看见：waiting for connections on port 27017</p>\n<p>说明开机成功。</p>\n<p><strong>注意，必须事先安装了windows补丁KB2731284，如果没有安装这个补丁，数据库将开机失败。</strong></p>\n<p>怎么知道自己是不是安装了这个补丁呢？</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systeminfo</span><br></pre></td></tr></table></figure>\n<p><img src=\"image13.png\" alt=\"\"></p>\n<p>如果就是跑不成功，此时尝试用管理员模式打开CMD：</p>\n<p><img src=\"image14.png\" alt=\"\"></p>\n<p>如果还是开不了，就换为2.0.6版本即可。</p>\n<h2 id=\"3-4-简单的数据库操作mongo\"><a href=\"#3-4-简单的数据库操作mongo\" class=\"headerlink\" title=\"3.4 简单的数据库操作mongo\"></a>3.4 简单的数据库操作mongo</h2><p>MongoDB有可视化管理软件，叫做MongoBooster，前期我们先用CMD来管理。</p>\n<p>使用数据库之前要先用mongod开机，然后此CMD不能关闭，再次打开一个窗口，用mongo命令进入REPL环境。</p>\n<p>bin文件夹中两个工具：</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>工具名字</th>\n<th>负责的事情</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>mongod.exe</td>\n<td>负责开机</td>\n</tr>\n<tr>\n<td>mongo.exe</td>\n<td>负责管理数据库</td>\n</tr>\n<tr>\n<td>mongoimport.exe</td>\n<td>负责导入数据</td>\n</tr>\n<tr>\n<td>mongoexport.exe</td>\n<td>负责导出数据</td>\n</tr>\n</tbody>\n</table>\n</div>\n<p><img src=\"image15.png\" alt=\"\"></p>\n<p><strong>数据库</strong>用use来<strong>创建</strong>，比如创建一个学生管理数据库：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; use xsgl</span><br></pre></td></tr></table></figure>\n<p>这个叫做使用数据库，只不过当这个数据库不存在的时候，系统自动帮你创建。</p>\n<p>创建完数据库之后，要创建一个”表格”叫做banji0716，”表格”在MongoDB中称为”集合”。</p>\n<p>集合不用刻意创建，只需要在集合中插入一条数据，集合自动创建。</p>\n<p><strong>插入数据</strong>的语法：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; db.banji0716.insert(&#123;&quot;id&quot;:10001,&quot;name&quot;:&quot;小明&quot;,&quot;age&quot;:12,&quot;sex&quot;:&quot;男&quot;&#125;);</span><br></pre></td></tr></table></figure>\n<p>数据库中的数据就是JSON。</p>\n<p><img src=\"image16.png\" alt=\"\"></p>\n<p>查看集合中的全部数据，用</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; db.banji0716.find()</span><br></pre></td></tr></table></figure>\n<p><img src=\"image17.png\" alt=\"\"></p>\n<p>查看0716班所有男生：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; db.banji0716.find(&#123;&quot;sex&quot;:&quot;男&quot;&#125;);</span><br></pre></td></tr></table></figure>\n<p>查看0716班所有大于15岁的男生：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; db.banji0716.find(&#123;&quot;sex&quot;:&quot;男&quot; , &quot;age&quot; : &#123;&quot;$gt&quot; : 15&#125;&#125;);</span><br></pre></td></tr></table></figure>\n<p>查看0716班所有大于15岁的男生或者小于17岁的女生：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; db.banji0716.find(&#123;&quot;$or&quot; : [&#123;&quot;sex&quot;:&quot;男&quot;,&quot;age&quot;:&#123;&quot;$gt&quot;:15&#125;&#125;,&#123;&quot;sex&quot;:&quot;女&quot;,&quot;age&quot;:&#123;&quot;$lt&quot;:17&#125;&#125;]&#125;);</span><br></pre></td></tr></table></figure>\n<p>也就是说NoSQL的CRUD（增删改查）操作，一律不使用SQL。</p>\n<p>原来的SQL现在不用了：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> * <span class=\"keyword\">FROM</span> banji0716 <span class=\"keyword\">WHERE</span> (sex = <span class=\"string\">\"男\"</span> <span class=\"keyword\">AND</span> age &gt; <span class=\"number\">13</span>) <span class=\"keyword\">OR</span> (sex = <span class=\"string\">\"女\"</span> <span class=\"keyword\">AND</span> age &lt; <span class=\"number\">17</span>)</span><br></pre></td></tr></table></figure>\n<p>查看已经有的数据库</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; show dbs</span><br></pre></td></tr></table></figure>\n<p><img src=\"image18.png\" alt=\"\"></p>\n<p>需要注意的是：数据库中必须有一条数据之后，才能被创建。</p>\n<p>删除数据库（实现要use 一个数据库）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; db.dropDatabase()</span><br></pre></td></tr></table></figure>\n<p>查看已有集合：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; show collections</span><br></pre></td></tr></table></figure>\n<p>删除集合：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; db.banji0716.drop()</span><br></pre></td></tr></table></figure>\n<p>删除一个条目：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; db.banji0716.remove(&#123;&quot;id&quot;:&quot;CR10001&quot;&#125;)</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-5-数据的导入-mongoimport-和导出-mongoexport\"><a href=\"#3-5-数据的导入-mongoimport-和导出-mongoexport\" class=\"headerlink\" title=\"3.5 数据的导入(mongoimport)和导出(mongoexport)\"></a>3.5 数据的导入(mongoimport)和导出(mongoexport)</h2><p>先开机，但是不要进入REPL环境！</p>\n<p><strong>数据导入</strong>：</p>\n<p>在桌面上准备一个数据.txt</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;<span class=\"attr\">\"id\"</span>:<span class=\"number\">10001</span> , <span class=\"attr\">\"name\"</span>:<span class=\"string\">\"小明\"</span> , <span class=\"attr\">\"age\"</span> : <span class=\"number\">12</span> , <span class=\"attr\">\"sex\"</span> : <span class=\"string\">\"男\"</span>&#125;</span><br><span class=\"line\">&#123;<span class=\"attr\">\"id\"</span>:<span class=\"number\">10002</span> , <span class=\"attr\">\"name\"</span>:<span class=\"string\">\"小强\"</span> , <span class=\"attr\">\"age\"</span> : <span class=\"number\">13</span> , <span class=\"attr\">\"sex\"</span> : <span class=\"string\">\"男\"</span>&#125;</span><br><span class=\"line\">&#123;<span class=\"attr\">\"id\"</span>:<span class=\"number\">10003</span> , <span class=\"attr\">\"name\"</span>:<span class=\"string\">\"小吕\"</span> , <span class=\"attr\">\"age\"</span> : <span class=\"number\">14</span> , <span class=\"attr\">\"sex\"</span> : <span class=\"string\">\"女\"</span>&#125;</span><br><span class=\"line\">&#123;<span class=\"attr\">\"id\"</span>:<span class=\"string\">\"CR10001\"</span> , <span class=\"attr\">\"name\"</span>:<span class=\"string\">\"小钢炮\"</span> , <span class=\"attr\">\"age\"</span> : <span class=\"number\">44</span> , <span class=\"attr\">\"sex\"</span> : <span class=\"string\">\"男\"</span>,<span class=\"attr\">\"score\"</span>:<span class=\"number\">560</span>&#125;</span><br></pre></td></tr></table></figure>\n<p>使用CMD命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mongoimport -d xsgl -c banji0716 C:\\Users\\Danny\\Desktop\\数据.txt --drop</span><br></pre></td></tr></table></figure>\n<p><code>-d</code>表示选择database数据库</p>\n<p><code>-c</code>表示选择collection集合（表）</p>\n<p><code>--drop</code>表示删除这个集合中已经有的数据</p>\n<p><strong>导出数据</strong>：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mongoexport -d xsgl -c banji0716 -o c:\\beifen.txt</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-6-使用mongobooster可视化数据库管理软件\"><a href=\"#3-6-使用mongobooster可视化数据库管理软件\" class=\"headerlink\" title=\"3.6 使用mongobooster可视化数据库管理软件\"></a>3.6 使用mongobooster可视化数据库管理软件</h2><p><img src=\"image19.png\" alt=\"\"></p>\n<h1 id=\"四、NodeJS操作MongoDB（非重点）\"><a href=\"#四、NodeJS操作MongoDB（非重点）\" class=\"headerlink\" title=\"四、NodeJS操作MongoDB（非重点）\"></a>四、NodeJS操作MongoDB（非重点）</h1><blockquote>\n<p>因为一会儿我们就要讲解Mongoose，将颠覆这里的知识。</p>\n<p>手册：<a href=\"https://docs.mongodb.com/ecosystem/drivers/node-js/\" target=\"_blank\" rel=\"noopener\">https://docs.mongodb.com/ecosystem/drivers/node-js/</a></p>\n<p>或者：<a href=\"https://www.npmjs.com/package/mongodb\" target=\"_blank\" rel=\"noopener\">https://www.npmjs.com/package/mongodb</a></p>\n</blockquote>\n<h2 id=\"4-1-连接数据库\"><a href=\"#4-1-连接数据库\" class=\"headerlink\" title=\"4.1 连接数据库\"></a>4.1 连接数据库</h2><p>安装依赖</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cnpm install --save mongodb</span><br></pre></td></tr></table></figure>\n<p>用mongod开启数据库之后，写app.js:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> MongoClient = <span class=\"built_in\">require</span>(<span class=\"string\">'mongodb'</span>).MongoClient;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//数据库的地址，最末尾的斜杠是数据库的名字</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> url = <span class=\"string\">'mongodb://localhost:27017/xsgl'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">MongoClient.connect(url, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, db</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(!err)&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">\"数据库连接成功\"</span>);</span><br><span class=\"line\">\t&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">\"数据库连接失败\"</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>运行node app.js即可。</p>\n<p><img src=\"image20.png\" alt=\"\"></p>\n<h2 id=\"4-2-查询和增加操作\"><a href=\"#4-2-查询和增加操作\" class=\"headerlink\" title=\"4.2 查询和增加操作\"></a>4.2 查询和增加操作</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> MongoClient = <span class=\"built_in\">require</span>(<span class=\"string\">'mongodb'</span>).MongoClient;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//数据库的地址，最末尾的斜杠是数据库的名字</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> url = <span class=\"string\">'mongodb://localhost:27017/xsgl'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//连接数据库</span></span><br><span class=\"line\">MongoClient.connect(url, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, db</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(!err)&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">\"数据库连接成功\"</span>);</span><br><span class=\"line\">\t&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">\"数据库连接失败\"</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//查询</span></span><br><span class=\"line\">\t<span class=\"comment\">// db.collection(\"banji0716\").find(&#123;&#125;).toArray(function(err , docs)&#123;</span></span><br><span class=\"line\">\t<span class=\"comment\">// \tconsole.log(docs);</span></span><br><span class=\"line\">\t<span class=\"comment\">// &#125;);</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//增加</span></span><br><span class=\"line\">\tdb.collection(<span class=\"string\">\"banji0716\"</span>).insert(&#123;<span class=\"string\">\"name\"</span>:<span class=\"string\">\"小张\"</span>,<span class=\"string\">\"age\"</span>:<span class=\"number\">7</span>&#125;,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err</span>)</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(!err)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">\"插入成功\"</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p><strong>原生nodejs操作mongodb问题很多：</strong></p>\n<ol>\n<li><p>语法形式上大的回调函数太大了，要包裹所有的代码，甚至要包裹express的中间件；</p>\n</li>\n<li><p>不利于MVC编程，我们几乎不能将所有对数据库的操作封装到一个文件中。</p>\n</li>\n</ol>\n<h1 id=\"五、Mongoose\"><a href=\"#五、Mongoose\" class=\"headerlink\" title=\"五、Mongoose\"></a>五、Mongoose</h1><p>Mongoose简化了nodejs对nodejs的操作。</p>\n<p>mongoose是nodejs中的model那个文件。</p>\n<p><img src=\"image21.png\" alt=\"\"></p>\n<h2 id=\"5-1-基本使用\"><a href=\"#5-1-基本使用\" class=\"headerlink\" title=\"5.1 基本使用\"></a>5.1 基本使用</h2><p>安装</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cnpm install --save mongoose</span><br></pre></td></tr></table></figure>\n<p>两步走：</p>\n<p><img src=\"image22.png\" alt=\"\"></p>\n<p>我们首先创建一个models的文件夹，创建一个Student.js的构造函数：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> mongoose = <span class=\"built_in\">require</span>(<span class=\"string\">\"mongoose\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//创建schema</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> studentSchema = <span class=\"keyword\">new</span> mongoose.Schema(&#123;</span><br><span class=\"line\">\t<span class=\"string\">\"xuehao\"</span> \t: <span class=\"built_in\">Number</span>, </span><br><span class=\"line\">\t<span class=\"string\">\"xingming\"</span> \t: <span class=\"built_in\">String</span>,</span><br><span class=\"line\">\t<span class=\"string\">\"age\"</span> \t\t: <span class=\"built_in\">Number</span>,</span><br><span class=\"line\">\t<span class=\"string\">\"sex\"</span> \t\t: <span class=\"built_in\">String</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//通过schema创建model</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> Student = mongoose.model(<span class=\"string\">\"Student\"</span> , studentSchema);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//暴露</span></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = Student;</span><br></pre></td></tr></table></figure>\n<p>然后创建app.js:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> mongoose = <span class=\"built_in\">require</span>(<span class=\"string\">'mongoose'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//连接数据库</span></span><br><span class=\"line\">mongoose.connect(<span class=\"string\">'mongodb://localhost/xsgl'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//连接我们的model</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> Student = <span class=\"built_in\">require</span>(<span class=\"string\">\"./models/Student.js\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//实例化一个Student类的实例：</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> xiaoming = <span class=\"keyword\">new</span> Student(&#123;</span><br><span class=\"line\">\t<span class=\"string\">\"xuehao\"</span> : <span class=\"number\">10001</span> ,</span><br><span class=\"line\">\t<span class=\"string\">\"age\"</span> : <span class=\"number\">12</span>,</span><br><span class=\"line\">\t<span class=\"string\">\"sex\"</span> : <span class=\"string\">\"男\"</span>,</span><br><span class=\"line\">\t<span class=\"string\">\"xingming\"</span> : <span class=\"string\">\"小明\"</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//调用它的save方法即可放到数据库中持久</span></span><br><span class=\"line\">xiaoming.save(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(err)&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">\"保存失败\"</span>);</span><br><span class=\"line\">\t&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">\"保存成功\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>集合就是students，会被自动加上复数s：</p>\n<p><img src=\"image23.png\" alt=\"\"></p>\n<p>你创建model的时候：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> Student = mongoose.model(<span class=\"string\">\"Student\"</span> , studentSchema);</span><br></pre></td></tr></table></figure>\n<p>它将会自动将开头字母变为小心，末尾加s作为集合名字。</p>\n<h2 id=\"5-2-增\"><a href=\"#5-2-增\" class=\"headerlink\" title=\"5.2 增\"></a>5.2 增</h2><p><strong>注意，mongoose牛逼之处在于，schema、model一旦写好了，再也不用改</strong>！</p>\n<p>方法1：（实例化，然后save）</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> xiaohong = <span class=\"keyword\">new</span> Student(&#123;</span><br><span class=\"line\">\t<span class=\"string\">\"xuehao\"</span> \t: <span class=\"number\">10002</span>, </span><br><span class=\"line\">\t<span class=\"string\">\"xingming\"</span> \t: <span class=\"string\">\"小红\"</span>,</span><br><span class=\"line\">\t<span class=\"string\">\"age\"</span> \t\t: <span class=\"number\">9</span>,</span><br><span class=\"line\">\t<span class=\"string\">\"sex\"</span> \t\t: <span class=\"string\">\"女\"</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">xiaohong.save(<span class=\"function\">(<span class=\"params\">err</span>)=&gt;</span>&#123;</span><br><span class=\"line\">\t!err &amp;&amp; <span class=\"built_in\">console</span>.log(<span class=\"string\">\"成功\"</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>方法2：（直接调用create）</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Student.create(&#123;</span><br><span class=\"line\">\t<span class=\"string\">\"xuehao\"</span> \t: <span class=\"number\">10003</span>, </span><br><span class=\"line\">\t<span class=\"string\">\"xingming\"</span> \t: <span class=\"string\">\"小花\"</span>,</span><br><span class=\"line\">\t<span class=\"string\">\"age\"</span> \t\t: <span class=\"number\">5</span>,</span><br><span class=\"line\">\t<span class=\"string\">\"sex\"</span> \t\t: <span class=\"string\">\"女\"</span></span><br><span class=\"line\">&#125;,(err)=&gt;&#123;</span><br><span class=\"line\">\t!err &amp;&amp; <span class=\"built_in\">console</span>.log(<span class=\"string\">\"成功\"</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h2 id=\"5-3-删\"><a href=\"#5-3-删\" class=\"headerlink\" title=\"5.3 删\"></a>5.3 删</h2><p>方法1（先找到这个人，然后remove）：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Student.find(&#123;<span class=\"string\">\"xingming\"</span> : <span class=\"string\">\"小红\"</span>&#125; , <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err , results</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> zhegeren = results[<span class=\"number\">0</span>];</span><br><span class=\"line\">\tzhegeren.remove(<span class=\"function\">(<span class=\"params\">err</span>)=&gt;</span>&#123;</span><br><span class=\"line\">\t\t!err &amp;&amp; <span class=\"built_in\">console</span>.log(<span class=\"string\">\"成功\"</span>);</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>方法2（直接remove）：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Student.remove(&#123;<span class=\"string\">\"xingming\"</span> : <span class=\"string\">\"小花\"</span>&#125; , (err)=&gt;&#123;</span><br><span class=\"line\">\t!err &amp;&amp; <span class=\"built_in\">console</span>.log(<span class=\"string\">\"成功\"</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h2 id=\"5-4-改\"><a href=\"#5-4-改\" class=\"headerlink\" title=\"5.4 改\"></a>5.4 改</h2><p>方法1（找到，改了，然后save）</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Student.find(&#123;<span class=\"string\">\"xingming\"</span> : <span class=\"string\">\"小明\"</span>&#125; , <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err , results</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> thepeople = results[<span class=\"number\">0</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">\tthepeople.sex = <span class=\"string\">\"女\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\tthepeople.save(<span class=\"function\">(<span class=\"params\">err</span>)=&gt;</span>&#123;</span><br><span class=\"line\">\t\t!err &amp;&amp; <span class=\"built_in\">console</span>.log(<span class=\"string\">\"成功\"</span>);</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>方法2（直接改）：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Student.update(&#123;<span class=\"string\">\"xingming\"</span> : <span class=\"string\">\"小明\"</span>&#125; , &#123;<span class=\"string\">\"$set\"</span> : &#123;<span class=\"string\">\"age\"</span> : <span class=\"number\">99</span>&#125;&#125; , <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err</span>)</span>&#123;</span><br><span class=\"line\">\t!err &amp;&amp; <span class=\"built_in\">console</span>.log(<span class=\"string\">\"成功\"</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>语法：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Student.update(改变谁 , &#123;<span class=\"string\">\"$set\"</span> : 怎么改&#125; , <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err</span>)</span>&#123;</span><br><span class=\"line\">\t!err &amp;&amp; <span class=\"built_in\">console</span>.log(<span class=\"string\">\"成功\"</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h2 id=\"5-5-查\"><a href=\"#5-5-查\" class=\"headerlink\" title=\"5.5 查\"></a>5.5 查</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Student.find(&#123;<span class=\"string\">\"xingming\"</span> : <span class=\"string\">\"小红\"</span>&#125; , <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err , results</span>)</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h1 id=\"六、Mongoose小案例-小小调查问卷表单\"><a href=\"#六、Mongoose小案例-小小调查问卷表单\" class=\"headerlink\" title=\"六、Mongoose小案例 - 小小调查问卷表单\"></a>六、Mongoose小案例 - 小小调查问卷表单</h1><p><strong>我们设计三个题目：</strong></p>\n<p>【单选题】双十一你最期待的事情：商场打折、淘宝购物节、单身狗过节啦</p>\n<p>【多选题】双十一你想买的东西：零食、衣服、电子产品、美容产品</p>\n<p>【数字题】你预算花费：range条，10块 ~ 20000块</p>\n<p>我们现在从前端、nodejs服务端、数据库，都是JavaScript语境！数据库也是JOSN！所以数组不会变形！</p>\n<p><strong>统计集合中有多少数据：</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; db.surveys.count()</span><br></pre></td></tr></table></figure>\n<p>存储数据库特别简单：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//中间件</span></span><br><span class=\"line\">app.post(<span class=\"string\">\"/tijiao\"</span> , <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req,res</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> form = <span class=\"keyword\">new</span> formidable.IncomingForm();</span><br><span class=\"line\">\tform.parse(req , <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err , fields</span>)</span>&#123;</span><br><span class=\"line\">\t\tSurvey.create(&#123;</span><br><span class=\"line\">\t\t\t<span class=\"string\">\"timu1\"</span> : fields.timu1 ,</span><br><span class=\"line\">\t\t\t<span class=\"string\">\"timu2\"</span> : fields.timu2 ,</span><br><span class=\"line\">\t\t\t<span class=\"string\">\"timu3\"</span> : fields.timu3 ,</span><br><span class=\"line\">\t\t\t<span class=\"string\">\"date\"</span> : <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>()</span><br><span class=\"line\">\t\t&#125;,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err</span>)</span>&#123;</span><br><span class=\"line\">\t\t\tres.json(&#123;<span class=\"string\">\"result\"</span> : err ? <span class=\"number\">-1</span> : <span class=\"number\">1</span>&#125;);</span><br><span class=\"line\">\t\t&#125;);</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>数据可视化：<a href=\"http://echarts.baidu.com/demo.html#pie-simple\" target=\"_blank\" rel=\"noopener\">http://echarts.baidu.com/demo.html#pie-simple</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><blockquote>\n<p>第3天课堂笔记</p>\n<p>讲师：邵山欢</p>\n<p>日期：2017年11月6日</p>\n</blockquote>\n<h1 id=\"复习\"><a href=\"#复习\" class=\"headerlink\" title=\"复习\"></a>复习</h1><p><strong>先说一下，工作的时候关于nodejs有两种情况：</strong></p>\n<ol>\n<li><p>直接找关于nodejs的工作，此时99%是在写HTTP业务。不会让你去写nodejs内核。</p>\n<p>现在企业需要的人就是能够加班、有超强学习能力。刚刚过去的两天，Vue出了2.5、Angular出了5。</p>\n<p><img src=\"image2.png\" alt=\"\"></p>\n</li>\n<li><p>在开发vue（40%市场份额）、react（60%市场份额）的时候，使用nodejs的工作流工作，比如gulp、grunt、yeoman、webpack等等。最常见的，就是用nodejs做路由层。</p>\n</li>\n</ol>\n<p>项目的后台现在80%以上仍然是PHP、ASP、JSP，因为nodejs是单线程的脚本程序，无法撼动老牌后台服务器语言的。PHP、ASP、JSP是绝对不会找前端去写接口的。</p>\n<p><strong>复习一些知识点：</strong></p>\n<ul>\n<li>nodejs不是一个语言，是一个平台。js是语言。和PHP + Apache不同，nodejs即是语言的承接平台又是提供http服务的平台。</li>\n</ul>\n<ul>\n<li>nodejs的安装，跨操作系统的，我们写的代码在任何的操作系统中都能运行。但是要装不同的nodejs环境。</li>\n</ul>\n<ul>\n<li><p>nodejs没有根目录，得用http和fs共同配合做顶层路由设计，在原生的开发中，通常用：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> server = http.createServer(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req,res</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(req.url == <span class=\"string\">\"\"</span>)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(req.url == <span class=\"string\">\"\"</span>)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>npm要会用，模块的使用。</p>\n</li>\n</ul>\n<ul>\n<li><p>Express简化了http程序的开发：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">\"exprss\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> app = express();</span><br><span class=\"line\"></span><br><span class=\"line\">app.get(<span class=\"string\">\"/\"</span> , <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req,res</span>)</span>&#123;</span><br><span class=\"line\">\tres.send(<span class=\"string\">\"&lt;h1&gt;你好&lt;/h1&gt;\"</span>)</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">app.listen(<span class=\"number\">3000</span>);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>GET请求和POST请求</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.get(<span class=\"string\">\"/\"</span> , <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req,res</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> id = url.parse(req.url , <span class=\"literal\">true</span>).query.id;</span><br><span class=\"line\">\tres.send(<span class=\"string\">\"&lt;h1&gt;你好&lt;/h1&gt;\"</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">app.post(<span class=\"string\">\"/\"</span> , <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req,res</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> form = <span class=\"keyword\">new</span> formidable.IncomingForm();</span><br><span class=\"line\">\tform.parse(req , <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err , fields , files</span>)</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>params：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.get(<span class=\"string\">\"/:xuehao\"</span> , <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req,res</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> xuehao = req.params.xuehao;</span><br><span class=\"line\">\tres.send(<span class=\"string\">\"&lt;h1&gt;你好&lt;/h1&gt;\"</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h1 id=\"二、TodoList的深入学习\"><a href=\"#二、TodoList的深入学习\" class=\"headerlink\" title=\"二、TodoList的深入学习\"></a>二、TodoList的深入学习</h1><h2 id=\"2-1-复习\"><a href=\"#2-1-复习\" class=\"headerlink\" title=\"2.1 复习\"></a>2.1 复习</h2><p>我们有了db.js这个模拟数据库之后，接下来写了一个todo.js的文件，里面有4个函数是操作db.js的。</p>\n<p>此时我们说db.js文件是<strong>可被预测状态的（predictable）</strong>。</p>\n<p>说A文件可被预测状态：</p>\n<ol>\n<li><p><strong>清晰性</strong>：对A文件的所有操作，都罗列出函数了；</p>\n</li>\n<li><p><strong>私有性</strong>：对A对象的操作，必须通过这些函数；</p>\n</li>\n<li><p><strong>灵活性</strong>：对A的操作可以任意插拔，删除一个函数就去掉了一种操作，增加一个函数就增加一个操作。</p>\n</li>\n</ol>\n<p>nodejs中的所有的关于文件的操作，都是异步的。比如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fs.readFile();</span><br><span class=\"line\">fs.writeFile();</span><br><span class=\"line\">fs.appendFile();</span><br></pre></td></tr></table></figure>\n<p>所以他们都提供了回调函数：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fs.write(filepath , <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err , data</span>)</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p><strong>如果再把这个异步函数封装成一个函数，外层函数要接受一个callback回调函数，当fs的readFile执行完毕之后，调用callback通过实参将data传出去</strong>。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">read</span>(<span class=\"params\">callback</span>)</span>&#123;</span><br><span class=\"line\">\tfs.write(filepath , <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err , data</span>)</span>&#123;</span><br><span class=\"line\">\t\tcallback(<span class=\"built_in\">JSON</span>.parse(data.toString()));</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">read(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">jsonobj</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(jsonobj);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p><strong>RESTful接口：</strong></p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>功能</th>\n<th>URL地址</th>\n<th>请求</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>增加TodO</td>\n<td>/todo</td>\n<td>POST</td>\n</tr>\n<tr>\n<td>列出TODO</td>\n<td>/todo</td>\n<td>GET</td>\n</tr>\n<tr>\n<td>更改TODO顺序</td>\n<td>/todo</td>\n<td>MOVE</td>\n</tr>\n<tr>\n<td>删除TODO</td>\n<td>/todo/id号</td>\n<td>DELETE</td>\n</tr>\n<tr>\n<td>更改TODO</td>\n<td>/todo/id号</td>\n<td>PATCH</td>\n</tr>\n</tbody>\n</table>\n</div>\n<p>我们将app.js中的中间件的function(req,res)都挪出去：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">\"express\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> app = express();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//引入控制器</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> mainctrl = <span class=\"built_in\">require</span>(<span class=\"string\">\"./controllers/mainctrl.js\"</span>);</span><br><span class=\"line\"><span class=\"comment\">//静态化www文件夹</span></span><br><span class=\"line\">app.use(express.static(<span class=\"string\">\"www\"</span>));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//罗列中间件</span></span><br><span class=\"line\">app.get(<span class=\"string\">\"/todo\"</span>  \t\t, mainctrl.showTodo);\t\t<span class=\"comment\">//列出所有的todo</span></span><br><span class=\"line\">app.post(<span class=\"string\">\"/todo\"</span> \t\t, mainctrl.addTodo);\t\t<span class=\"comment\">//增加todo</span></span><br><span class=\"line\">app.delete(<span class=\"string\">\"/todo/:id\"</span>  , mainctrl.removeTodo); \t<span class=\"comment\">//删除todo</span></span><br><span class=\"line\">app.patch(<span class=\"string\">\"/todo/:id\"</span> \t, mainctrl.updateTodo); \t<span class=\"comment\">//更改todo</span></span><br><span class=\"line\">app.move(<span class=\"string\">\"/todo\"</span> \t\t, mainctrl.moveTodo);\t\t<span class=\"comment\">//更改TODO的顺序</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//监听端口</span></span><br><span class=\"line\">app.listen(<span class=\"number\">3000</span>);</span><br></pre></td></tr></table></figure>\n<p>控制器controllers/mainctrl.js:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> formidable = <span class=\"built_in\">require</span>(<span class=\"string\">\"formidable\"</span>);</span><br><span class=\"line\"><span class=\"comment\">//引入苦工（就是我们的model）</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> todo = <span class=\"built_in\">require</span>(<span class=\"string\">\"../models/todo.js\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//列出所有todo</span></span><br><span class=\"line\">exports.showTodo = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req,res</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//当用户访问/todo命令苦工读取数据库</span></span><br><span class=\"line\">\ttodo.allTodo(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>)</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//呈递在页面上</span></span><br><span class=\"line\">\t\tres.json(&#123;<span class=\"string\">\"results\"</span> : data&#125;);</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//增加todo</span></span><br><span class=\"line\">exports.addTodo = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req,res</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//识别用户传入的title</span></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> form = <span class=\"keyword\">new</span> formidable.IncomingForm();</span><br><span class=\"line\"></span><br><span class=\"line\">\tform.parse(req , <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err , fields , files</span>)</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> title = fields.title;</span><br><span class=\"line\">\t\ttodo.addTodo(title , <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t\t\tres.json(&#123;<span class=\"string\">\"result\"</span> : <span class=\"number\">1</span>&#125;);</span><br><span class=\"line\">\t\t&#125;)</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//删除todo</span></span><br><span class=\"line\">exports.removeTodo = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req,res</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> id = req.params.id;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//命令苦工删除</span></span><br><span class=\"line\">\ttodo.removeTodo(id , <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t\tres.json(&#123;<span class=\"string\">\"result\"</span> : <span class=\"number\">1</span>&#125;);</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//更改todo</span></span><br><span class=\"line\">exports.updateTodo = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req,res</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> id = req.params.id;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> form = <span class=\"keyword\">new</span> formidable.IncomingForm();</span><br><span class=\"line\"></span><br><span class=\"line\">\tform.parse(req , <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err , fields , files</span>)</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//命令苦工删除</span></span><br><span class=\"line\">\t\ttodo.updateTodo(id , fields.k , fields.v , <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t\t\tres.json(&#123;<span class=\"string\">\"result\"</span> : <span class=\"number\">1</span>&#125;);</span><br><span class=\"line\">\t\t&#125;);</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//移动todo</span></span><br><span class=\"line\">exports.moveTodo =  <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req,res</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> form = <span class=\"keyword\">new</span> formidable.IncomingForm();</span><br><span class=\"line\"></span><br><span class=\"line\">\tform.parse(req , <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err , fields , files</span>)</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> startidx = fields.startidx;</span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> endidx = fields.endidx;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">//命令苦工更改顺序</span></span><br><span class=\"line\">\t\ttodo.moveTodo(startidx , endidx , <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t\t\tres.json(&#123;<span class=\"string\">\"result\"</span> : <span class=\"number\">1</span>&#125;);</span><br><span class=\"line\">\t\t&#125;);</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"2-2-MVC架构\"><a href=\"#2-2-MVC架构\" class=\"headerlink\" title=\"2.2 MVC架构\"></a>2.2 MVC架构</h2><p><strong>MVC、MVVM不是设计模式，而是代码的架构模式</strong>。</p>\n<ul>\n<li><p><strong>设计模式</strong>比如中介者模式、发布订阅模式、装饰器模式等等，他们解决的是偶尔性问题，类和类中间怎么一起工作；</p>\n</li>\n<li><p><strong>代码的架构</strong>模式是编程的时候文件的组织的模式。</p>\n</li>\n</ul>\n<p><strong>MVC全名是Model View Controller，是模型(model)－视图(view)－控制器(controller)的缩写。</strong></p>\n<ul>\n<li><p><strong>Model（模型）</strong>是应用程序中用于处理应用程序数据逻辑的部分。通常模型对象负责在数据库中存取数据。</p>\n</li>\n<li><p><strong>View（视图）</strong>是应用程序中处理数据显示的部分。通常视图是依据模型数据创建的。</p>\n</li>\n<li><p><strong>Controller（控制器）</strong>是应用程序中处理用户交互的部分。通常控制器负责从视图读取数据，控制用户输入，并向模型发送数据。</p>\n</li>\n</ul>\n<p><img src=\"image3.png\" alt=\"\"></p>\n<p>MVC的一个图示：</p>\n<p><img src=\"image4.jpeg\" alt=\"IMG\\_256\"></p>\n<h1 id=\"三、MongoDB\"><a href=\"#三、MongoDB\" class=\"headerlink\" title=\"三、MongoDB\"></a>三、MongoDB</h1><h2 id=\"3-1-NoSQL简介\"><a href=\"#3-1-NoSQL简介\" class=\"headerlink\" title=\"3.1 NoSQL简介\"></a>3.1 NoSQL简介</h2><p>之前学习的是SQL（structure query language ， 结构化查询语言）。<strong>SQL数据库有一个最大特点：限制每一个字段的类型。</strong></p>\n<p><img src=\"image5.png\" alt=\"\"></p>\n<p>比如id现在是数字类型，但是突然间国家开放成人本科，此时学校说学号要以CR打头，你就傻了，因为id必须是数字。<strong>现在我们要修改字段类型，时间耗费很多，因为所有已经存在的条目要跟着一起修改</strong>。<strong>如果要增加列，更是灾难，因为所有已经存在的条目都要跟着一起修改</strong>。</p>\n<p>NoSQL（非结构化数据库，Not Only SQL）应运而生。</p>\n<p>下面的数据就是合法的4条NoSQL数据：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;&quot;id&quot;:10001 , &quot;name&quot;:&quot;小明&quot; , &quot;age&quot; : 12 , &quot;sex&quot; : &quot;男&quot;&#125;</span><br><span class=\"line\">&#123;&quot;id&quot;:10002 , &quot;name&quot;:&quot;小强&quot; , &quot;age&quot; : 13 , &quot;sex&quot; : &quot;男&quot;&#125;</span><br><span class=\"line\">&#123;&quot;id&quot;:10003 , &quot;name&quot;:&quot;小吕&quot; , &quot;age&quot; : 14 , &quot;sex&quot; : &quot;女&quot;&#125;</span><br><span class=\"line\">&#123;&quot;id&quot;:&quot;CR10001&quot; , &quot;name&quot;:&quot;小钢炮&quot; , &quot;age&quot; : 44 , &quot;sex&quot; : &quot;男&quot;,&quot;score&quot;:560&#125;</span><br></pre></td></tr></table></figure>\n<p>每个字段都不限制类型，id可以是数字，然后突然间变为字符串是合法的；也可以增加字段。</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th></th>\n<th>优点</th>\n<th>缺点</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>SQL</td>\n<td>适合复杂的查找、查询很迅速</td>\n<td>限制了字段的类型、表格一旦确定不容易更改表格的形态。</td>\n</tr>\n<tr>\n<td>NoSQL</td>\n<td>不限制字段类型，数据条目每一条都可以有不同的字段，便于修改表格的形态。</td>\n<td>不适合复杂的查找、查询不迅速</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h2 id=\"3-2-MongoDB数据库的安装\"><a href=\"#3-2-MongoDB数据库的安装\" class=\"headerlink\" title=\"3.2 MongoDB数据库的安装\"></a>3.2 MongoDB数据库的安装</h2><p>官网：<a href=\"https://www.mongodb.com/\" target=\"_blank\" rel=\"noopener\">https://www.mongodb.com/</a></p>\n<p><img src=\"image6.png\" alt=\"\"></p>\n<p>下载之后：</p>\n<p><img src=\"image7.png\" alt=\"\"></p>\n<p>注意系统是64位的同学，学习mongodb3.0.6，32位的同学只能安装2代。</p>\n<p><img src=\"image8.png\" alt=\"\"></p>\n<p><img src=\"image9.png\" alt=\"\"></p>\n<p>现在要把bin这个文件夹设置为系统的环境变量。</p>\n<p><img src=\"image10.png\" alt=\"\"></p>\n<p>一路确定之后，就可以打开CMD：</p>\n<p><img src=\"image11.png\" alt=\"\"></p>\n<p>输入：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mongo -version</span><br></pre></td></tr></table></figure>\n<p>可以查看mongo数据库的版本号了，说明安装成功。</p>\n<h2 id=\"3-3-数据库的开机mongod\"><a href=\"#3-3-数据库的开机mongod\" class=\"headerlink\" title=\"3.3 数据库的开机mongod\"></a>3.3 数据库的开机mongod</h2><p>开启数据库我们称作”开机”。</p>\n<p>首先需要在c盘创建一个database文件夹。然后打开CMD输入：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mongod --dbpath c:\\database</span><br></pre></td></tr></table></figure>\n<p>mongo<strong>d</strong>负责开机。读作”芒果第”。</p>\n<p><code>--dbpath</code>表示设置数据库的存放目录。</p>\n<p><img src=\"image12.png\" alt=\"\"></p>\n<p>如果能够在CMD的最后一行看见：waiting for connections on port 27017</p>\n<p>说明开机成功。</p>\n<p><strong>注意，必须事先安装了windows补丁KB2731284，如果没有安装这个补丁，数据库将开机失败。</strong></p>\n<p>怎么知道自己是不是安装了这个补丁呢？</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systeminfo</span><br></pre></td></tr></table></figure>\n<p><img src=\"image13.png\" alt=\"\"></p>\n<p>如果就是跑不成功，此时尝试用管理员模式打开CMD：</p>\n<p><img src=\"image14.png\" alt=\"\"></p>\n<p>如果还是开不了，就换为2.0.6版本即可。</p>\n<h2 id=\"3-4-简单的数据库操作mongo\"><a href=\"#3-4-简单的数据库操作mongo\" class=\"headerlink\" title=\"3.4 简单的数据库操作mongo\"></a>3.4 简单的数据库操作mongo</h2><p>MongoDB有可视化管理软件，叫做MongoBooster，前期我们先用CMD来管理。</p>\n<p>使用数据库之前要先用mongod开机，然后此CMD不能关闭，再次打开一个窗口，用mongo命令进入REPL环境。</p>\n<p>bin文件夹中两个工具：</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>工具名字</th>\n<th>负责的事情</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>mongod.exe</td>\n<td>负责开机</td>\n</tr>\n<tr>\n<td>mongo.exe</td>\n<td>负责管理数据库</td>\n</tr>\n<tr>\n<td>mongoimport.exe</td>\n<td>负责导入数据</td>\n</tr>\n<tr>\n<td>mongoexport.exe</td>\n<td>负责导出数据</td>\n</tr>\n</tbody>\n</table>\n</div>\n<p><img src=\"image15.png\" alt=\"\"></p>\n<p><strong>数据库</strong>用use来<strong>创建</strong>，比如创建一个学生管理数据库：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; use xsgl</span><br></pre></td></tr></table></figure>\n<p>这个叫做使用数据库，只不过当这个数据库不存在的时候，系统自动帮你创建。</p>\n<p>创建完数据库之后，要创建一个”表格”叫做banji0716，”表格”在MongoDB中称为”集合”。</p>\n<p>集合不用刻意创建，只需要在集合中插入一条数据，集合自动创建。</p>\n<p><strong>插入数据</strong>的语法：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; db.banji0716.insert(&#123;&quot;id&quot;:10001,&quot;name&quot;:&quot;小明&quot;,&quot;age&quot;:12,&quot;sex&quot;:&quot;男&quot;&#125;);</span><br></pre></td></tr></table></figure>\n<p>数据库中的数据就是JSON。</p>\n<p><img src=\"image16.png\" alt=\"\"></p>\n<p>查看集合中的全部数据，用</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; db.banji0716.find()</span><br></pre></td></tr></table></figure>\n<p><img src=\"image17.png\" alt=\"\"></p>\n<p>查看0716班所有男生：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; db.banji0716.find(&#123;&quot;sex&quot;:&quot;男&quot;&#125;);</span><br></pre></td></tr></table></figure>\n<p>查看0716班所有大于15岁的男生：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; db.banji0716.find(&#123;&quot;sex&quot;:&quot;男&quot; , &quot;age&quot; : &#123;&quot;$gt&quot; : 15&#125;&#125;);</span><br></pre></td></tr></table></figure>\n<p>查看0716班所有大于15岁的男生或者小于17岁的女生：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; db.banji0716.find(&#123;&quot;$or&quot; : [&#123;&quot;sex&quot;:&quot;男&quot;,&quot;age&quot;:&#123;&quot;$gt&quot;:15&#125;&#125;,&#123;&quot;sex&quot;:&quot;女&quot;,&quot;age&quot;:&#123;&quot;$lt&quot;:17&#125;&#125;]&#125;);</span><br></pre></td></tr></table></figure>\n<p>也就是说NoSQL的CRUD（增删改查）操作，一律不使用SQL。</p>\n<p>原来的SQL现在不用了：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> * <span class=\"keyword\">FROM</span> banji0716 <span class=\"keyword\">WHERE</span> (sex = <span class=\"string\">\"男\"</span> <span class=\"keyword\">AND</span> age &gt; <span class=\"number\">13</span>) <span class=\"keyword\">OR</span> (sex = <span class=\"string\">\"女\"</span> <span class=\"keyword\">AND</span> age &lt; <span class=\"number\">17</span>)</span><br></pre></td></tr></table></figure>\n<p>查看已经有的数据库</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; show dbs</span><br></pre></td></tr></table></figure>\n<p><img src=\"image18.png\" alt=\"\"></p>\n<p>需要注意的是：数据库中必须有一条数据之后，才能被创建。</p>\n<p>删除数据库（实现要use 一个数据库）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; db.dropDatabase()</span><br></pre></td></tr></table></figure>\n<p>查看已有集合：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; show collections</span><br></pre></td></tr></table></figure>\n<p>删除集合：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; db.banji0716.drop()</span><br></pre></td></tr></table></figure>\n<p>删除一个条目：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; db.banji0716.remove(&#123;&quot;id&quot;:&quot;CR10001&quot;&#125;)</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-5-数据的导入-mongoimport-和导出-mongoexport\"><a href=\"#3-5-数据的导入-mongoimport-和导出-mongoexport\" class=\"headerlink\" title=\"3.5 数据的导入(mongoimport)和导出(mongoexport)\"></a>3.5 数据的导入(mongoimport)和导出(mongoexport)</h2><p>先开机，但是不要进入REPL环境！</p>\n<p><strong>数据导入</strong>：</p>\n<p>在桌面上准备一个数据.txt</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;<span class=\"attr\">\"id\"</span>:<span class=\"number\">10001</span> , <span class=\"attr\">\"name\"</span>:<span class=\"string\">\"小明\"</span> , <span class=\"attr\">\"age\"</span> : <span class=\"number\">12</span> , <span class=\"attr\">\"sex\"</span> : <span class=\"string\">\"男\"</span>&#125;</span><br><span class=\"line\">&#123;<span class=\"attr\">\"id\"</span>:<span class=\"number\">10002</span> , <span class=\"attr\">\"name\"</span>:<span class=\"string\">\"小强\"</span> , <span class=\"attr\">\"age\"</span> : <span class=\"number\">13</span> , <span class=\"attr\">\"sex\"</span> : <span class=\"string\">\"男\"</span>&#125;</span><br><span class=\"line\">&#123;<span class=\"attr\">\"id\"</span>:<span class=\"number\">10003</span> , <span class=\"attr\">\"name\"</span>:<span class=\"string\">\"小吕\"</span> , <span class=\"attr\">\"age\"</span> : <span class=\"number\">14</span> , <span class=\"attr\">\"sex\"</span> : <span class=\"string\">\"女\"</span>&#125;</span><br><span class=\"line\">&#123;<span class=\"attr\">\"id\"</span>:<span class=\"string\">\"CR10001\"</span> , <span class=\"attr\">\"name\"</span>:<span class=\"string\">\"小钢炮\"</span> , <span class=\"attr\">\"age\"</span> : <span class=\"number\">44</span> , <span class=\"attr\">\"sex\"</span> : <span class=\"string\">\"男\"</span>,<span class=\"attr\">\"score\"</span>:<span class=\"number\">560</span>&#125;</span><br></pre></td></tr></table></figure>\n<p>使用CMD命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mongoimport -d xsgl -c banji0716 C:\\Users\\Danny\\Desktop\\数据.txt --drop</span><br></pre></td></tr></table></figure>\n<p><code>-d</code>表示选择database数据库</p>\n<p><code>-c</code>表示选择collection集合（表）</p>\n<p><code>--drop</code>表示删除这个集合中已经有的数据</p>\n<p><strong>导出数据</strong>：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mongoexport -d xsgl -c banji0716 -o c:\\beifen.txt</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-6-使用mongobooster可视化数据库管理软件\"><a href=\"#3-6-使用mongobooster可视化数据库管理软件\" class=\"headerlink\" title=\"3.6 使用mongobooster可视化数据库管理软件\"></a>3.6 使用mongobooster可视化数据库管理软件</h2><p><img src=\"image19.png\" alt=\"\"></p>\n<h1 id=\"四、NodeJS操作MongoDB（非重点）\"><a href=\"#四、NodeJS操作MongoDB（非重点）\" class=\"headerlink\" title=\"四、NodeJS操作MongoDB（非重点）\"></a>四、NodeJS操作MongoDB（非重点）</h1><blockquote>\n<p>因为一会儿我们就要讲解Mongoose，将颠覆这里的知识。</p>\n<p>手册：<a href=\"https://docs.mongodb.com/ecosystem/drivers/node-js/\" target=\"_blank\" rel=\"noopener\">https://docs.mongodb.com/ecosystem/drivers/node-js/</a></p>\n<p>或者：<a href=\"https://www.npmjs.com/package/mongodb\" target=\"_blank\" rel=\"noopener\">https://www.npmjs.com/package/mongodb</a></p>\n</blockquote>\n<h2 id=\"4-1-连接数据库\"><a href=\"#4-1-连接数据库\" class=\"headerlink\" title=\"4.1 连接数据库\"></a>4.1 连接数据库</h2><p>安装依赖</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cnpm install --save mongodb</span><br></pre></td></tr></table></figure>\n<p>用mongod开启数据库之后，写app.js:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> MongoClient = <span class=\"built_in\">require</span>(<span class=\"string\">'mongodb'</span>).MongoClient;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//数据库的地址，最末尾的斜杠是数据库的名字</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> url = <span class=\"string\">'mongodb://localhost:27017/xsgl'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">MongoClient.connect(url, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, db</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(!err)&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">\"数据库连接成功\"</span>);</span><br><span class=\"line\">\t&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">\"数据库连接失败\"</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>运行node app.js即可。</p>\n<p><img src=\"image20.png\" alt=\"\"></p>\n<h2 id=\"4-2-查询和增加操作\"><a href=\"#4-2-查询和增加操作\" class=\"headerlink\" title=\"4.2 查询和增加操作\"></a>4.2 查询和增加操作</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> MongoClient = <span class=\"built_in\">require</span>(<span class=\"string\">'mongodb'</span>).MongoClient;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//数据库的地址，最末尾的斜杠是数据库的名字</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> url = <span class=\"string\">'mongodb://localhost:27017/xsgl'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//连接数据库</span></span><br><span class=\"line\">MongoClient.connect(url, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, db</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(!err)&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">\"数据库连接成功\"</span>);</span><br><span class=\"line\">\t&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">\"数据库连接失败\"</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//查询</span></span><br><span class=\"line\">\t<span class=\"comment\">// db.collection(\"banji0716\").find(&#123;&#125;).toArray(function(err , docs)&#123;</span></span><br><span class=\"line\">\t<span class=\"comment\">// \tconsole.log(docs);</span></span><br><span class=\"line\">\t<span class=\"comment\">// &#125;);</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//增加</span></span><br><span class=\"line\">\tdb.collection(<span class=\"string\">\"banji0716\"</span>).insert(&#123;<span class=\"string\">\"name\"</span>:<span class=\"string\">\"小张\"</span>,<span class=\"string\">\"age\"</span>:<span class=\"number\">7</span>&#125;,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err</span>)</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(!err)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">\"插入成功\"</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p><strong>原生nodejs操作mongodb问题很多：</strong></p>\n<ol>\n<li><p>语法形式上大的回调函数太大了，要包裹所有的代码，甚至要包裹express的中间件；</p>\n</li>\n<li><p>不利于MVC编程，我们几乎不能将所有对数据库的操作封装到一个文件中。</p>\n</li>\n</ol>\n<h1 id=\"五、Mongoose\"><a href=\"#五、Mongoose\" class=\"headerlink\" title=\"五、Mongoose\"></a>五、Mongoose</h1><p>Mongoose简化了nodejs对nodejs的操作。</p>\n<p>mongoose是nodejs中的model那个文件。</p>\n<p><img src=\"image21.png\" alt=\"\"></p>\n<h2 id=\"5-1-基本使用\"><a href=\"#5-1-基本使用\" class=\"headerlink\" title=\"5.1 基本使用\"></a>5.1 基本使用</h2><p>安装</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cnpm install --save mongoose</span><br></pre></td></tr></table></figure>\n<p>两步走：</p>\n<p><img src=\"image22.png\" alt=\"\"></p>\n<p>我们首先创建一个models的文件夹，创建一个Student.js的构造函数：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> mongoose = <span class=\"built_in\">require</span>(<span class=\"string\">\"mongoose\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//创建schema</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> studentSchema = <span class=\"keyword\">new</span> mongoose.Schema(&#123;</span><br><span class=\"line\">\t<span class=\"string\">\"xuehao\"</span> \t: <span class=\"built_in\">Number</span>, </span><br><span class=\"line\">\t<span class=\"string\">\"xingming\"</span> \t: <span class=\"built_in\">String</span>,</span><br><span class=\"line\">\t<span class=\"string\">\"age\"</span> \t\t: <span class=\"built_in\">Number</span>,</span><br><span class=\"line\">\t<span class=\"string\">\"sex\"</span> \t\t: <span class=\"built_in\">String</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//通过schema创建model</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> Student = mongoose.model(<span class=\"string\">\"Student\"</span> , studentSchema);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//暴露</span></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = Student;</span><br></pre></td></tr></table></figure>\n<p>然后创建app.js:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> mongoose = <span class=\"built_in\">require</span>(<span class=\"string\">'mongoose'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//连接数据库</span></span><br><span class=\"line\">mongoose.connect(<span class=\"string\">'mongodb://localhost/xsgl'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//连接我们的model</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> Student = <span class=\"built_in\">require</span>(<span class=\"string\">\"./models/Student.js\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//实例化一个Student类的实例：</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> xiaoming = <span class=\"keyword\">new</span> Student(&#123;</span><br><span class=\"line\">\t<span class=\"string\">\"xuehao\"</span> : <span class=\"number\">10001</span> ,</span><br><span class=\"line\">\t<span class=\"string\">\"age\"</span> : <span class=\"number\">12</span>,</span><br><span class=\"line\">\t<span class=\"string\">\"sex\"</span> : <span class=\"string\">\"男\"</span>,</span><br><span class=\"line\">\t<span class=\"string\">\"xingming\"</span> : <span class=\"string\">\"小明\"</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//调用它的save方法即可放到数据库中持久</span></span><br><span class=\"line\">xiaoming.save(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(err)&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">\"保存失败\"</span>);</span><br><span class=\"line\">\t&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">\"保存成功\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>集合就是students，会被自动加上复数s：</p>\n<p><img src=\"image23.png\" alt=\"\"></p>\n<p>你创建model的时候：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> Student = mongoose.model(<span class=\"string\">\"Student\"</span> , studentSchema);</span><br></pre></td></tr></table></figure>\n<p>它将会自动将开头字母变为小心，末尾加s作为集合名字。</p>\n<h2 id=\"5-2-增\"><a href=\"#5-2-增\" class=\"headerlink\" title=\"5.2 增\"></a>5.2 增</h2><p><strong>注意，mongoose牛逼之处在于，schema、model一旦写好了，再也不用改</strong>！</p>\n<p>方法1：（实例化，然后save）</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> xiaohong = <span class=\"keyword\">new</span> Student(&#123;</span><br><span class=\"line\">\t<span class=\"string\">\"xuehao\"</span> \t: <span class=\"number\">10002</span>, </span><br><span class=\"line\">\t<span class=\"string\">\"xingming\"</span> \t: <span class=\"string\">\"小红\"</span>,</span><br><span class=\"line\">\t<span class=\"string\">\"age\"</span> \t\t: <span class=\"number\">9</span>,</span><br><span class=\"line\">\t<span class=\"string\">\"sex\"</span> \t\t: <span class=\"string\">\"女\"</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">xiaohong.save(<span class=\"function\">(<span class=\"params\">err</span>)=&gt;</span>&#123;</span><br><span class=\"line\">\t!err &amp;&amp; <span class=\"built_in\">console</span>.log(<span class=\"string\">\"成功\"</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>方法2：（直接调用create）</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Student.create(&#123;</span><br><span class=\"line\">\t<span class=\"string\">\"xuehao\"</span> \t: <span class=\"number\">10003</span>, </span><br><span class=\"line\">\t<span class=\"string\">\"xingming\"</span> \t: <span class=\"string\">\"小花\"</span>,</span><br><span class=\"line\">\t<span class=\"string\">\"age\"</span> \t\t: <span class=\"number\">5</span>,</span><br><span class=\"line\">\t<span class=\"string\">\"sex\"</span> \t\t: <span class=\"string\">\"女\"</span></span><br><span class=\"line\">&#125;,(err)=&gt;&#123;</span><br><span class=\"line\">\t!err &amp;&amp; <span class=\"built_in\">console</span>.log(<span class=\"string\">\"成功\"</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h2 id=\"5-3-删\"><a href=\"#5-3-删\" class=\"headerlink\" title=\"5.3 删\"></a>5.3 删</h2><p>方法1（先找到这个人，然后remove）：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Student.find(&#123;<span class=\"string\">\"xingming\"</span> : <span class=\"string\">\"小红\"</span>&#125; , <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err , results</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> zhegeren = results[<span class=\"number\">0</span>];</span><br><span class=\"line\">\tzhegeren.remove(<span class=\"function\">(<span class=\"params\">err</span>)=&gt;</span>&#123;</span><br><span class=\"line\">\t\t!err &amp;&amp; <span class=\"built_in\">console</span>.log(<span class=\"string\">\"成功\"</span>);</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>方法2（直接remove）：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Student.remove(&#123;<span class=\"string\">\"xingming\"</span> : <span class=\"string\">\"小花\"</span>&#125; , (err)=&gt;&#123;</span><br><span class=\"line\">\t!err &amp;&amp; <span class=\"built_in\">console</span>.log(<span class=\"string\">\"成功\"</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h2 id=\"5-4-改\"><a href=\"#5-4-改\" class=\"headerlink\" title=\"5.4 改\"></a>5.4 改</h2><p>方法1（找到，改了，然后save）</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Student.find(&#123;<span class=\"string\">\"xingming\"</span> : <span class=\"string\">\"小明\"</span>&#125; , <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err , results</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> thepeople = results[<span class=\"number\">0</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">\tthepeople.sex = <span class=\"string\">\"女\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\tthepeople.save(<span class=\"function\">(<span class=\"params\">err</span>)=&gt;</span>&#123;</span><br><span class=\"line\">\t\t!err &amp;&amp; <span class=\"built_in\">console</span>.log(<span class=\"string\">\"成功\"</span>);</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>方法2（直接改）：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Student.update(&#123;<span class=\"string\">\"xingming\"</span> : <span class=\"string\">\"小明\"</span>&#125; , &#123;<span class=\"string\">\"$set\"</span> : &#123;<span class=\"string\">\"age\"</span> : <span class=\"number\">99</span>&#125;&#125; , <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err</span>)</span>&#123;</span><br><span class=\"line\">\t!err &amp;&amp; <span class=\"built_in\">console</span>.log(<span class=\"string\">\"成功\"</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>语法：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Student.update(改变谁 , &#123;<span class=\"string\">\"$set\"</span> : 怎么改&#125; , <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err</span>)</span>&#123;</span><br><span class=\"line\">\t!err &amp;&amp; <span class=\"built_in\">console</span>.log(<span class=\"string\">\"成功\"</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h2 id=\"5-5-查\"><a href=\"#5-5-查\" class=\"headerlink\" title=\"5.5 查\"></a>5.5 查</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Student.find(&#123;<span class=\"string\">\"xingming\"</span> : <span class=\"string\">\"小红\"</span>&#125; , <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err , results</span>)</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h1 id=\"六、Mongoose小案例-小小调查问卷表单\"><a href=\"#六、Mongoose小案例-小小调查问卷表单\" class=\"headerlink\" title=\"六、Mongoose小案例 - 小小调查问卷表单\"></a>六、Mongoose小案例 - 小小调查问卷表单</h1><p><strong>我们设计三个题目：</strong></p>\n<p>【单选题】双十一你最期待的事情：商场打折、淘宝购物节、单身狗过节啦</p>\n<p>【多选题】双十一你想买的东西：零食、衣服、电子产品、美容产品</p>\n<p>【数字题】你预算花费：range条，10块 ~ 20000块</p>\n<p>我们现在从前端、nodejs服务端、数据库，都是JavaScript语境！数据库也是JOSN！所以数组不会变形！</p>\n<p><strong>统计集合中有多少数据：</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; db.surveys.count()</span><br></pre></td></tr></table></figure>\n<p>存储数据库特别简单：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//中间件</span></span><br><span class=\"line\">app.post(<span class=\"string\">\"/tijiao\"</span> , <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req,res</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> form = <span class=\"keyword\">new</span> formidable.IncomingForm();</span><br><span class=\"line\">\tform.parse(req , <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err , fields</span>)</span>&#123;</span><br><span class=\"line\">\t\tSurvey.create(&#123;</span><br><span class=\"line\">\t\t\t<span class=\"string\">\"timu1\"</span> : fields.timu1 ,</span><br><span class=\"line\">\t\t\t<span class=\"string\">\"timu2\"</span> : fields.timu2 ,</span><br><span class=\"line\">\t\t\t<span class=\"string\">\"timu3\"</span> : fields.timu3 ,</span><br><span class=\"line\">\t\t\t<span class=\"string\">\"date\"</span> : <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>()</span><br><span class=\"line\">\t\t&#125;,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err</span>)</span>&#123;</span><br><span class=\"line\">\t\t\tres.json(&#123;<span class=\"string\">\"result\"</span> : err ? <span class=\"number\">-1</span> : <span class=\"number\">1</span>&#125;);</span><br><span class=\"line\">\t\t&#125;);</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>数据可视化：<a href=\"http://echarts.baidu.com/demo.html#pie-simple\" target=\"_blank\" rel=\"noopener\">http://echarts.baidu.com/demo.html#pie-simple</a></p>\n"},{"title":"Node.js入门和企业级项目开发01","mathjax":false,"typora-root-url":"nodejs01","typora-copy-images-to":"nodejs01","abbrlink":3057491457,"date":"2018-11-17T15:58:02.000Z","updated":"2018-11-17T15:58:02.000Z","_content":"\n\n\n# 前言\n\n> 第1天课堂笔记\n>\n> 讲师：邵山欢\n>\n> 日期：2017年11月2日\n\n\n\n# 一、复习B/S架构\n\n## 1.1 B/S架构图示\n\n![](image2.png)\n\n服务器上运行着一些程序，这些程序是PHP、JSP、ASP、Python、Scala等等，这些语言都是后台语言。\n\n-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n> 当用户从浏览器发出HTTP请求（点击了一个超级链接、输入了网址、提交了表单）之后，后台语言就开始执行了。后台语言往往需要根据这个HTTP请求携带的参数，进行不同的、差异化的工作，与数据库通信完毕之后，组件一个页面用HTTP响应发回给浏览器。浏览器解析渲染HTML、CSS和JS脚本。\n\n\n\n## 1.2 集合PHP程序来复习GET请求和POST请求\n\nPHP是一个语言，不能独立运行，必须运行在阿帕奇（Apache）之上。计算机只要安装了这些服务器的软件（比如阿帕奇、IIS、Nginx、Tomcat、glassfish）就能提供HTTP服务，此时计算机就是服务器了。\n\n阿帕奇有一个最大的特点：**就能能够自动根据文件的物理层次映射出URL。**\n\n------------------------------- -------------------------\n| 物理文件的地址                | URL                     |\n| ----------------------------- | ----------------------- |\n| 阿帕奇根目录/index.html       | http://127.0.0.1/       |\n| 阿帕奇根目录/a/index.html     | http://127.0.0.1/a/     |\n| 阿帕奇根目录/a/b/c/index.html | http://127.0.0.1/a/b/c/ |\n\n------------------------------- -------------------------\n\n下面复习一下GET请求和POST请求，我们结合PHP和数据库来做演示案例。\n\n**GET请求的哲学是：问服务器要东西，使用POST请求往往是传给服务器id，希望服务器发回这个id的文章。**\n\n下面就是一个简单的GET请求的PHP程序。\n\n```php+HTML\n<?php\n\t//链接数据库\n\t$conn = mysql_connect(\"localhost\",\"root\",\"123456\");\n\t//选择数据库\n\tmysql_select_db(\"kaolaxinwen\", $conn);\n\t//中文\n\tmysql_query(\"SET NAMES UTF8\");\n\t//得到id\n\t$id = $_GET[\"id\"];\n\t//SQL语句\n\t$sql = \"SELECT * FROM xinwen WHERE id = {$id}\";\n\t//执行SQL语句\n\t$result = mysql_query($sql);\n\t//转变结果的格式\n\t$row = mysql_fetch_array($result);\n?>\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n\t<meta charset=\"UTF-8\">\n\t<title>Document</title>\n\t<style type=\"text/css\">\n\t\t.box{\n\t\t\twidth:1000px;\n\t\t\tmargin: 0 auto;\n\t\t\tbackground-color: skyblue;\n\t\t}\n\t\th1{\n\t\t\ttext-align: center;\n\t\t}\n\t</style>\n</head>\n<body>\n\t<div class=\"box\">\n\t\t<h1><?php echo $row[\"biaoti\"] ?></h1>\n\t\t<div class=\"content\">\n\t\t\t<?php echo $row[\"neirong\"] ?>\n\t\t</div>\n\t</div>\n</body>\n</html>\n```\n\n效果：\n\n![](image3.png)\n\n查看源代码：\n\n![](image4.png)\n\n**POST请求的哲学是：希望服务器根据我的参数来对数据库进行一些增、删、改的操作。**\n\n比如我们做一个表单页面houtai.html，这个页面中的表单在往tijiao.php中提交内容。tijiao.php负责写入数据库。\n\n![](image5.png)\n\n**GET请求优缺点**：便于分享网址、安全性不强、不能传超长的参数。\n\n**POST请求的优缺点**： 不便于分享网址、安全性强、理论是无限长的参数。\n\n\n\n**总结一下你要会的东西：**\n\n-   HTTP有请求、响应。\n\n-   HTTP请求有GET请求和POST请求的区别，要知道他们的优缺点和哲学。\n\n-   知道PHP是如何和数据库交互的。\n\n-   知道GET请求的参数和POST请求的参数。\n\n服务器上的语言有哪些：PHP、JSP、ASP、Python、Scala等等。\n\n今天，它迎来了Node.js。\n\n\n\n**Node.js将JavaScript的触角伸到了服务器上。Node.js让服务器上可以运行JS！**\n\nJS如今不是做个正则、做个轮播图、做个选项卡的浏览器端的语言了！今天，Node.JS可以让JS处理GET请求、POST请求、可以操作数据库！\n\n\n\n# 二、Node.js的诞生和安装\n\n## 2.1 创始人\n\nRayn Dahl发现：以老牌PHP为例，理论上一个8GB内存的服务器可以同时连接的最大用户数为4000个左右。要让Web应用程序支持更多的用户，就需要增加服务器的数量，而Web应用程序的硬件成本当然就上升了。\n\n![](image6.png)\n\n这个哥们就立志要发明一个平台，比PHP、JSP要有更高的性能、并发性。\n\n他将Chrome浏览器的V8引擎（目前世界上最快的JS解析引擎）移植到了服务器上，开发出了Node.js平台。\n\n2009年底，Ryan Dahl在柏林举行的JSConf EU会议上发表关于Node.js的演讲，之后Node.js逐渐流行于世。\n\n**Node.js是一个平台不是一个语言，语言仍然是JavaScript。此时Node.js平台可以让我们用JavaScript语言来开发服务器程序。**\n\n\n\n## 2.2 安装Node.js\n\nnode.js可以安装在windows、mac、linux上（绝大部分的服务器都是linux操作系统）。\n\n语言是一样的，都是JavaScript，所以node.js特别像java虚拟机，大家只需要写一份语言，就可以运行在windows、mac、linux上。\n\nnodejs官网：http://nodejs.org/\n\nnodejs中文网：http://nodejs.cn/\n\n![](image7.png)\n\n下载nodejs：\n\n![](image8.png)\n\nnodejs有稳定版和最新版之分，我们学习的是最新版v8.7.0，今天的稳定版是v6.0.0。\n\n![](image9.png)\n\n双击图标即可进行安装：\n\n| ![img](image10.png) | 正在等待安装                                                 |\n| ------------------- | ------------------------------------------------------------ |\n| ![img](image11.png) | 点击下一步next                                               |\n| ![img](image12.png) | 同意协议，然后下一步                                         |\n| ![img](image13.png) |                                                              |\n| ![img](image14.png) | nodejs的安装包给计算机安装了4个东西。见左图。   不需要我们进行什么操作，直接点击next。 |\n| ![img](image15.png) | 点击Install进行安装。                                        |\n| ![img](image16.png) | 安装成功                                                     |\n\n\n\n我们要检查nodejs是否已经安装成功了。此时需要打开系统的\"命令提示符\"窗口。\n\n| ![img](image17.png) | 按windows徽标键 + R键                                        |\n| ------------------- | ------------------------------------------------------------ |\n| ![img](image18.png) | 输入CMD按回车   CMD就是command命令的缩写。                   |\n| ![img](image19.png) | 然后就能看见这个黑底白字的命令提示符窗口。   我们以后简称“CMD”窗口。 |\n| ![img](image20.png) | 输入node -v   此时就能看见版本号，说明nodejs安装成功了。     |\n\n\n\n## 2.3 什么是环境变量？\n\n任何操作系统（windows、mac、linux）都有环境变量的概念，作用很简单：\n\n**在环境变量中的文件夹里面的所有exe程序都可以被当做系统级别的命令在CMD窗口中被调用。**\n\n对计算机图标点击属性，然后：\n\n![](image21.png)\n\n环境变量是用英语分号隔开的一系列文件夹的路径。比如老师耍宝，将QQ的文件夹添加进去了。\n\n此时再次打开CMD创建，就可以运行QQ命令了：\n\n![](image22.png)\n\n我们的node.js的msi安装包自动的将nodejs的安装目录设置为了环境变量。极大的方便了我们。\n\n因为nodejs的目录在环境变量中，所以我们刚才可以在CMD中运行\n\n`node -v`\n\n\n\n# 三、Node.js的基本使用 - 运行谁就node谁\n\n我们创建今天的案例文件夹，是c盘的node\\_study文件夹，里面创建day1文件夹。\n\n我们先来认知一个事情：**js的运行需要宿主环境。**\n\n\n\n我们创建一个01.js文件：\n\n```javascript\nfor(var i = 0 ; i < 10 ; i++){\n\tconsole.log(i * 2);\n}\n```\n\n这个js文件不能直接拖入浏览器运行，因为没有html宿主环境。\n\n我们必须创建html文件：\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n\t<meta charset=\"UTF-8\">\n\t<title>Document</title>\n</head>\n<body>\n\t<script type=\"text/javascript\" src=\"01.js\"></script>\n</body>\n</html>\n```\n\n浏览这个html文件，此时控制台将有输出。\n\n![](image23.png)\n\nJS需要宿主环境才能运行。截止今日，我们只知道js的一个宿主环境，就是HTML。\n\n今天我们迎来了新的宿主：**nodejs平台！**\n\n\n\n在nodejs平台中运行js文件，此时需要使用CMD窗口。**此时需要将CMD的\"光标路径\"更改为我们的项目文件夹**。\n\n此时使用下面的命令可以切换路径：\n\n```\ncd 路径\n```\n\ncd就是change directory，切换文件夹的意思。\n\n![](image24.png)\n\n我们的口号是：运行谁就node谁\n\n![](image25.png)\n\n告诉大家一个快捷操作：\n\n在项目文件夹中按住shift键的同时，点击鼠标右键，此时就能看见：\n\n![](image26.png)\n\n![](image27.png)\n\n由于nodejs平台没有DOM所以不能使用下面的语法：\n\nwindow、document、alert、document.getElementById()......\n\n但是nodejs能够识别函数、if语句、for、while等等js核心语法：\n\n```javascript\nfor(var i = 0 ; i < 10 ; i++){\n\tconsole.log(haha(i));\n}\n\nfunction haha(a){\n\treturn a * 3;\n}\n```\n\n补充一下：\n\n```\ncls\n```\n\n表示清屏\n\n\n\n# 四、使用Node.js搭建服务器\n\n## 4.1 最简单的demo\n\n我们需要使用nodejs中的内置模块http模块，nodejs中有很多模块，我们最先使用的就是http模块。\n\n```javascript\n//得到内置http模块\nvar http = require(\"http\");\n\n//创建服务器，使用createServer方法来创建服务器。\n//回调函数中有一个req参数表示请求，res参数表示响应。\nvar server = http.createServer(function(req,res){\n\t//输出\n\tres.end(\"Hello NodeJS !!\");\n});\n\n//监听，我们的默认80端口已经被阿帕奇占用了，所以我们监听3000端口。\nserver.listen(3000\n```\n\n先照着写，然后就可以运行这个程序。\n\n![](image28.png)\n\n此时不要关闭CMD窗口！打开浏览器，输入网址：\n\nhttp://127.0.0.1**:3000**/\n\n冒号表示端口号，默认端口是80，但是我们的80被阿帕奇占用了，所以我们就使用3000端口了。\n\n![](image29.png)\n\n如果想要打断服务器的执行，此时在CMD中按ctrl+c键。\n\n![](image30.png)\n\n一旦打断了挂起的CMD，此时浏览器中就崩溃了：\n\n![](image31.png)\n\n**注意：如果改变了js文件，此时刷新浏览器没用，必须重新执行node命令！**\n\n\n\n**两个问题：**\n\n●问题1：\n\n```javascript\nres.end(\"好高兴啊我买了一个iPhone\" + (1+32));\n```\n\n在浏览器中查看源代码，不能看见1+32的运算结果的。这是因为程序运行在服务器上。\n\n\n\n●问题2：\n\n用户的电脑里面没有安装nodejs平台，此时也可以访问nodejs服务器。\n\n因为nodejs运行在服务器上，发给客户端的时候已经变为纯的、平的HTML了！\n\n\n\n**补充：**\n\n● 多条输出用write，但是最后必须有end：\n\n```javascript\nres.write(\"哈哈\");\nres.write(\"哈哈\");\nres.write(\"哈哈\");\nres.write(\"哈哈\");\nres.write(\"哈哈\");\nres.end(\"好高兴啊我买了一个iPhone\" + (4+4));\n```\n\n● res.write()和res.end()中只能是字符串不能是数字：\n\n```javascript\nres.end(123); //错误的\nres.end(\"123\"); //正确的\n```\n\n● 可以结合HTML标签：\n\n```javascript\nres.end(\"<h1>你好，NodeJS我来了</h1>\");\n```\n\n\n\nNode.js中有很多的内置模块，手册就是按模块来列出的API：\n\n![](image32.png)\n\n\n\n## 4.2 使用外置页面\n\n我们现在的目标就是做一个外面的页面public/wangjunkai.html，此时就要使用新的内置模块fs。\n\n**fs模块**最重要的API，就是readFile，可以异步读取文件，第一个参数就是URL，要读取的文件路径（注意：必须以`./`开头，表示从当前js文件出发寻找html文件）。第二个参数是回调函数，表示读取完毕之后做的事情。\n\n```javascript\nfs.readFile(\"./public/wangjunkai.html\" , function(err , data){\n\tres.end(data);  //让res显示文件。\n});\n```\n\n\n\nhttp和fs共同配合完成这个事情：\n\n![](image33.png)\n\n\n\n## 4.3 路由（重点）\n\n上面的案例，不管输入什么URL，都是访问wangjunkai.html页面：\n\n```javascript\nvar server = http.createServer(function(req,res){\n\t//设置UTF8\n\tres.setHeader(\"Content-Type\",\"text/html;charset=UTF8\");\n\t//需要读取文件\n\tfs.readFile(\"./public/wangjunkai.html\" , function(err , data){\n\t\tres.end(data);\n\t});\n});\n```\n\n![](image34.png)\n\n\n\n我们可以利用req.url得到用户输入的URL地址。\n\n```javascript\nvar http = require(\"http\");\nvar fs = require(\"fs\");\n\n//创建一个服务器\nvar server = http.createServer(function(req,res){\n\t//设置UTF8\n\tres.setHeader(\"Content-Type\",\"text/html;charset=UTF8\");\n\t//输出访问的URL地址\n\tif(req.url == \"/mingxing/wjk\"){\n\t\t//需要读取文件\n\t\tfs.readFile(\"./public/wangjunkai.html\" , function(err , data){\n\t\t\tres.end(data);\n\t\t});\n\t}else if(req.url == \"/shuaige/lh\"){\n\t\t//需要读取文件\n\t\tfs.readFile(\"./public/luhan.html\" , function(err , data){\n\t\t\tres.end(data);\n\t\t});\n\t}else{\n\t\tres.end(\"没有这个页面！\");\n\t}\n});\n\n//监听\nserver.listen(3000);\n```\n\n\n\n**顶层路由设计：**\n\n-   物理文件的层次和URL是没有关系的！\n\n-   Node.js可以做顶层路由设计！一个页面想叫什么URL就可以叫做什么URL！\n\n-   用户输入的URL可以被路由映射为任何HTML页面！\n\n![](image35.png)\n\n\n\n现在的时代主流，有意义的URL非常的重要。比如知乎的URL：\n\n| URL                                                 | 用途                 |\n| --------------------------------------------------- | -------------------- |\n| https://www.zhihu.com/people/albanybear/activities  | albanybear用户的活动 |\n| https://www.zhihu.com/people/albanybear/answers     | albanybear用户的回答 |\n| https://www.zhihu.com/people/albanybear/asks        | albanybear用户的提问 |\n| https://www.zhihu.com/people/albanybear/posts       | albanybear用户的文章 |\n| https://www.zhihu.com/people/albanybear/columns     | albanybear用户的专栏 |\n| https://www.zhihu.com/people/albanybear/pins        | albanybear用户的想法 |\n| https://www.zhihu.com/people/albanybear/collections | albanybear用户的收藏 |\n\n老一代的路由：\n\nhttp://www.zhihu.com/tiwen.php?username=albanybear\n\nhttp://www.zhihu.com/answers.php?username=albanybear\n\n\n\n我们现在可以模拟知乎的路由，首先先复习正则表达式的知识：\n\n![](image36.png)\n\n代码：\n\n```javascript\nvar server = http.createServer(function(req,res){\n\t//设置UTF8\n\tres.setHeader(\"Content-Type\",\"text/html;charset=UTF8\");\n\n\t//得到用户的url\n\tvar url = req.url;\n\t//用正则拆\n\tvar arr = url.match(/\\/user\\/(.+)\\/(.+)$/);\n\n\t//验证是否提炼成为了数组\n\tif(!arr){\n\t\tres.end(\"<h1>没有这个网址</h1>\");\n\t\treturn;\n\t}\n\n\t//得到$1，就是正则中的第一个()\n\tvar $1 = arr[1];\n\t//得到$2，就是正则中的第二个()\n\tvar $2 = arr[2];\n\n\t\n\t//模拟数据库\n\tvar users = {\n\t\t\"wangjunkai\" : \"王俊凯\" ,\n\t\t\"liyifeng\" : \"李易峰\",\n\t\t\"luhan\" : \"鹿晗\",\n\t\t\"wuyifan\" : \"吴亦凡\"\n\t};\n\n\tvar list = {\n\t\t\"post\" : \"文章\",\n\t\t\"ask\" : \"提问\",\n\t\t\"answers\" : \"回答\",\n\t\t\"pins\" : \"想法\"\n\t};\n\n\tres.end(\"<h1>欢迎查看\" + users[$1] + \"的\" + list[$2] + \"</h1>\");\n});\n```\n\n我们就模拟出了知乎的路由设计：\n\n![](image37.png)\n\n现在我们就**不能**认为根目录下有一个user文件夹，然后有luhan文件夹，然后有answers文件夹。\n\n\n\n## 4.4 顶层路由设计有不方便的地方\n\n我们刚才通过案例知道了顶层路由设计的方便之处，URL非常的规整，类似知乎的路由。\n\n但是不方便的地方就是一些静态文件：图片、样式表等等。此时都需要一个一个开路由。\n\n比如页面上插入一个图片：\n\n```htl\n<img src=\"wangjunkai.png\" alt=\"\"\n```\n\n此时就要专门给这个图片开路由：\n\n```javascript\n……\nelse if(req.url == \"/mingxing/wangjunkai.png\"){\n\t//设置UTF8\n\tres.setHeader(\"Content-Type\",\"image/png\");\n\t//需要读取文件\n\tfs.readFile(\"./public/wangjunkai.png\" , function(err , data){\n\t\tres.end(data);\n\t});\n}else if(req.url == \"/mingxing/goupi.css\"){\n\t//设置UTF8\n\tres.setHeader(\"Content-Type\",\"text/css\");\n\t//需要读取文件\n\tfs.readFile(\"./public/css.css\" , function(err , data){\n\t\tres.end(data);\n\t});\n}\n……\n```\n\n**理论上：如果页面上有100个图片，此时就要开100个路由。**\n\n我们明天将会在express中介绍将一个文件夹\"静态化\"。就是指这个文件夹中的文件将自动拥有URL路由。\n\n\n\n# 五、模块（重点）\n\n## 5.1 HTML宿主环境中的多js文件\n\nHTML宿主环境中，多个js文件共用一个html宿主，所以它们之间的**作用域是打通的**。\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n\t<meta charset=\"UTF-8\">\n\t<title>Document</title>\n</head>\n<body>\n\t<script type=\"text/javascript\" src=\"1.js\"></script>  → 这里面var a = 100;\n\t<script type=\"text/javascript\" src=\"2.js\"></script>  → 能够alert(a);\n</body>\n</html>\n```\n\n因为1.js文件中定义的**a是全局变量就是window的属性**，2.js文件中当然共用window对象。\n\nnodejs是如何处理多个js文件的？多个js文件如何搭配工作，是后面40分钟的内容。\n\n\n\n## 5.2 require谁就会运行谁\n\n```\n┣ app.js\n┣ a.js\n```\n\napp.js:\n\n```javascript\nrequire(\"./a.js\");\nconsole.log(\"我是app.js\");\n```\n\na.js:\n\n```javascript\nconsole.log(\"你好我是a.js\");\n```\n\n现在node app.js\n\n![](image38.png)\n\n**在nodejs中，可以js文件中require（引用）另一个js文件，此时就会立即运行那个引用的js文件**。\n\napp.js可以require a.js文件，a.js文件也可以require b.js文件。\n\n\n\n## 5.3 js文件在Node.js中天生作用域隔离\n\n```\n┣ app.js\n┣ a.js\n```\n\n在a.js文件中定义了所谓的\"全局\"m，然后app.js文件引用a.js之后，尝试显示m变量。\n\napp.js:\n\n```javascript\nrequire(\"./a.js\");\nconsole.log(m);\n```\n\na.js：\n\n```javascript\nvar m = 100;  //尝试定义全局变量\n```\n\n此时node app.js报错了。\n\n![](image39.png)\n\n**js文件在Node.js中天生作用域隔离的！为什么？**\n\n**因为没有了window对象。**\n\n\n\n## 5.4 使用`exports.** = ** `的语法进行暴露\n\n```\n┣ app.js\n┣ a.js\n```\n\na.js文件中定义了m值，并且进行了暴露。\n\n```javascript\nvar m = 100;\nexports.m = m;\n```\n\n在app.js文件中：\n\n```javascript\nvar a = require(\"./a.js\");\nconsole.log(a.m);\n```\n\n\n\n**需要注意的是两点：**\n\n① 建议：暴露的时候必须是`exports.** = ** `， \\*\\*必须一致。你别玩杂技。\n\n明明变量是m你非要用n暴露。\n\n```javascript\n//错误的：\nvar m = 100;\nexports.n = m;\n```\n\n虽然语法没有问题，但是成熟程序员不会这样玩儿。\n\n② 建议：接收的时候，文件名是什么，就用什么接收。你别玩杂技。\n\n```javascript\n//正确的：\nvar a = require(\"./a.js\");\nconsole.log(a.m);\n\n//错误的：\nvar b = require(\"./a.js\");\nconsole.log(a.m);\n```\n\nnodejs在运行的时候，接受的那个变量（a）会自动成为exports对象。\n\n`exports.** = **`的写法天生有namespace（命名空间）\n\n```\n┣ app.js\n┣ yuan.js\n┣ juxing.js\n```\n\nyuan.js和juxing.js文件里面都定义了mianji和zhouchang函数，但是引入的时候由于又命名空间，所以不乱套。\n\n```javascript\nvar yuan = require(\"./yuan.js\");\nvar juxing = require(\"./juxing.js\");\n\nconsole.log(yuan.mianji(15));\nconsole.log(yuan.zhouchang(15));\nconsole.log(juxing.mianji(10,12));\nconsole.log(juxing.zhouchang(10,12));\n```\n\n![](image40.png)\n\n\n\n## 5.5 使用`module.exports = ** `暴露\n\n当一个js文件中仅仅希望暴露一个东西（通常是构造函数），此时我们可以使用`module.exports = ** `的方法暴露。\n\n```\n┣ app.js\n┣ People.js\n```\n\nPeople.js:\n\n```javascript\nfunction People(name,age,sex){\n\tthis.name = name;\n\tthis.age = age;\n\tthis.sex = sex;\n}\nPeople.prototype.sayHello = function(){\n\tconsole.log(\"你好我是\" + this.name);\n}\n\nmodule.exports = People\n```\n\napp.js:\n\n```javascript\nvar People = require(\"./People.js\");\n\nvar xiaoming = new People(\"小明\" , 12 , \"男\");\nxiaoming.sayHello();\n```\n\n\n\n如果仍然使用exports.People = People的方法暴露，此时就势必要：\n\n```javascript\nvar xiaoming = new People.People(\"小明\" , 12 , \"男\");\n```\n\n\n\n**总结一下：**\n\n● 如果一个js文件中有多个东西要暴露（通常是暴露一些相关的函数比如面积、周长），此时用`exports.** = **`暴露。\n\n● 如果一个js文件中只暴露一个文件（通常是构造函数），此时用`module.exports = **; `暴露。\n\n\n\n## 5.6 使用文件夹\n\n```\n┣ app.js\n┣ jihe\n┃ ┣ yuan.js\n┃ ┣ juxing.js\n┃ ┣ index.js\n```\n\n我们将yuan.js和juxing.js放入了一个叫做jihe的文件夹中，被index.js\"统领\"。\n\n此时我们先看jihe/index.js:\n\n```javascript\nvar juxing = require(\"./juxing.js\");\nvar yuan = require(\"./yuan.js\");\n\nexports.juxing = juxing;\nexports.yuan = yuan;\n```\n\n这个文件很性感，接受之后什么都不调用直接暴露。这个文件的作用就是一个小中转器，是一个小统领。\n\n此时yuan.js、juxing.js的文件内容和5.4一致，不再写了。\n\napp.js\n\n```javascript\nvar jihe = require(\"./jihe\");\n\nconsole.log(jihe.yuan.mianji(10));\nconsole.log(jihe.juxing.zhouchang(10,19));\n```\n\n需要注意，当我们require()的时候，如果没有写.js后缀，此时nodejs将认为我们在引入一个文件夹，此时将会自动引入这个文件夹中的index.js文件。\n\n也就是说\n\n```javascript\nvar jihe = require(\"./jihe\");\n```\n\n等价于：\n\n```javascript\nvar jihe = require(\"./jihe/index.js\")\n```\n\n注意`./`不能省！！\n\n\n\n## 5.7 神奇的node\\_modules文件夹\n\n**nodejs中有一个设置，就是如果js的文件夹放入了node\\_modules文件夹中，此时引用它的将可以不写`./`**。\n\n```\n┣ app.js\n┣ node_modules\n┃  ┣ jihe\n┃  ┃  ┣ yuan.js\n┃  ┃  ┣ juxing.js\n┃  ┃  ┣ index.js\n```\n\njihe文件夹中的内容和5.6小节一样的，不写了。\n\napp.js引用jihe.js文件的时候，此时require的特别漂亮！\n\n```javascript\nvar jihe = require(\"jihe\");\n\nconsole.log(jihe.yuan.mianji(10));\nconsole.log(jihe.juxing.zhouchang(10,19));\n```\n\n也就是说：\n\n\n| require的形式     | 引用的谁                                      |\n| ----------------- | --------------------------------------------- |\n| require(\"./a.js\") | 同目录的a.js文件                              |\n| require(\"./a\")    | a文件夹中的index.js文件                       |\n| require(\"a\")      | node_modules文件夹中的a文件夹中的index.js文件 |\n| require(\"a.js\")   | node_modules文件夹中的a.js                    |\n\n\n\n## 5.8 模块的概念\n\n当一个js文件可以独立完成一个事情，这个js文件就是一个模块。\n\n当一些js文件共同配合完成一个事情，这些js文件就是一个模块。\n\n模块（module，不是model模型）是一个文件的功能性的、组织性的概念，不是物理性的概念。\n\njuxing.js是一个模块，因为它可以独立完成关于矩形的所有计算。\n\nyuan.js也是一个模块，因为它可以独立完成关于圆形的所有计算。\n\n他们结合在一起，成为jihe文件夹，jihe又称一个新模块。\n\n\n\n# 六、npm的世界\n\n## 6.1 npm install命令\n\n这是一个模块的分享社区，我们可以免费的、自由的使用别人的模块。\n\n而别人的模块，很可能也在使用其他人的模块。每个人都站在巨人的肩膀上，这个世界变得更简单，轮子不需要重复的造，我们只专注于造汽车。\n\n比如有一天，老板让你实现当用户输入网址\n\nhttp://127.0.0.1:3000/12321\n\n的时候，页面显示一二三二一。或者一万两千三百二十一元。\n\n此时你会路由的知识，但是不知道如何进行阿拉伯数字和汉语的转换。\n\n找模块！找巨人！npm就是这样的社区，npm就是node package manager的意思。\n\nnode包管理器。\n\n官网：https://www.npmjs.com/\n\n> npm is the package manager for JavaScript and the world's largest software registry. Discover packages of reusable code --- and assemble them in powerful new ways.\n>\n> npm是JavaScript的包管理器，是世界上最大的软件托管仓库。浏览这些包，这些包都是可服用的代码。组合他们开发出你自己的新的东西！\n\n输入大写，按回车：\n\n![](image41.png)\n\n我们发现了一个叫做nzh的一个包，网址：https://www.npmjs.com/package/nzh\n\n此时我们想要下载这个叫做nzh的包，此时我们使用CMD命令：\n\n```\nnpm install nzh\n```\n\n\n\nnpm包管理器随着nodejs安装而安装了。所以我们已经可以使用npm了。\n\n注意要使用npm的时候，必须联网。\n\n当我们输入`npm install nzh`之后，此时项目文件夹中就自动多了`node\\_modules`文件夹。\n\n![](image42.png)\n\nnode\\_modules文件夹中就有了nzh文件夹！这是一个模块！\n\n![](image43.png)\n\n此时通过查看API我们可以写出app.js文件了：\n\n```javascript\nvar nzh = require(\"nzh\");\nvar nzhcn = nzh.cn; \nconsole.log(nzhcn.toMoney(12321))\n```\n\n也就是说别人开发的nzh这个包现在就被我们自己使用了！\n\n这里说一嘴，所有的API的路径都是\n\n```\nhttps://www.npmjs.com/package/包名字\n```\n\n\n\n老板新需求：让你把1997年5月8日变为农历。\n\n![](image44.png)\n\n参考API，此时就能写出自己的程序：\n\n```javascript\nvar solarLunar = require(\"solarlunar\")\n\n//API看来的\nvar obj = solarLunar.solar2lunar(1997, 5, 8);\nconsole.log(obj.gzYear + obj.gzMonth + obj.gzDay);\n```\n\n\n\n老板新需求：将一个数组变为excel表格。\n\n此时我们下载node-xlsx这个包，此时你会发现依赖的依赖也会被同时下载。\n\n```\nnpm install node-xlsx\n```\n\n结合API我们写：\n\n```javascript\nvar xlsx = require(\"node-xlsx\");\nvar fs = require(\"fs\");\n\n//API看来的\nvar data = [[\"国家\",\"人口\",\"GDP\"],[\"中国\",13,200],[\"印度\",15,1],[\"日本\",1,0.08]];\nvar buffer = xlsx.build([{name: \"各国数据\", data: data}]);  \nfs.writeFile(\"./老板请您简约.xlsx\" , buffer);\n```\n\n\n\n## 6.2 依赖\n\n我们从npm上下载的node\\_modules文件夹称之为依赖。\n\n此时我们可以用package.json文件管理这些依赖，我们称为项目的\"身份证\"。\n\n我们在开发项目的时候，第一步就是创建一个项目的身份证。\n\n```\nnpm init\n```\n\n![](image45.png)\n\n就会显示一个调查问卷。将引导你创建这个身份证。\n\n![](image46.png)\n\n他会询问你包名字、版本、描述、入口文件、测试命令、git网址、关键词、作者、版权协议。\n\n你回答一下，系统会猜测一些答案就是括号中的内容，直接按回车就是使用它。\n\n系统会创建这个文件：\n\n![](image47.png)\n\n内容：\n\n```json\n{\n  \"name\": \"day1\",\n  \"version\": \"0.0.1\",\n  \"description\": \"这是考拉老师的一个案例\",\n  \"main\": \"app.js\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n  },\n  \"keywords\": [\n    \"考拉\",\n    \"牛逼\",\n    \"爱前端\"\n  ],\n  \"author\": \"考拉\",\n  \"license\": \"MIT\"\n}\n```\n\n\n\n今后安装依赖的时候要加上\\--save后缀，比如：\n\n```\nnpm install nzh --save\n```\n\n此时加上`--save`之后，我们身份证会自动更新一个依赖项：\n\n```json\n{\n  \"name\": \"day1\",\n  \"version\": \"0.0.1\",\n  \"description\": \"这是考拉老师的一个案例\",\n  \"main\": \"app.js\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n  },\n  \"keywords\": [\n    \"考拉\",\n    \"牛逼\",\n    \"爱前端\"\n  ],\n  \"author\": \"考拉\",\n  \"license\": \"MIT\",\n  \"dependencies\": {\n    \"node-xlsx\": \"^0.11.0\",\n    \"nzh\": \"^1.0.1\",\n    \"solarlunar\": \"^2.0.1\"\n  }\n}\n```\n\n\n\n**有了这个有什么好处呢？？**\n\n此时我们的项目拷贝给别人的时候、做版本管理的时候，可以完全忽略node\\_modules文件夹！\n\n因为我们任何使用可以使用\n\n```\nnpm install\n```\n\n来安装项目的所有依赖。\n\n","source":"_posts/Dev/nodejs/nodejs01.md","raw":"---\ntitle: Node.js入门和企业级项目开发01\nmathjax: false\ntypora-root-url: nodejs01\ntypora-copy-images-to: nodejs01\ncategories:\n  - nodejs\nabbrlink: 3057491457\ndate: 2018-11-17 23:58:02\nupdated: 2018-11-17 23:58:02\ntags:\n---\n\n\n\n# 前言\n\n> 第1天课堂笔记\n>\n> 讲师：邵山欢\n>\n> 日期：2017年11月2日\n\n\n\n# 一、复习B/S架构\n\n## 1.1 B/S架构图示\n\n![](image2.png)\n\n服务器上运行着一些程序，这些程序是PHP、JSP、ASP、Python、Scala等等，这些语言都是后台语言。\n\n-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n> 当用户从浏览器发出HTTP请求（点击了一个超级链接、输入了网址、提交了表单）之后，后台语言就开始执行了。后台语言往往需要根据这个HTTP请求携带的参数，进行不同的、差异化的工作，与数据库通信完毕之后，组件一个页面用HTTP响应发回给浏览器。浏览器解析渲染HTML、CSS和JS脚本。\n\n\n\n## 1.2 集合PHP程序来复习GET请求和POST请求\n\nPHP是一个语言，不能独立运行，必须运行在阿帕奇（Apache）之上。计算机只要安装了这些服务器的软件（比如阿帕奇、IIS、Nginx、Tomcat、glassfish）就能提供HTTP服务，此时计算机就是服务器了。\n\n阿帕奇有一个最大的特点：**就能能够自动根据文件的物理层次映射出URL。**\n\n------------------------------- -------------------------\n| 物理文件的地址                | URL                     |\n| ----------------------------- | ----------------------- |\n| 阿帕奇根目录/index.html       | http://127.0.0.1/       |\n| 阿帕奇根目录/a/index.html     | http://127.0.0.1/a/     |\n| 阿帕奇根目录/a/b/c/index.html | http://127.0.0.1/a/b/c/ |\n\n------------------------------- -------------------------\n\n下面复习一下GET请求和POST请求，我们结合PHP和数据库来做演示案例。\n\n**GET请求的哲学是：问服务器要东西，使用POST请求往往是传给服务器id，希望服务器发回这个id的文章。**\n\n下面就是一个简单的GET请求的PHP程序。\n\n```php+HTML\n<?php\n\t//链接数据库\n\t$conn = mysql_connect(\"localhost\",\"root\",\"123456\");\n\t//选择数据库\n\tmysql_select_db(\"kaolaxinwen\", $conn);\n\t//中文\n\tmysql_query(\"SET NAMES UTF8\");\n\t//得到id\n\t$id = $_GET[\"id\"];\n\t//SQL语句\n\t$sql = \"SELECT * FROM xinwen WHERE id = {$id}\";\n\t//执行SQL语句\n\t$result = mysql_query($sql);\n\t//转变结果的格式\n\t$row = mysql_fetch_array($result);\n?>\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n\t<meta charset=\"UTF-8\">\n\t<title>Document</title>\n\t<style type=\"text/css\">\n\t\t.box{\n\t\t\twidth:1000px;\n\t\t\tmargin: 0 auto;\n\t\t\tbackground-color: skyblue;\n\t\t}\n\t\th1{\n\t\t\ttext-align: center;\n\t\t}\n\t</style>\n</head>\n<body>\n\t<div class=\"box\">\n\t\t<h1><?php echo $row[\"biaoti\"] ?></h1>\n\t\t<div class=\"content\">\n\t\t\t<?php echo $row[\"neirong\"] ?>\n\t\t</div>\n\t</div>\n</body>\n</html>\n```\n\n效果：\n\n![](image3.png)\n\n查看源代码：\n\n![](image4.png)\n\n**POST请求的哲学是：希望服务器根据我的参数来对数据库进行一些增、删、改的操作。**\n\n比如我们做一个表单页面houtai.html，这个页面中的表单在往tijiao.php中提交内容。tijiao.php负责写入数据库。\n\n![](image5.png)\n\n**GET请求优缺点**：便于分享网址、安全性不强、不能传超长的参数。\n\n**POST请求的优缺点**： 不便于分享网址、安全性强、理论是无限长的参数。\n\n\n\n**总结一下你要会的东西：**\n\n-   HTTP有请求、响应。\n\n-   HTTP请求有GET请求和POST请求的区别，要知道他们的优缺点和哲学。\n\n-   知道PHP是如何和数据库交互的。\n\n-   知道GET请求的参数和POST请求的参数。\n\n服务器上的语言有哪些：PHP、JSP、ASP、Python、Scala等等。\n\n今天，它迎来了Node.js。\n\n\n\n**Node.js将JavaScript的触角伸到了服务器上。Node.js让服务器上可以运行JS！**\n\nJS如今不是做个正则、做个轮播图、做个选项卡的浏览器端的语言了！今天，Node.JS可以让JS处理GET请求、POST请求、可以操作数据库！\n\n\n\n# 二、Node.js的诞生和安装\n\n## 2.1 创始人\n\nRayn Dahl发现：以老牌PHP为例，理论上一个8GB内存的服务器可以同时连接的最大用户数为4000个左右。要让Web应用程序支持更多的用户，就需要增加服务器的数量，而Web应用程序的硬件成本当然就上升了。\n\n![](image6.png)\n\n这个哥们就立志要发明一个平台，比PHP、JSP要有更高的性能、并发性。\n\n他将Chrome浏览器的V8引擎（目前世界上最快的JS解析引擎）移植到了服务器上，开发出了Node.js平台。\n\n2009年底，Ryan Dahl在柏林举行的JSConf EU会议上发表关于Node.js的演讲，之后Node.js逐渐流行于世。\n\n**Node.js是一个平台不是一个语言，语言仍然是JavaScript。此时Node.js平台可以让我们用JavaScript语言来开发服务器程序。**\n\n\n\n## 2.2 安装Node.js\n\nnode.js可以安装在windows、mac、linux上（绝大部分的服务器都是linux操作系统）。\n\n语言是一样的，都是JavaScript，所以node.js特别像java虚拟机，大家只需要写一份语言，就可以运行在windows、mac、linux上。\n\nnodejs官网：http://nodejs.org/\n\nnodejs中文网：http://nodejs.cn/\n\n![](image7.png)\n\n下载nodejs：\n\n![](image8.png)\n\nnodejs有稳定版和最新版之分，我们学习的是最新版v8.7.0，今天的稳定版是v6.0.0。\n\n![](image9.png)\n\n双击图标即可进行安装：\n\n| ![img](image10.png) | 正在等待安装                                                 |\n| ------------------- | ------------------------------------------------------------ |\n| ![img](image11.png) | 点击下一步next                                               |\n| ![img](image12.png) | 同意协议，然后下一步                                         |\n| ![img](image13.png) |                                                              |\n| ![img](image14.png) | nodejs的安装包给计算机安装了4个东西。见左图。   不需要我们进行什么操作，直接点击next。 |\n| ![img](image15.png) | 点击Install进行安装。                                        |\n| ![img](image16.png) | 安装成功                                                     |\n\n\n\n我们要检查nodejs是否已经安装成功了。此时需要打开系统的\"命令提示符\"窗口。\n\n| ![img](image17.png) | 按windows徽标键 + R键                                        |\n| ------------------- | ------------------------------------------------------------ |\n| ![img](image18.png) | 输入CMD按回车   CMD就是command命令的缩写。                   |\n| ![img](image19.png) | 然后就能看见这个黑底白字的命令提示符窗口。   我们以后简称“CMD”窗口。 |\n| ![img](image20.png) | 输入node -v   此时就能看见版本号，说明nodejs安装成功了。     |\n\n\n\n## 2.3 什么是环境变量？\n\n任何操作系统（windows、mac、linux）都有环境变量的概念，作用很简单：\n\n**在环境变量中的文件夹里面的所有exe程序都可以被当做系统级别的命令在CMD窗口中被调用。**\n\n对计算机图标点击属性，然后：\n\n![](image21.png)\n\n环境变量是用英语分号隔开的一系列文件夹的路径。比如老师耍宝，将QQ的文件夹添加进去了。\n\n此时再次打开CMD创建，就可以运行QQ命令了：\n\n![](image22.png)\n\n我们的node.js的msi安装包自动的将nodejs的安装目录设置为了环境变量。极大的方便了我们。\n\n因为nodejs的目录在环境变量中，所以我们刚才可以在CMD中运行\n\n`node -v`\n\n\n\n# 三、Node.js的基本使用 - 运行谁就node谁\n\n我们创建今天的案例文件夹，是c盘的node\\_study文件夹，里面创建day1文件夹。\n\n我们先来认知一个事情：**js的运行需要宿主环境。**\n\n\n\n我们创建一个01.js文件：\n\n```javascript\nfor(var i = 0 ; i < 10 ; i++){\n\tconsole.log(i * 2);\n}\n```\n\n这个js文件不能直接拖入浏览器运行，因为没有html宿主环境。\n\n我们必须创建html文件：\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n\t<meta charset=\"UTF-8\">\n\t<title>Document</title>\n</head>\n<body>\n\t<script type=\"text/javascript\" src=\"01.js\"></script>\n</body>\n</html>\n```\n\n浏览这个html文件，此时控制台将有输出。\n\n![](image23.png)\n\nJS需要宿主环境才能运行。截止今日，我们只知道js的一个宿主环境，就是HTML。\n\n今天我们迎来了新的宿主：**nodejs平台！**\n\n\n\n在nodejs平台中运行js文件，此时需要使用CMD窗口。**此时需要将CMD的\"光标路径\"更改为我们的项目文件夹**。\n\n此时使用下面的命令可以切换路径：\n\n```\ncd 路径\n```\n\ncd就是change directory，切换文件夹的意思。\n\n![](image24.png)\n\n我们的口号是：运行谁就node谁\n\n![](image25.png)\n\n告诉大家一个快捷操作：\n\n在项目文件夹中按住shift键的同时，点击鼠标右键，此时就能看见：\n\n![](image26.png)\n\n![](image27.png)\n\n由于nodejs平台没有DOM所以不能使用下面的语法：\n\nwindow、document、alert、document.getElementById()......\n\n但是nodejs能够识别函数、if语句、for、while等等js核心语法：\n\n```javascript\nfor(var i = 0 ; i < 10 ; i++){\n\tconsole.log(haha(i));\n}\n\nfunction haha(a){\n\treturn a * 3;\n}\n```\n\n补充一下：\n\n```\ncls\n```\n\n表示清屏\n\n\n\n# 四、使用Node.js搭建服务器\n\n## 4.1 最简单的demo\n\n我们需要使用nodejs中的内置模块http模块，nodejs中有很多模块，我们最先使用的就是http模块。\n\n```javascript\n//得到内置http模块\nvar http = require(\"http\");\n\n//创建服务器，使用createServer方法来创建服务器。\n//回调函数中有一个req参数表示请求，res参数表示响应。\nvar server = http.createServer(function(req,res){\n\t//输出\n\tres.end(\"Hello NodeJS !!\");\n});\n\n//监听，我们的默认80端口已经被阿帕奇占用了，所以我们监听3000端口。\nserver.listen(3000\n```\n\n先照着写，然后就可以运行这个程序。\n\n![](image28.png)\n\n此时不要关闭CMD窗口！打开浏览器，输入网址：\n\nhttp://127.0.0.1**:3000**/\n\n冒号表示端口号，默认端口是80，但是我们的80被阿帕奇占用了，所以我们就使用3000端口了。\n\n![](image29.png)\n\n如果想要打断服务器的执行，此时在CMD中按ctrl+c键。\n\n![](image30.png)\n\n一旦打断了挂起的CMD，此时浏览器中就崩溃了：\n\n![](image31.png)\n\n**注意：如果改变了js文件，此时刷新浏览器没用，必须重新执行node命令！**\n\n\n\n**两个问题：**\n\n●问题1：\n\n```javascript\nres.end(\"好高兴啊我买了一个iPhone\" + (1+32));\n```\n\n在浏览器中查看源代码，不能看见1+32的运算结果的。这是因为程序运行在服务器上。\n\n\n\n●问题2：\n\n用户的电脑里面没有安装nodejs平台，此时也可以访问nodejs服务器。\n\n因为nodejs运行在服务器上，发给客户端的时候已经变为纯的、平的HTML了！\n\n\n\n**补充：**\n\n● 多条输出用write，但是最后必须有end：\n\n```javascript\nres.write(\"哈哈\");\nres.write(\"哈哈\");\nres.write(\"哈哈\");\nres.write(\"哈哈\");\nres.write(\"哈哈\");\nres.end(\"好高兴啊我买了一个iPhone\" + (4+4));\n```\n\n● res.write()和res.end()中只能是字符串不能是数字：\n\n```javascript\nres.end(123); //错误的\nres.end(\"123\"); //正确的\n```\n\n● 可以结合HTML标签：\n\n```javascript\nres.end(\"<h1>你好，NodeJS我来了</h1>\");\n```\n\n\n\nNode.js中有很多的内置模块，手册就是按模块来列出的API：\n\n![](image32.png)\n\n\n\n## 4.2 使用外置页面\n\n我们现在的目标就是做一个外面的页面public/wangjunkai.html，此时就要使用新的内置模块fs。\n\n**fs模块**最重要的API，就是readFile，可以异步读取文件，第一个参数就是URL，要读取的文件路径（注意：必须以`./`开头，表示从当前js文件出发寻找html文件）。第二个参数是回调函数，表示读取完毕之后做的事情。\n\n```javascript\nfs.readFile(\"./public/wangjunkai.html\" , function(err , data){\n\tres.end(data);  //让res显示文件。\n});\n```\n\n\n\nhttp和fs共同配合完成这个事情：\n\n![](image33.png)\n\n\n\n## 4.3 路由（重点）\n\n上面的案例，不管输入什么URL，都是访问wangjunkai.html页面：\n\n```javascript\nvar server = http.createServer(function(req,res){\n\t//设置UTF8\n\tres.setHeader(\"Content-Type\",\"text/html;charset=UTF8\");\n\t//需要读取文件\n\tfs.readFile(\"./public/wangjunkai.html\" , function(err , data){\n\t\tres.end(data);\n\t});\n});\n```\n\n![](image34.png)\n\n\n\n我们可以利用req.url得到用户输入的URL地址。\n\n```javascript\nvar http = require(\"http\");\nvar fs = require(\"fs\");\n\n//创建一个服务器\nvar server = http.createServer(function(req,res){\n\t//设置UTF8\n\tres.setHeader(\"Content-Type\",\"text/html;charset=UTF8\");\n\t//输出访问的URL地址\n\tif(req.url == \"/mingxing/wjk\"){\n\t\t//需要读取文件\n\t\tfs.readFile(\"./public/wangjunkai.html\" , function(err , data){\n\t\t\tres.end(data);\n\t\t});\n\t}else if(req.url == \"/shuaige/lh\"){\n\t\t//需要读取文件\n\t\tfs.readFile(\"./public/luhan.html\" , function(err , data){\n\t\t\tres.end(data);\n\t\t});\n\t}else{\n\t\tres.end(\"没有这个页面！\");\n\t}\n});\n\n//监听\nserver.listen(3000);\n```\n\n\n\n**顶层路由设计：**\n\n-   物理文件的层次和URL是没有关系的！\n\n-   Node.js可以做顶层路由设计！一个页面想叫什么URL就可以叫做什么URL！\n\n-   用户输入的URL可以被路由映射为任何HTML页面！\n\n![](image35.png)\n\n\n\n现在的时代主流，有意义的URL非常的重要。比如知乎的URL：\n\n| URL                                                 | 用途                 |\n| --------------------------------------------------- | -------------------- |\n| https://www.zhihu.com/people/albanybear/activities  | albanybear用户的活动 |\n| https://www.zhihu.com/people/albanybear/answers     | albanybear用户的回答 |\n| https://www.zhihu.com/people/albanybear/asks        | albanybear用户的提问 |\n| https://www.zhihu.com/people/albanybear/posts       | albanybear用户的文章 |\n| https://www.zhihu.com/people/albanybear/columns     | albanybear用户的专栏 |\n| https://www.zhihu.com/people/albanybear/pins        | albanybear用户的想法 |\n| https://www.zhihu.com/people/albanybear/collections | albanybear用户的收藏 |\n\n老一代的路由：\n\nhttp://www.zhihu.com/tiwen.php?username=albanybear\n\nhttp://www.zhihu.com/answers.php?username=albanybear\n\n\n\n我们现在可以模拟知乎的路由，首先先复习正则表达式的知识：\n\n![](image36.png)\n\n代码：\n\n```javascript\nvar server = http.createServer(function(req,res){\n\t//设置UTF8\n\tres.setHeader(\"Content-Type\",\"text/html;charset=UTF8\");\n\n\t//得到用户的url\n\tvar url = req.url;\n\t//用正则拆\n\tvar arr = url.match(/\\/user\\/(.+)\\/(.+)$/);\n\n\t//验证是否提炼成为了数组\n\tif(!arr){\n\t\tres.end(\"<h1>没有这个网址</h1>\");\n\t\treturn;\n\t}\n\n\t//得到$1，就是正则中的第一个()\n\tvar $1 = arr[1];\n\t//得到$2，就是正则中的第二个()\n\tvar $2 = arr[2];\n\n\t\n\t//模拟数据库\n\tvar users = {\n\t\t\"wangjunkai\" : \"王俊凯\" ,\n\t\t\"liyifeng\" : \"李易峰\",\n\t\t\"luhan\" : \"鹿晗\",\n\t\t\"wuyifan\" : \"吴亦凡\"\n\t};\n\n\tvar list = {\n\t\t\"post\" : \"文章\",\n\t\t\"ask\" : \"提问\",\n\t\t\"answers\" : \"回答\",\n\t\t\"pins\" : \"想法\"\n\t};\n\n\tres.end(\"<h1>欢迎查看\" + users[$1] + \"的\" + list[$2] + \"</h1>\");\n});\n```\n\n我们就模拟出了知乎的路由设计：\n\n![](image37.png)\n\n现在我们就**不能**认为根目录下有一个user文件夹，然后有luhan文件夹，然后有answers文件夹。\n\n\n\n## 4.4 顶层路由设计有不方便的地方\n\n我们刚才通过案例知道了顶层路由设计的方便之处，URL非常的规整，类似知乎的路由。\n\n但是不方便的地方就是一些静态文件：图片、样式表等等。此时都需要一个一个开路由。\n\n比如页面上插入一个图片：\n\n```htl\n<img src=\"wangjunkai.png\" alt=\"\"\n```\n\n此时就要专门给这个图片开路由：\n\n```javascript\n……\nelse if(req.url == \"/mingxing/wangjunkai.png\"){\n\t//设置UTF8\n\tres.setHeader(\"Content-Type\",\"image/png\");\n\t//需要读取文件\n\tfs.readFile(\"./public/wangjunkai.png\" , function(err , data){\n\t\tres.end(data);\n\t});\n}else if(req.url == \"/mingxing/goupi.css\"){\n\t//设置UTF8\n\tres.setHeader(\"Content-Type\",\"text/css\");\n\t//需要读取文件\n\tfs.readFile(\"./public/css.css\" , function(err , data){\n\t\tres.end(data);\n\t});\n}\n……\n```\n\n**理论上：如果页面上有100个图片，此时就要开100个路由。**\n\n我们明天将会在express中介绍将一个文件夹\"静态化\"。就是指这个文件夹中的文件将自动拥有URL路由。\n\n\n\n# 五、模块（重点）\n\n## 5.1 HTML宿主环境中的多js文件\n\nHTML宿主环境中，多个js文件共用一个html宿主，所以它们之间的**作用域是打通的**。\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n\t<meta charset=\"UTF-8\">\n\t<title>Document</title>\n</head>\n<body>\n\t<script type=\"text/javascript\" src=\"1.js\"></script>  → 这里面var a = 100;\n\t<script type=\"text/javascript\" src=\"2.js\"></script>  → 能够alert(a);\n</body>\n</html>\n```\n\n因为1.js文件中定义的**a是全局变量就是window的属性**，2.js文件中当然共用window对象。\n\nnodejs是如何处理多个js文件的？多个js文件如何搭配工作，是后面40分钟的内容。\n\n\n\n## 5.2 require谁就会运行谁\n\n```\n┣ app.js\n┣ a.js\n```\n\napp.js:\n\n```javascript\nrequire(\"./a.js\");\nconsole.log(\"我是app.js\");\n```\n\na.js:\n\n```javascript\nconsole.log(\"你好我是a.js\");\n```\n\n现在node app.js\n\n![](image38.png)\n\n**在nodejs中，可以js文件中require（引用）另一个js文件，此时就会立即运行那个引用的js文件**。\n\napp.js可以require a.js文件，a.js文件也可以require b.js文件。\n\n\n\n## 5.3 js文件在Node.js中天生作用域隔离\n\n```\n┣ app.js\n┣ a.js\n```\n\n在a.js文件中定义了所谓的\"全局\"m，然后app.js文件引用a.js之后，尝试显示m变量。\n\napp.js:\n\n```javascript\nrequire(\"./a.js\");\nconsole.log(m);\n```\n\na.js：\n\n```javascript\nvar m = 100;  //尝试定义全局变量\n```\n\n此时node app.js报错了。\n\n![](image39.png)\n\n**js文件在Node.js中天生作用域隔离的！为什么？**\n\n**因为没有了window对象。**\n\n\n\n## 5.4 使用`exports.** = ** `的语法进行暴露\n\n```\n┣ app.js\n┣ a.js\n```\n\na.js文件中定义了m值，并且进行了暴露。\n\n```javascript\nvar m = 100;\nexports.m = m;\n```\n\n在app.js文件中：\n\n```javascript\nvar a = require(\"./a.js\");\nconsole.log(a.m);\n```\n\n\n\n**需要注意的是两点：**\n\n① 建议：暴露的时候必须是`exports.** = ** `， \\*\\*必须一致。你别玩杂技。\n\n明明变量是m你非要用n暴露。\n\n```javascript\n//错误的：\nvar m = 100;\nexports.n = m;\n```\n\n虽然语法没有问题，但是成熟程序员不会这样玩儿。\n\n② 建议：接收的时候，文件名是什么，就用什么接收。你别玩杂技。\n\n```javascript\n//正确的：\nvar a = require(\"./a.js\");\nconsole.log(a.m);\n\n//错误的：\nvar b = require(\"./a.js\");\nconsole.log(a.m);\n```\n\nnodejs在运行的时候，接受的那个变量（a）会自动成为exports对象。\n\n`exports.** = **`的写法天生有namespace（命名空间）\n\n```\n┣ app.js\n┣ yuan.js\n┣ juxing.js\n```\n\nyuan.js和juxing.js文件里面都定义了mianji和zhouchang函数，但是引入的时候由于又命名空间，所以不乱套。\n\n```javascript\nvar yuan = require(\"./yuan.js\");\nvar juxing = require(\"./juxing.js\");\n\nconsole.log(yuan.mianji(15));\nconsole.log(yuan.zhouchang(15));\nconsole.log(juxing.mianji(10,12));\nconsole.log(juxing.zhouchang(10,12));\n```\n\n![](image40.png)\n\n\n\n## 5.5 使用`module.exports = ** `暴露\n\n当一个js文件中仅仅希望暴露一个东西（通常是构造函数），此时我们可以使用`module.exports = ** `的方法暴露。\n\n```\n┣ app.js\n┣ People.js\n```\n\nPeople.js:\n\n```javascript\nfunction People(name,age,sex){\n\tthis.name = name;\n\tthis.age = age;\n\tthis.sex = sex;\n}\nPeople.prototype.sayHello = function(){\n\tconsole.log(\"你好我是\" + this.name);\n}\n\nmodule.exports = People\n```\n\napp.js:\n\n```javascript\nvar People = require(\"./People.js\");\n\nvar xiaoming = new People(\"小明\" , 12 , \"男\");\nxiaoming.sayHello();\n```\n\n\n\n如果仍然使用exports.People = People的方法暴露，此时就势必要：\n\n```javascript\nvar xiaoming = new People.People(\"小明\" , 12 , \"男\");\n```\n\n\n\n**总结一下：**\n\n● 如果一个js文件中有多个东西要暴露（通常是暴露一些相关的函数比如面积、周长），此时用`exports.** = **`暴露。\n\n● 如果一个js文件中只暴露一个文件（通常是构造函数），此时用`module.exports = **; `暴露。\n\n\n\n## 5.6 使用文件夹\n\n```\n┣ app.js\n┣ jihe\n┃ ┣ yuan.js\n┃ ┣ juxing.js\n┃ ┣ index.js\n```\n\n我们将yuan.js和juxing.js放入了一个叫做jihe的文件夹中，被index.js\"统领\"。\n\n此时我们先看jihe/index.js:\n\n```javascript\nvar juxing = require(\"./juxing.js\");\nvar yuan = require(\"./yuan.js\");\n\nexports.juxing = juxing;\nexports.yuan = yuan;\n```\n\n这个文件很性感，接受之后什么都不调用直接暴露。这个文件的作用就是一个小中转器，是一个小统领。\n\n此时yuan.js、juxing.js的文件内容和5.4一致，不再写了。\n\napp.js\n\n```javascript\nvar jihe = require(\"./jihe\");\n\nconsole.log(jihe.yuan.mianji(10));\nconsole.log(jihe.juxing.zhouchang(10,19));\n```\n\n需要注意，当我们require()的时候，如果没有写.js后缀，此时nodejs将认为我们在引入一个文件夹，此时将会自动引入这个文件夹中的index.js文件。\n\n也就是说\n\n```javascript\nvar jihe = require(\"./jihe\");\n```\n\n等价于：\n\n```javascript\nvar jihe = require(\"./jihe/index.js\")\n```\n\n注意`./`不能省！！\n\n\n\n## 5.7 神奇的node\\_modules文件夹\n\n**nodejs中有一个设置，就是如果js的文件夹放入了node\\_modules文件夹中，此时引用它的将可以不写`./`**。\n\n```\n┣ app.js\n┣ node_modules\n┃  ┣ jihe\n┃  ┃  ┣ yuan.js\n┃  ┃  ┣ juxing.js\n┃  ┃  ┣ index.js\n```\n\njihe文件夹中的内容和5.6小节一样的，不写了。\n\napp.js引用jihe.js文件的时候，此时require的特别漂亮！\n\n```javascript\nvar jihe = require(\"jihe\");\n\nconsole.log(jihe.yuan.mianji(10));\nconsole.log(jihe.juxing.zhouchang(10,19));\n```\n\n也就是说：\n\n\n| require的形式     | 引用的谁                                      |\n| ----------------- | --------------------------------------------- |\n| require(\"./a.js\") | 同目录的a.js文件                              |\n| require(\"./a\")    | a文件夹中的index.js文件                       |\n| require(\"a\")      | node_modules文件夹中的a文件夹中的index.js文件 |\n| require(\"a.js\")   | node_modules文件夹中的a.js                    |\n\n\n\n## 5.8 模块的概念\n\n当一个js文件可以独立完成一个事情，这个js文件就是一个模块。\n\n当一些js文件共同配合完成一个事情，这些js文件就是一个模块。\n\n模块（module，不是model模型）是一个文件的功能性的、组织性的概念，不是物理性的概念。\n\njuxing.js是一个模块，因为它可以独立完成关于矩形的所有计算。\n\nyuan.js也是一个模块，因为它可以独立完成关于圆形的所有计算。\n\n他们结合在一起，成为jihe文件夹，jihe又称一个新模块。\n\n\n\n# 六、npm的世界\n\n## 6.1 npm install命令\n\n这是一个模块的分享社区，我们可以免费的、自由的使用别人的模块。\n\n而别人的模块，很可能也在使用其他人的模块。每个人都站在巨人的肩膀上，这个世界变得更简单，轮子不需要重复的造，我们只专注于造汽车。\n\n比如有一天，老板让你实现当用户输入网址\n\nhttp://127.0.0.1:3000/12321\n\n的时候，页面显示一二三二一。或者一万两千三百二十一元。\n\n此时你会路由的知识，但是不知道如何进行阿拉伯数字和汉语的转换。\n\n找模块！找巨人！npm就是这样的社区，npm就是node package manager的意思。\n\nnode包管理器。\n\n官网：https://www.npmjs.com/\n\n> npm is the package manager for JavaScript and the world's largest software registry. Discover packages of reusable code --- and assemble them in powerful new ways.\n>\n> npm是JavaScript的包管理器，是世界上最大的软件托管仓库。浏览这些包，这些包都是可服用的代码。组合他们开发出你自己的新的东西！\n\n输入大写，按回车：\n\n![](image41.png)\n\n我们发现了一个叫做nzh的一个包，网址：https://www.npmjs.com/package/nzh\n\n此时我们想要下载这个叫做nzh的包，此时我们使用CMD命令：\n\n```\nnpm install nzh\n```\n\n\n\nnpm包管理器随着nodejs安装而安装了。所以我们已经可以使用npm了。\n\n注意要使用npm的时候，必须联网。\n\n当我们输入`npm install nzh`之后，此时项目文件夹中就自动多了`node\\_modules`文件夹。\n\n![](image42.png)\n\nnode\\_modules文件夹中就有了nzh文件夹！这是一个模块！\n\n![](image43.png)\n\n此时通过查看API我们可以写出app.js文件了：\n\n```javascript\nvar nzh = require(\"nzh\");\nvar nzhcn = nzh.cn; \nconsole.log(nzhcn.toMoney(12321))\n```\n\n也就是说别人开发的nzh这个包现在就被我们自己使用了！\n\n这里说一嘴，所有的API的路径都是\n\n```\nhttps://www.npmjs.com/package/包名字\n```\n\n\n\n老板新需求：让你把1997年5月8日变为农历。\n\n![](image44.png)\n\n参考API，此时就能写出自己的程序：\n\n```javascript\nvar solarLunar = require(\"solarlunar\")\n\n//API看来的\nvar obj = solarLunar.solar2lunar(1997, 5, 8);\nconsole.log(obj.gzYear + obj.gzMonth + obj.gzDay);\n```\n\n\n\n老板新需求：将一个数组变为excel表格。\n\n此时我们下载node-xlsx这个包，此时你会发现依赖的依赖也会被同时下载。\n\n```\nnpm install node-xlsx\n```\n\n结合API我们写：\n\n```javascript\nvar xlsx = require(\"node-xlsx\");\nvar fs = require(\"fs\");\n\n//API看来的\nvar data = [[\"国家\",\"人口\",\"GDP\"],[\"中国\",13,200],[\"印度\",15,1],[\"日本\",1,0.08]];\nvar buffer = xlsx.build([{name: \"各国数据\", data: data}]);  \nfs.writeFile(\"./老板请您简约.xlsx\" , buffer);\n```\n\n\n\n## 6.2 依赖\n\n我们从npm上下载的node\\_modules文件夹称之为依赖。\n\n此时我们可以用package.json文件管理这些依赖，我们称为项目的\"身份证\"。\n\n我们在开发项目的时候，第一步就是创建一个项目的身份证。\n\n```\nnpm init\n```\n\n![](image45.png)\n\n就会显示一个调查问卷。将引导你创建这个身份证。\n\n![](image46.png)\n\n他会询问你包名字、版本、描述、入口文件、测试命令、git网址、关键词、作者、版权协议。\n\n你回答一下，系统会猜测一些答案就是括号中的内容，直接按回车就是使用它。\n\n系统会创建这个文件：\n\n![](image47.png)\n\n内容：\n\n```json\n{\n  \"name\": \"day1\",\n  \"version\": \"0.0.1\",\n  \"description\": \"这是考拉老师的一个案例\",\n  \"main\": \"app.js\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n  },\n  \"keywords\": [\n    \"考拉\",\n    \"牛逼\",\n    \"爱前端\"\n  ],\n  \"author\": \"考拉\",\n  \"license\": \"MIT\"\n}\n```\n\n\n\n今后安装依赖的时候要加上\\--save后缀，比如：\n\n```\nnpm install nzh --save\n```\n\n此时加上`--save`之后，我们身份证会自动更新一个依赖项：\n\n```json\n{\n  \"name\": \"day1\",\n  \"version\": \"0.0.1\",\n  \"description\": \"这是考拉老师的一个案例\",\n  \"main\": \"app.js\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n  },\n  \"keywords\": [\n    \"考拉\",\n    \"牛逼\",\n    \"爱前端\"\n  ],\n  \"author\": \"考拉\",\n  \"license\": \"MIT\",\n  \"dependencies\": {\n    \"node-xlsx\": \"^0.11.0\",\n    \"nzh\": \"^1.0.1\",\n    \"solarlunar\": \"^2.0.1\"\n  }\n}\n```\n\n\n\n**有了这个有什么好处呢？？**\n\n此时我们的项目拷贝给别人的时候、做版本管理的时候，可以完全忽略node\\_modules文件夹！\n\n因为我们任何使用可以使用\n\n```\nnpm install\n```\n\n来安装项目的所有依赖。\n\n","slug":"Dev/nodejs/nodejs01","published":1,"_id":"cjoncnbs0000y2gfilvi9ko47","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><blockquote>\n<p>第1天课堂笔记</p>\n<p>讲师：邵山欢</p>\n<p>日期：2017年11月2日</p>\n</blockquote>\n<h1 id=\"一、复习B-S架构\"><a href=\"#一、复习B-S架构\" class=\"headerlink\" title=\"一、复习B/S架构\"></a>一、复习B/S架构</h1><h2 id=\"1-1-B-S架构图示\"><a href=\"#1-1-B-S架构图示\" class=\"headerlink\" title=\"1.1 B/S架构图示\"></a>1.1 B/S架构图示</h2><p><img src=\"image2.png\" alt=\"\"></p>\n<p>服务器上运行着一些程序，这些程序是PHP、JSP、ASP、Python、Scala等等，这些语言都是后台语言。</p>\n<hr>\n<blockquote>\n<p>当用户从浏览器发出HTTP请求（点击了一个超级链接、输入了网址、提交了表单）之后，后台语言就开始执行了。后台语言往往需要根据这个HTTP请求携带的参数，进行不同的、差异化的工作，与数据库通信完毕之后，组件一个页面用HTTP响应发回给浏览器。浏览器解析渲染HTML、CSS和JS脚本。</p>\n</blockquote>\n<h2 id=\"1-2-集合PHP程序来复习GET请求和POST请求\"><a href=\"#1-2-集合PHP程序来复习GET请求和POST请求\" class=\"headerlink\" title=\"1.2 集合PHP程序来复习GET请求和POST请求\"></a>1.2 集合PHP程序来复习GET请求和POST请求</h2><p>PHP是一个语言，不能独立运行，必须运行在阿帕奇（Apache）之上。计算机只要安装了这些服务器的软件（比如阿帕奇、IIS、Nginx、Tomcat、glassfish）就能提供HTTP服务，此时计算机就是服务器了。</p>\n<p>阿帕奇有一个最大的特点：<strong>就能能够自动根据文件的物理层次映射出URL。</strong></p>\n<hr>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>物理文件的地址</th>\n<th>URL</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>阿帕奇根目录/index.html</td>\n<td><a href=\"http://127.0.0.1/\" target=\"_blank\" rel=\"noopener\">http://127.0.0.1/</a></td>\n</tr>\n<tr>\n<td>阿帕奇根目录/a/index.html</td>\n<td><a href=\"http://127.0.0.1/a/\" target=\"_blank\" rel=\"noopener\">http://127.0.0.1/a/</a></td>\n</tr>\n<tr>\n<td>阿帕奇根目录/a/b/c/index.html</td>\n<td><a href=\"http://127.0.0.1/a/b/c/\" target=\"_blank\" rel=\"noopener\">http://127.0.0.1/a/b/c/</a></td>\n</tr>\n</tbody>\n</table>\n</div>\n<hr>\n<p>下面复习一下GET请求和POST请求，我们结合PHP和数据库来做演示案例。</p>\n<p><strong>GET请求的哲学是：问服务器要东西，使用POST请求往往是传给服务器id，希望服务器发回这个id的文章。</strong></p>\n<p>下面就是一个简单的GET请求的PHP程序。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">\t//链接数据库</span><br><span class=\"line\">\t$conn = mysql_connect(&quot;localhost&quot;,&quot;root&quot;,&quot;123456&quot;);</span><br><span class=\"line\">\t//选择数据库</span><br><span class=\"line\">\tmysql_select_db(&quot;kaolaxinwen&quot;, $conn);</span><br><span class=\"line\">\t//中文</span><br><span class=\"line\">\tmysql_query(&quot;SET NAMES UTF8&quot;);</span><br><span class=\"line\">\t//得到id</span><br><span class=\"line\">\t$id = $_GET[&quot;id&quot;];</span><br><span class=\"line\">\t//SQL语句</span><br><span class=\"line\">\t$sql = &quot;SELECT * FROM xinwen WHERE id = &#123;$id&#125;&quot;;</span><br><span class=\"line\">\t//执行SQL语句</span><br><span class=\"line\">\t$result = mysql_query($sql);</span><br><span class=\"line\">\t//转变结果的格式</span><br><span class=\"line\">\t$row = mysql_fetch_array($result);</span><br><span class=\"line\">?&gt;</span><br><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html lang=&quot;en&quot;&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">\t&lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class=\"line\">\t&lt;title&gt;Document&lt;/title&gt;</span><br><span class=\"line\">\t&lt;style type=&quot;text/css&quot;&gt;</span><br><span class=\"line\">\t\t.box&#123;</span><br><span class=\"line\">\t\t\twidth:1000px;</span><br><span class=\"line\">\t\t\tmargin: 0 auto;</span><br><span class=\"line\">\t\t\tbackground-color: skyblue;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\th1&#123;</span><br><span class=\"line\">\t\t\ttext-align: center;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&lt;/style&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">\t&lt;div class=&quot;box&quot;&gt;</span><br><span class=\"line\">\t\t&lt;h1&gt;&lt;?php echo $row[&quot;biaoti&quot;] ?&gt;&lt;/h1&gt;</span><br><span class=\"line\">\t\t&lt;div class=&quot;content&quot;&gt;</span><br><span class=\"line\">\t\t\t&lt;?php echo $row[&quot;neirong&quot;] ?&gt;</span><br><span class=\"line\">\t\t&lt;/div&gt;</span><br><span class=\"line\">\t&lt;/div&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n<p>效果：</p>\n<p><img src=\"image3.png\" alt=\"\"></p>\n<p>查看源代码：</p>\n<p><img src=\"image4.png\" alt=\"\"></p>\n<p><strong>POST请求的哲学是：希望服务器根据我的参数来对数据库进行一些增、删、改的操作。</strong></p>\n<p>比如我们做一个表单页面houtai.html，这个页面中的表单在往tijiao.php中提交内容。tijiao.php负责写入数据库。</p>\n<p><img src=\"image5.png\" alt=\"\"></p>\n<p><strong>GET请求优缺点</strong>：便于分享网址、安全性不强、不能传超长的参数。</p>\n<p><strong>POST请求的优缺点</strong>： 不便于分享网址、安全性强、理论是无限长的参数。</p>\n<p><strong>总结一下你要会的东西：</strong></p>\n<ul>\n<li><p>HTTP有请求、响应。</p>\n</li>\n<li><p>HTTP请求有GET请求和POST请求的区别，要知道他们的优缺点和哲学。</p>\n</li>\n<li><p>知道PHP是如何和数据库交互的。</p>\n</li>\n<li><p>知道GET请求的参数和POST请求的参数。</p>\n</li>\n</ul>\n<p>服务器上的语言有哪些：PHP、JSP、ASP、Python、Scala等等。</p>\n<p>今天，它迎来了Node.js。</p>\n<p><strong>Node.js将JavaScript的触角伸到了服务器上。Node.js让服务器上可以运行JS！</strong></p>\n<p>JS如今不是做个正则、做个轮播图、做个选项卡的浏览器端的语言了！今天，Node.JS可以让JS处理GET请求、POST请求、可以操作数据库！</p>\n<h1 id=\"二、Node-js的诞生和安装\"><a href=\"#二、Node-js的诞生和安装\" class=\"headerlink\" title=\"二、Node.js的诞生和安装\"></a>二、Node.js的诞生和安装</h1><h2 id=\"2-1-创始人\"><a href=\"#2-1-创始人\" class=\"headerlink\" title=\"2.1 创始人\"></a>2.1 创始人</h2><p>Rayn Dahl发现：以老牌PHP为例，理论上一个8GB内存的服务器可以同时连接的最大用户数为4000个左右。要让Web应用程序支持更多的用户，就需要增加服务器的数量，而Web应用程序的硬件成本当然就上升了。</p>\n<p><img src=\"image6.png\" alt=\"\"></p>\n<p>这个哥们就立志要发明一个平台，比PHP、JSP要有更高的性能、并发性。</p>\n<p>他将Chrome浏览器的V8引擎（目前世界上最快的JS解析引擎）移植到了服务器上，开发出了Node.js平台。</p>\n<p>2009年底，Ryan Dahl在柏林举行的JSConf EU会议上发表关于Node.js的演讲，之后Node.js逐渐流行于世。</p>\n<p><strong>Node.js是一个平台不是一个语言，语言仍然是JavaScript。此时Node.js平台可以让我们用JavaScript语言来开发服务器程序。</strong></p>\n<h2 id=\"2-2-安装Node-js\"><a href=\"#2-2-安装Node-js\" class=\"headerlink\" title=\"2.2 安装Node.js\"></a>2.2 安装Node.js</h2><p>node.js可以安装在windows、mac、linux上（绝大部分的服务器都是linux操作系统）。</p>\n<p>语言是一样的，都是JavaScript，所以node.js特别像java虚拟机，大家只需要写一份语言，就可以运行在windows、mac、linux上。</p>\n<p>nodejs官网：<a href=\"http://nodejs.org/\" target=\"_blank\" rel=\"noopener\">http://nodejs.org/</a></p>\n<p>nodejs中文网：<a href=\"http://nodejs.cn/\" target=\"_blank\" rel=\"noopener\">http://nodejs.cn/</a></p>\n<p><img src=\"image7.png\" alt=\"\"></p>\n<p>下载nodejs：</p>\n<p><img src=\"image8.png\" alt=\"\"></p>\n<p>nodejs有稳定版和最新版之分，我们学习的是最新版v8.7.0，今天的稳定版是v6.0.0。</p>\n<p><img src=\"image9.png\" alt=\"\"></p>\n<p>双击图标即可进行安装：</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th><img src=\"image10.png\" alt=\"img\"></th>\n<th>正在等待安装</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><img src=\"image11.png\" alt=\"img\"></td>\n<td>点击下一步next</td>\n</tr>\n<tr>\n<td><img src=\"image12.png\" alt=\"img\"></td>\n<td>同意协议，然后下一步</td>\n</tr>\n<tr>\n<td><img src=\"image13.png\" alt=\"img\"></td>\n<td></td>\n</tr>\n<tr>\n<td><img src=\"image14.png\" alt=\"img\"></td>\n<td>nodejs的安装包给计算机安装了4个东西。见左图。   不需要我们进行什么操作，直接点击next。</td>\n</tr>\n<tr>\n<td><img src=\"image15.png\" alt=\"img\"></td>\n<td>点击Install进行安装。</td>\n</tr>\n<tr>\n<td><img src=\"image16.png\" alt=\"img\"></td>\n<td>安装成功</td>\n</tr>\n</tbody>\n</table>\n</div>\n<p>我们要检查nodejs是否已经安装成功了。此时需要打开系统的”命令提示符”窗口。</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th><img src=\"image17.png\" alt=\"img\"></th>\n<th>按windows徽标键 + R键</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><img src=\"image18.png\" alt=\"img\"></td>\n<td>输入CMD按回车   CMD就是command命令的缩写。</td>\n</tr>\n<tr>\n<td><img src=\"image19.png\" alt=\"img\"></td>\n<td>然后就能看见这个黑底白字的命令提示符窗口。   我们以后简称“CMD”窗口。</td>\n</tr>\n<tr>\n<td><img src=\"image20.png\" alt=\"img\"></td>\n<td>输入node -v   此时就能看见版本号，说明nodejs安装成功了。</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h2 id=\"2-3-什么是环境变量？\"><a href=\"#2-3-什么是环境变量？\" class=\"headerlink\" title=\"2.3 什么是环境变量？\"></a>2.3 什么是环境变量？</h2><p>任何操作系统（windows、mac、linux）都有环境变量的概念，作用很简单：</p>\n<p><strong>在环境变量中的文件夹里面的所有exe程序都可以被当做系统级别的命令在CMD窗口中被调用。</strong></p>\n<p>对计算机图标点击属性，然后：</p>\n<p><img src=\"image21.png\" alt=\"\"></p>\n<p>环境变量是用英语分号隔开的一系列文件夹的路径。比如老师耍宝，将QQ的文件夹添加进去了。</p>\n<p>此时再次打开CMD创建，就可以运行QQ命令了：</p>\n<p><img src=\"image22.png\" alt=\"\"></p>\n<p>我们的node.js的msi安装包自动的将nodejs的安装目录设置为了环境变量。极大的方便了我们。</p>\n<p>因为nodejs的目录在环境变量中，所以我们刚才可以在CMD中运行</p>\n<p><code>node -v</code></p>\n<h1 id=\"三、Node-js的基本使用-运行谁就node谁\"><a href=\"#三、Node-js的基本使用-运行谁就node谁\" class=\"headerlink\" title=\"三、Node.js的基本使用 - 运行谁就node谁\"></a>三、Node.js的基本使用 - 运行谁就node谁</h1><p>我们创建今天的案例文件夹，是c盘的node_study文件夹，里面创建day1文件夹。</p>\n<p>我们先来认知一个事情：<strong>js的运行需要宿主环境。</strong></p>\n<p>我们创建一个01.js文件：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span> ; i &lt; <span class=\"number\">10</span> ; i++)&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(i * <span class=\"number\">2</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这个js文件不能直接拖入浏览器运行，因为没有html宿主环境。</p>\n<p>我们必须创建html文件：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Document<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"01.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>浏览这个html文件，此时控制台将有输出。</p>\n<p><img src=\"image23.png\" alt=\"\"></p>\n<p>JS需要宿主环境才能运行。截止今日，我们只知道js的一个宿主环境，就是HTML。</p>\n<p>今天我们迎来了新的宿主：<strong>nodejs平台！</strong></p>\n<p>在nodejs平台中运行js文件，此时需要使用CMD窗口。<strong>此时需要将CMD的”光标路径”更改为我们的项目文件夹</strong>。</p>\n<p>此时使用下面的命令可以切换路径：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd 路径</span><br></pre></td></tr></table></figure>\n<p>cd就是change directory，切换文件夹的意思。</p>\n<p><img src=\"image24.png\" alt=\"\"></p>\n<p>我们的口号是：运行谁就node谁</p>\n<p><img src=\"image25.png\" alt=\"\"></p>\n<p>告诉大家一个快捷操作：</p>\n<p>在项目文件夹中按住shift键的同时，点击鼠标右键，此时就能看见：</p>\n<p><img src=\"image26.png\" alt=\"\"></p>\n<p><img src=\"image27.png\" alt=\"\"></p>\n<p>由于nodejs平台没有DOM所以不能使用下面的语法：</p>\n<p>window、document、alert、document.getElementById()……</p>\n<p>但是nodejs能够识别函数、if语句、for、while等等js核心语法：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span> ; i &lt; <span class=\"number\">10</span> ; i++)&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(haha(i));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">haha</span>(<span class=\"params\">a</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> a * <span class=\"number\">3</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>补充一下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cls</span><br></pre></td></tr></table></figure>\n<p>表示清屏</p>\n<h1 id=\"四、使用Node-js搭建服务器\"><a href=\"#四、使用Node-js搭建服务器\" class=\"headerlink\" title=\"四、使用Node.js搭建服务器\"></a>四、使用Node.js搭建服务器</h1><h2 id=\"4-1-最简单的demo\"><a href=\"#4-1-最简单的demo\" class=\"headerlink\" title=\"4.1 最简单的demo\"></a>4.1 最简单的demo</h2><p>我们需要使用nodejs中的内置模块http模块，nodejs中有很多模块，我们最先使用的就是http模块。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//得到内置http模块</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">\"http\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//创建服务器，使用createServer方法来创建服务器。</span></span><br><span class=\"line\"><span class=\"comment\">//回调函数中有一个req参数表示请求，res参数表示响应。</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> server = http.createServer(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req,res</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//输出</span></span><br><span class=\"line\">\tres.end(<span class=\"string\">\"Hello NodeJS !!\"</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//监听，我们的默认80端口已经被阿帕奇占用了，所以我们监听3000端口。</span></span><br><span class=\"line\">server.listen(<span class=\"number\">3000</span></span><br></pre></td></tr></table></figure>\n<p>先照着写，然后就可以运行这个程序。</p>\n<p><img src=\"image28.png\" alt=\"\"></p>\n<p>此时不要关闭CMD窗口！打开浏览器，输入网址：</p>\n<p><a href=\"http://127.0.0.1**:3000**/\" target=\"_blank\" rel=\"noopener\">http://127.0.0.1**:3000**/</a></p>\n<p>冒号表示端口号，默认端口是80，但是我们的80被阿帕奇占用了，所以我们就使用3000端口了。</p>\n<p><img src=\"image29.png\" alt=\"\"></p>\n<p>如果想要打断服务器的执行，此时在CMD中按ctrl+c键。</p>\n<p><img src=\"image30.png\" alt=\"\"></p>\n<p>一旦打断了挂起的CMD，此时浏览器中就崩溃了：</p>\n<p><img src=\"image31.png\" alt=\"\"></p>\n<p><strong>注意：如果改变了js文件，此时刷新浏览器没用，必须重新执行node命令！</strong></p>\n<p><strong>两个问题：</strong></p>\n<p>●问题1：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">res.end(<span class=\"string\">\"好高兴啊我买了一个iPhone\"</span> + (<span class=\"number\">1</span>+<span class=\"number\">32</span>));</span><br></pre></td></tr></table></figure>\n<p>在浏览器中查看源代码，不能看见1+32的运算结果的。这是因为程序运行在服务器上。</p>\n<p>●问题2：</p>\n<p>用户的电脑里面没有安装nodejs平台，此时也可以访问nodejs服务器。</p>\n<p>因为nodejs运行在服务器上，发给客户端的时候已经变为纯的、平的HTML了！</p>\n<p><strong>补充：</strong></p>\n<p>● 多条输出用write，但是最后必须有end：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">res.write(<span class=\"string\">\"哈哈\"</span>);</span><br><span class=\"line\">res.write(<span class=\"string\">\"哈哈\"</span>);</span><br><span class=\"line\">res.write(<span class=\"string\">\"哈哈\"</span>);</span><br><span class=\"line\">res.write(<span class=\"string\">\"哈哈\"</span>);</span><br><span class=\"line\">res.write(<span class=\"string\">\"哈哈\"</span>);</span><br><span class=\"line\">res.end(<span class=\"string\">\"好高兴啊我买了一个iPhone\"</span> + (<span class=\"number\">4</span>+<span class=\"number\">4</span>));</span><br></pre></td></tr></table></figure>\n<p>● res.write()和res.end()中只能是字符串不能是数字：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">res.end(<span class=\"number\">123</span>); <span class=\"comment\">//错误的</span></span><br><span class=\"line\">res.end(<span class=\"string\">\"123\"</span>); <span class=\"comment\">//正确的</span></span><br></pre></td></tr></table></figure>\n<p>● 可以结合HTML标签：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">res.end(<span class=\"string\">\"&lt;h1&gt;你好，NodeJS我来了&lt;/h1&gt;\"</span>);</span><br></pre></td></tr></table></figure>\n<p>Node.js中有很多的内置模块，手册就是按模块来列出的API：</p>\n<p><img src=\"image32.png\" alt=\"\"></p>\n<h2 id=\"4-2-使用外置页面\"><a href=\"#4-2-使用外置页面\" class=\"headerlink\" title=\"4.2 使用外置页面\"></a>4.2 使用外置页面</h2><p>我们现在的目标就是做一个外面的页面public/wangjunkai.html，此时就要使用新的内置模块fs。</p>\n<p><strong>fs模块</strong>最重要的API，就是readFile，可以异步读取文件，第一个参数就是URL，要读取的文件路径（注意：必须以<code>./</code>开头，表示从当前js文件出发寻找html文件）。第二个参数是回调函数，表示读取完毕之后做的事情。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fs.readFile(<span class=\"string\">\"./public/wangjunkai.html\"</span> , <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err , data</span>)</span>&#123;</span><br><span class=\"line\">\tres.end(data);  <span class=\"comment\">//让res显示文件。</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>http和fs共同配合完成这个事情：</p>\n<p><img src=\"image33.png\" alt=\"\"></p>\n<h2 id=\"4-3-路由（重点）\"><a href=\"#4-3-路由（重点）\" class=\"headerlink\" title=\"4.3 路由（重点）\"></a>4.3 路由（重点）</h2><p>上面的案例，不管输入什么URL，都是访问wangjunkai.html页面：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> server = http.createServer(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req,res</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//设置UTF8</span></span><br><span class=\"line\">\tres.setHeader(<span class=\"string\">\"Content-Type\"</span>,<span class=\"string\">\"text/html;charset=UTF8\"</span>);</span><br><span class=\"line\">\t<span class=\"comment\">//需要读取文件</span></span><br><span class=\"line\">\tfs.readFile(<span class=\"string\">\"./public/wangjunkai.html\"</span> , <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err , data</span>)</span>&#123;</span><br><span class=\"line\">\t\tres.end(data);</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p><img src=\"image34.png\" alt=\"\"></p>\n<p>我们可以利用req.url得到用户输入的URL地址。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">\"http\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">\"fs\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//创建一个服务器</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> server = http.createServer(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req,res</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//设置UTF8</span></span><br><span class=\"line\">\tres.setHeader(<span class=\"string\">\"Content-Type\"</span>,<span class=\"string\">\"text/html;charset=UTF8\"</span>);</span><br><span class=\"line\">\t<span class=\"comment\">//输出访问的URL地址</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(req.url == <span class=\"string\">\"/mingxing/wjk\"</span>)&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//需要读取文件</span></span><br><span class=\"line\">\t\tfs.readFile(<span class=\"string\">\"./public/wangjunkai.html\"</span> , <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err , data</span>)</span>&#123;</span><br><span class=\"line\">\t\t\tres.end(data);</span><br><span class=\"line\">\t\t&#125;);</span><br><span class=\"line\">\t&#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(req.url == <span class=\"string\">\"/shuaige/lh\"</span>)&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//需要读取文件</span></span><br><span class=\"line\">\t\tfs.readFile(<span class=\"string\">\"./public/luhan.html\"</span> , <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err , data</span>)</span>&#123;</span><br><span class=\"line\">\t\t\tres.end(data);</span><br><span class=\"line\">\t\t&#125;);</span><br><span class=\"line\">\t&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\tres.end(<span class=\"string\">\"没有这个页面！\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//监听</span></span><br><span class=\"line\">server.listen(<span class=\"number\">3000</span>);</span><br></pre></td></tr></table></figure>\n<p><strong>顶层路由设计：</strong></p>\n<ul>\n<li><p>物理文件的层次和URL是没有关系的！</p>\n</li>\n<li><p>Node.js可以做顶层路由设计！一个页面想叫什么URL就可以叫做什么URL！</p>\n</li>\n<li><p>用户输入的URL可以被路由映射为任何HTML页面！</p>\n</li>\n</ul>\n<p><img src=\"image35.png\" alt=\"\"></p>\n<p>现在的时代主流，有意义的URL非常的重要。比如知乎的URL：</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>URL</th>\n<th>用途</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"https://www.zhihu.com/people/albanybear/activities\" target=\"_blank\" rel=\"noopener\">https://www.zhihu.com/people/albanybear/activities</a></td>\n<td>albanybear用户的活动</td>\n</tr>\n<tr>\n<td><a href=\"https://www.zhihu.com/people/albanybear/answers\" target=\"_blank\" rel=\"noopener\">https://www.zhihu.com/people/albanybear/answers</a></td>\n<td>albanybear用户的回答</td>\n</tr>\n<tr>\n<td><a href=\"https://www.zhihu.com/people/albanybear/asks\" target=\"_blank\" rel=\"noopener\">https://www.zhihu.com/people/albanybear/asks</a></td>\n<td>albanybear用户的提问</td>\n</tr>\n<tr>\n<td><a href=\"https://www.zhihu.com/people/albanybear/posts\" target=\"_blank\" rel=\"noopener\">https://www.zhihu.com/people/albanybear/posts</a></td>\n<td>albanybear用户的文章</td>\n</tr>\n<tr>\n<td><a href=\"https://www.zhihu.com/people/albanybear/columns\" target=\"_blank\" rel=\"noopener\">https://www.zhihu.com/people/albanybear/columns</a></td>\n<td>albanybear用户的专栏</td>\n</tr>\n<tr>\n<td><a href=\"https://www.zhihu.com/people/albanybear/pins\" target=\"_blank\" rel=\"noopener\">https://www.zhihu.com/people/albanybear/pins</a></td>\n<td>albanybear用户的想法</td>\n</tr>\n<tr>\n<td><a href=\"https://www.zhihu.com/people/albanybear/collections\" target=\"_blank\" rel=\"noopener\">https://www.zhihu.com/people/albanybear/collections</a></td>\n<td>albanybear用户的收藏</td>\n</tr>\n</tbody>\n</table>\n</div>\n<p>老一代的路由：</p>\n<p><a href=\"http://www.zhihu.com/tiwen.php?username=albanybear\" target=\"_blank\" rel=\"noopener\">http://www.zhihu.com/tiwen.php?username=albanybear</a></p>\n<p><a href=\"http://www.zhihu.com/answers.php?username=albanybear\" target=\"_blank\" rel=\"noopener\">http://www.zhihu.com/answers.php?username=albanybear</a></p>\n<p>我们现在可以模拟知乎的路由，首先先复习正则表达式的知识：</p>\n<p><img src=\"image36.png\" alt=\"\"></p>\n<p>代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> server = http.createServer(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req,res</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//设置UTF8</span></span><br><span class=\"line\">\tres.setHeader(<span class=\"string\">\"Content-Type\"</span>,<span class=\"string\">\"text/html;charset=UTF8\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//得到用户的url</span></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> url = req.url;</span><br><span class=\"line\">\t<span class=\"comment\">//用正则拆</span></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> arr = url.match(<span class=\"regexp\">/\\/user\\/(.+)\\/(.+)$/</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//验证是否提炼成为了数组</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(!arr)&#123;</span><br><span class=\"line\">\t\tres.end(<span class=\"string\">\"&lt;h1&gt;没有这个网址&lt;/h1&gt;\"</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//得到$1，就是正则中的第一个()</span></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> $<span class=\"number\">1</span> = arr[<span class=\"number\">1</span>];</span><br><span class=\"line\">\t<span class=\"comment\">//得到$2，就是正则中的第二个()</span></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> $<span class=\"number\">2</span> = arr[<span class=\"number\">2</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//模拟数据库</span></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> users = &#123;</span><br><span class=\"line\">\t\t<span class=\"string\">\"wangjunkai\"</span> : <span class=\"string\">\"王俊凯\"</span> ,</span><br><span class=\"line\">\t\t<span class=\"string\">\"liyifeng\"</span> : <span class=\"string\">\"李易峰\"</span>,</span><br><span class=\"line\">\t\t<span class=\"string\">\"luhan\"</span> : <span class=\"string\">\"鹿晗\"</span>,</span><br><span class=\"line\">\t\t<span class=\"string\">\"wuyifan\"</span> : <span class=\"string\">\"吴亦凡\"</span></span><br><span class=\"line\">\t&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> list = &#123;</span><br><span class=\"line\">\t\t<span class=\"string\">\"post\"</span> : <span class=\"string\">\"文章\"</span>,</span><br><span class=\"line\">\t\t<span class=\"string\">\"ask\"</span> : <span class=\"string\">\"提问\"</span>,</span><br><span class=\"line\">\t\t<span class=\"string\">\"answers\"</span> : <span class=\"string\">\"回答\"</span>,</span><br><span class=\"line\">\t\t<span class=\"string\">\"pins\"</span> : <span class=\"string\">\"想法\"</span></span><br><span class=\"line\">\t&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">\tres.end(<span class=\"string\">\"&lt;h1&gt;欢迎查看\"</span> + users[$<span class=\"number\">1</span>] + <span class=\"string\">\"的\"</span> + list[$<span class=\"number\">2</span>] + <span class=\"string\">\"&lt;/h1&gt;\"</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>我们就模拟出了知乎的路由设计：</p>\n<p><img src=\"image37.png\" alt=\"\"></p>\n<p>现在我们就<strong>不能</strong>认为根目录下有一个user文件夹，然后有luhan文件夹，然后有answers文件夹。</p>\n<h2 id=\"4-4-顶层路由设计有不方便的地方\"><a href=\"#4-4-顶层路由设计有不方便的地方\" class=\"headerlink\" title=\"4.4 顶层路由设计有不方便的地方\"></a>4.4 顶层路由设计有不方便的地方</h2><p>我们刚才通过案例知道了顶层路由设计的方便之处，URL非常的规整，类似知乎的路由。</p>\n<p>但是不方便的地方就是一些静态文件：图片、样式表等等。此时都需要一个一个开路由。</p>\n<p>比如页面上插入一个图片：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;img src=&quot;wangjunkai.png&quot; alt=&quot;&quot;</span><br></pre></td></tr></table></figure>\n<p>此时就要专门给这个图片开路由：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">……</span><br><span class=\"line\"><span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(req.url == <span class=\"string\">\"/mingxing/wangjunkai.png\"</span>)&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//设置UTF8</span></span><br><span class=\"line\">\tres.setHeader(<span class=\"string\">\"Content-Type\"</span>,<span class=\"string\">\"image/png\"</span>);</span><br><span class=\"line\">\t<span class=\"comment\">//需要读取文件</span></span><br><span class=\"line\">\tfs.readFile(<span class=\"string\">\"./public/wangjunkai.png\"</span> , <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err , data</span>)</span>&#123;</span><br><span class=\"line\">\t\tres.end(data);</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\">&#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(req.url == <span class=\"string\">\"/mingxing/goupi.css\"</span>)&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//设置UTF8</span></span><br><span class=\"line\">\tres.setHeader(<span class=\"string\">\"Content-Type\"</span>,<span class=\"string\">\"text/css\"</span>);</span><br><span class=\"line\">\t<span class=\"comment\">//需要读取文件</span></span><br><span class=\"line\">\tfs.readFile(<span class=\"string\">\"./public/css.css\"</span> , <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err , data</span>)</span>&#123;</span><br><span class=\"line\">\t\tres.end(data);</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">……</span><br></pre></td></tr></table></figure>\n<p><strong>理论上：如果页面上有100个图片，此时就要开100个路由。</strong></p>\n<p>我们明天将会在express中介绍将一个文件夹”静态化”。就是指这个文件夹中的文件将自动拥有URL路由。</p>\n<h1 id=\"五、模块（重点）\"><a href=\"#五、模块（重点）\" class=\"headerlink\" title=\"五、模块（重点）\"></a>五、模块（重点）</h1><h2 id=\"5-1-HTML宿主环境中的多js文件\"><a href=\"#5-1-HTML宿主环境中的多js文件\" class=\"headerlink\" title=\"5.1 HTML宿主环境中的多js文件\"></a>5.1 HTML宿主环境中的多js文件</h2><p>HTML宿主环境中，多个js文件共用一个html宿主，所以它们之间的<strong>作用域是打通的</strong>。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Document<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"1.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span>  → 这里面var a = 100;</span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"2.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span>  → 能够alert(a);</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>因为1.js文件中定义的<strong>a是全局变量就是window的属性</strong>，2.js文件中当然共用window对象。</p>\n<p>nodejs是如何处理多个js文件的？多个js文件如何搭配工作，是后面40分钟的内容。</p>\n<h2 id=\"5-2-require谁就会运行谁\"><a href=\"#5-2-require谁就会运行谁\" class=\"headerlink\" title=\"5.2 require谁就会运行谁\"></a>5.2 require谁就会运行谁</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">┣ app.js</span><br><span class=\"line\">┣ a.js</span><br></pre></td></tr></table></figure>\n<p>app.js:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">require</span>(<span class=\"string\">\"./a.js\"</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"我是app.js\"</span>);</span><br></pre></td></tr></table></figure>\n<p>a.js:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"你好我是a.js\"</span>);</span><br></pre></td></tr></table></figure>\n<p>现在node app.js</p>\n<p><img src=\"image38.png\" alt=\"\"></p>\n<p><strong>在nodejs中，可以js文件中require（引用）另一个js文件，此时就会立即运行那个引用的js文件</strong>。</p>\n<p>app.js可以require a.js文件，a.js文件也可以require b.js文件。</p>\n<h2 id=\"5-3-js文件在Node-js中天生作用域隔离\"><a href=\"#5-3-js文件在Node-js中天生作用域隔离\" class=\"headerlink\" title=\"5.3 js文件在Node.js中天生作用域隔离\"></a>5.3 js文件在Node.js中天生作用域隔离</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">┣ app.js</span><br><span class=\"line\">┣ a.js</span><br></pre></td></tr></table></figure>\n<p>在a.js文件中定义了所谓的”全局”m，然后app.js文件引用a.js之后，尝试显示m变量。</p>\n<p>app.js:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">require</span>(<span class=\"string\">\"./a.js\"</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(m);</span><br></pre></td></tr></table></figure>\n<p>a.js：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> m = <span class=\"number\">100</span>;  <span class=\"comment\">//尝试定义全局变量</span></span><br></pre></td></tr></table></figure>\n<p>此时node app.js报错了。</p>\n<p><img src=\"image39.png\" alt=\"\"></p>\n<p><strong>js文件在Node.js中天生作用域隔离的！为什么？</strong></p>\n<p><strong>因为没有了window对象。</strong></p>\n<h2 id=\"5-4-使用exports-的语法进行暴露\"><a href=\"#5-4-使用exports-的语法进行暴露\" class=\"headerlink\" title=\"5.4 使用exports.** = **的语法进行暴露\"></a>5.4 使用<code>exports.** = **</code>的语法进行暴露</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">┣ app.js</span><br><span class=\"line\">┣ a.js</span><br></pre></td></tr></table></figure>\n<p>a.js文件中定义了m值，并且进行了暴露。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> m = <span class=\"number\">100</span>;</span><br><span class=\"line\">exports.m = m;</span><br></pre></td></tr></table></figure>\n<p>在app.js文件中：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"built_in\">require</span>(<span class=\"string\">\"./a.js\"</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a.m);</span><br></pre></td></tr></table></figure>\n<p><strong>需要注意的是两点：</strong></p>\n<p>① 建议：暴露的时候必须是<code>exports.** = **</code>， **必须一致。你别玩杂技。</p>\n<p>明明变量是m你非要用n暴露。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//错误的：</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> m = <span class=\"number\">100</span>;</span><br><span class=\"line\">exports.n = m;</span><br></pre></td></tr></table></figure>\n<p>虽然语法没有问题，但是成熟程序员不会这样玩儿。</p>\n<p>② 建议：接收的时候，文件名是什么，就用什么接收。你别玩杂技。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//正确的：</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"built_in\">require</span>(<span class=\"string\">\"./a.js\"</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a.m);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//错误的：</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> b = <span class=\"built_in\">require</span>(<span class=\"string\">\"./a.js\"</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a.m);</span><br></pre></td></tr></table></figure>\n<p>nodejs在运行的时候，接受的那个变量（a）会自动成为exports对象。</p>\n<p><code>exports.** = **</code>的写法天生有namespace（命名空间）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">┣ app.js</span><br><span class=\"line\">┣ yuan.js</span><br><span class=\"line\">┣ juxing.js</span><br></pre></td></tr></table></figure>\n<p>yuan.js和juxing.js文件里面都定义了mianji和zhouchang函数，但是引入的时候由于又命名空间，所以不乱套。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> yuan = <span class=\"built_in\">require</span>(<span class=\"string\">\"./yuan.js\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> juxing = <span class=\"built_in\">require</span>(<span class=\"string\">\"./juxing.js\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(yuan.mianji(<span class=\"number\">15</span>));</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(yuan.zhouchang(<span class=\"number\">15</span>));</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(juxing.mianji(<span class=\"number\">10</span>,<span class=\"number\">12</span>));</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(juxing.zhouchang(<span class=\"number\">10</span>,<span class=\"number\">12</span>));</span><br></pre></td></tr></table></figure>\n<p><img src=\"image40.png\" alt=\"\"></p>\n<h2 id=\"5-5-使用module-exports-暴露\"><a href=\"#5-5-使用module-exports-暴露\" class=\"headerlink\" title=\"5.5 使用module.exports = **暴露\"></a>5.5 使用<code>module.exports = **</code>暴露</h2><p>当一个js文件中仅仅希望暴露一个东西（通常是构造函数），此时我们可以使用<code>module.exports = **</code>的方法暴露。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">┣ app.js</span><br><span class=\"line\">┣ People.js</span><br></pre></td></tr></table></figure>\n<p>People.js:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">People</span>(<span class=\"params\">name,age,sex</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>.age = age;</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>.sex = sex;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">People.prototype.sayHello = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"string\">\"你好我是\"</span> + <span class=\"keyword\">this</span>.name);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = People</span><br></pre></td></tr></table></figure>\n<p>app.js:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> People = <span class=\"built_in\">require</span>(<span class=\"string\">\"./People.js\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> xiaoming = <span class=\"keyword\">new</span> People(<span class=\"string\">\"小明\"</span> , <span class=\"number\">12</span> , <span class=\"string\">\"男\"</span>);</span><br><span class=\"line\">xiaoming.sayHello();</span><br></pre></td></tr></table></figure>\n<p>如果仍然使用exports.People = People的方法暴露，此时就势必要：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> xiaoming = <span class=\"keyword\">new</span> People.People(<span class=\"string\">\"小明\"</span> , <span class=\"number\">12</span> , <span class=\"string\">\"男\"</span>);</span><br></pre></td></tr></table></figure>\n<p><strong>总结一下：</strong></p>\n<p>● 如果一个js文件中有多个东西要暴露（通常是暴露一些相关的函数比如面积、周长），此时用<code>exports.** = **</code>暴露。</p>\n<p>● 如果一个js文件中只暴露一个文件（通常是构造函数），此时用<code>module.exports = **;</code>暴露。</p>\n<h2 id=\"5-6-使用文件夹\"><a href=\"#5-6-使用文件夹\" class=\"headerlink\" title=\"5.6 使用文件夹\"></a>5.6 使用文件夹</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">┣ app.js</span><br><span class=\"line\">┣ jihe</span><br><span class=\"line\">┃ ┣ yuan.js</span><br><span class=\"line\">┃ ┣ juxing.js</span><br><span class=\"line\">┃ ┣ index.js</span><br></pre></td></tr></table></figure>\n<p>我们将yuan.js和juxing.js放入了一个叫做jihe的文件夹中，被index.js”统领”。</p>\n<p>此时我们先看jihe/index.js:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> juxing = <span class=\"built_in\">require</span>(<span class=\"string\">\"./juxing.js\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> yuan = <span class=\"built_in\">require</span>(<span class=\"string\">\"./yuan.js\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">exports.juxing = juxing;</span><br><span class=\"line\">exports.yuan = yuan;</span><br></pre></td></tr></table></figure>\n<p>这个文件很性感，接受之后什么都不调用直接暴露。这个文件的作用就是一个小中转器，是一个小统领。</p>\n<p>此时yuan.js、juxing.js的文件内容和5.4一致，不再写了。</p>\n<p>app.js</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> jihe = <span class=\"built_in\">require</span>(<span class=\"string\">\"./jihe\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(jihe.yuan.mianji(<span class=\"number\">10</span>));</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(jihe.juxing.zhouchang(<span class=\"number\">10</span>,<span class=\"number\">19</span>));</span><br></pre></td></tr></table></figure>\n<p>需要注意，当我们require()的时候，如果没有写.js后缀，此时nodejs将认为我们在引入一个文件夹，此时将会自动引入这个文件夹中的index.js文件。</p>\n<p>也就是说</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> jihe = <span class=\"built_in\">require</span>(<span class=\"string\">\"./jihe\"</span>);</span><br></pre></td></tr></table></figure>\n<p>等价于：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> jihe = <span class=\"built_in\">require</span>(<span class=\"string\">\"./jihe/index.js\"</span>)</span><br></pre></td></tr></table></figure>\n<p>注意<code>./</code>不能省！！</p>\n<h2 id=\"5-7-神奇的node-modules文件夹\"><a href=\"#5-7-神奇的node-modules文件夹\" class=\"headerlink\" title=\"5.7 神奇的node_modules文件夹\"></a>5.7 神奇的node_modules文件夹</h2><p><strong>nodejs中有一个设置，就是如果js的文件夹放入了node_modules文件夹中，此时引用它的将可以不写<code>./</code></strong>。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">┣ app.js</span><br><span class=\"line\">┣ node_modules</span><br><span class=\"line\">┃  ┣ jihe</span><br><span class=\"line\">┃  ┃  ┣ yuan.js</span><br><span class=\"line\">┃  ┃  ┣ juxing.js</span><br><span class=\"line\">┃  ┃  ┣ index.js</span><br></pre></td></tr></table></figure>\n<p>jihe文件夹中的内容和5.6小节一样的，不写了。</p>\n<p>app.js引用jihe.js文件的时候，此时require的特别漂亮！</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> jihe = <span class=\"built_in\">require</span>(<span class=\"string\">\"jihe\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(jihe.yuan.mianji(<span class=\"number\">10</span>));</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(jihe.juxing.zhouchang(<span class=\"number\">10</span>,<span class=\"number\">19</span>));</span><br></pre></td></tr></table></figure>\n<p>也就是说：</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>require的形式</th>\n<th>引用的谁</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>require(“./a.js”)</td>\n<td>同目录的a.js文件</td>\n</tr>\n<tr>\n<td>require(“./a”)</td>\n<td>a文件夹中的index.js文件</td>\n</tr>\n<tr>\n<td>require(“a”)</td>\n<td>node_modules文件夹中的a文件夹中的index.js文件</td>\n</tr>\n<tr>\n<td>require(“a.js”)</td>\n<td>node_modules文件夹中的a.js</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h2 id=\"5-8-模块的概念\"><a href=\"#5-8-模块的概念\" class=\"headerlink\" title=\"5.8 模块的概念\"></a>5.8 模块的概念</h2><p>当一个js文件可以独立完成一个事情，这个js文件就是一个模块。</p>\n<p>当一些js文件共同配合完成一个事情，这些js文件就是一个模块。</p>\n<p>模块（module，不是model模型）是一个文件的功能性的、组织性的概念，不是物理性的概念。</p>\n<p>juxing.js是一个模块，因为它可以独立完成关于矩形的所有计算。</p>\n<p>yuan.js也是一个模块，因为它可以独立完成关于圆形的所有计算。</p>\n<p>他们结合在一起，成为jihe文件夹，jihe又称一个新模块。</p>\n<h1 id=\"六、npm的世界\"><a href=\"#六、npm的世界\" class=\"headerlink\" title=\"六、npm的世界\"></a>六、npm的世界</h1><h2 id=\"6-1-npm-install命令\"><a href=\"#6-1-npm-install命令\" class=\"headerlink\" title=\"6.1 npm install命令\"></a>6.1 npm install命令</h2><p>这是一个模块的分享社区，我们可以免费的、自由的使用别人的模块。</p>\n<p>而别人的模块，很可能也在使用其他人的模块。每个人都站在巨人的肩膀上，这个世界变得更简单，轮子不需要重复的造，我们只专注于造汽车。</p>\n<p>比如有一天，老板让你实现当用户输入网址</p>\n<p><a href=\"http://127.0.0.1:3000/12321\" target=\"_blank\" rel=\"noopener\">http://127.0.0.1:3000/12321</a></p>\n<p>的时候，页面显示一二三二一。或者一万两千三百二十一元。</p>\n<p>此时你会路由的知识，但是不知道如何进行阿拉伯数字和汉语的转换。</p>\n<p>找模块！找巨人！npm就是这样的社区，npm就是node package manager的意思。</p>\n<p>node包管理器。</p>\n<p>官网：<a href=\"https://www.npmjs.com/\" target=\"_blank\" rel=\"noopener\">https://www.npmjs.com/</a></p>\n<blockquote>\n<p>npm is the package manager for JavaScript and the world’s largest software registry. Discover packages of reusable code —- and assemble them in powerful new ways.</p>\n<p>npm是JavaScript的包管理器，是世界上最大的软件托管仓库。浏览这些包，这些包都是可服用的代码。组合他们开发出你自己的新的东西！</p>\n</blockquote>\n<p>输入大写，按回车：</p>\n<p><img src=\"image41.png\" alt=\"\"></p>\n<p>我们发现了一个叫做nzh的一个包，网址：<a href=\"https://www.npmjs.com/package/nzh\" target=\"_blank\" rel=\"noopener\">https://www.npmjs.com/package/nzh</a></p>\n<p>此时我们想要下载这个叫做nzh的包，此时我们使用CMD命令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install nzh</span><br></pre></td></tr></table></figure>\n<p>npm包管理器随着nodejs安装而安装了。所以我们已经可以使用npm了。</p>\n<p>注意要使用npm的时候，必须联网。</p>\n<p>当我们输入<code>npm install nzh</code>之后，此时项目文件夹中就自动多了<code>node\\_modules</code>文件夹。</p>\n<p><img src=\"image42.png\" alt=\"\"></p>\n<p>node_modules文件夹中就有了nzh文件夹！这是一个模块！</p>\n<p><img src=\"image43.png\" alt=\"\"></p>\n<p>此时通过查看API我们可以写出app.js文件了：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> nzh = <span class=\"built_in\">require</span>(<span class=\"string\">\"nzh\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> nzhcn = nzh.cn; </span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(nzhcn.toMoney(<span class=\"number\">12321</span>))</span><br></pre></td></tr></table></figure>\n<p>也就是说别人开发的nzh这个包现在就被我们自己使用了！</p>\n<p>这里说一嘴，所有的API的路径都是</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://www.npmjs.com/package/包名字</span><br></pre></td></tr></table></figure>\n<p>老板新需求：让你把1997年5月8日变为农历。</p>\n<p><img src=\"image44.png\" alt=\"\"></p>\n<p>参考API，此时就能写出自己的程序：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> solarLunar = <span class=\"built_in\">require</span>(<span class=\"string\">\"solarlunar\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//API看来的</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = solarLunar.solar2lunar(<span class=\"number\">1997</span>, <span class=\"number\">5</span>, <span class=\"number\">8</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj.gzYear + obj.gzMonth + obj.gzDay);</span><br></pre></td></tr></table></figure>\n<p>老板新需求：将一个数组变为excel表格。</p>\n<p>此时我们下载node-xlsx这个包，此时你会发现依赖的依赖也会被同时下载。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install node-xlsx</span><br></pre></td></tr></table></figure>\n<p>结合API我们写：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> xlsx = <span class=\"built_in\">require</span>(<span class=\"string\">\"node-xlsx\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">\"fs\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//API看来的</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> data = [[<span class=\"string\">\"国家\"</span>,<span class=\"string\">\"人口\"</span>,<span class=\"string\">\"GDP\"</span>],[<span class=\"string\">\"中国\"</span>,<span class=\"number\">13</span>,<span class=\"number\">200</span>],[<span class=\"string\">\"印度\"</span>,<span class=\"number\">15</span>,<span class=\"number\">1</span>],[<span class=\"string\">\"日本\"</span>,<span class=\"number\">1</span>,<span class=\"number\">0.08</span>]];</span><br><span class=\"line\"><span class=\"keyword\">var</span> buffer = xlsx.build([&#123;<span class=\"attr\">name</span>: <span class=\"string\">\"各国数据\"</span>, <span class=\"attr\">data</span>: data&#125;]);  </span><br><span class=\"line\">fs.writeFile(<span class=\"string\">\"./老板请您简约.xlsx\"</span> , buffer);</span><br></pre></td></tr></table></figure>\n<h2 id=\"6-2-依赖\"><a href=\"#6-2-依赖\" class=\"headerlink\" title=\"6.2 依赖\"></a>6.2 依赖</h2><p>我们从npm上下载的node_modules文件夹称之为依赖。</p>\n<p>此时我们可以用package.json文件管理这些依赖，我们称为项目的”身份证”。</p>\n<p>我们在开发项目的时候，第一步就是创建一个项目的身份证。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm init</span><br></pre></td></tr></table></figure>\n<p><img src=\"image45.png\" alt=\"\"></p>\n<p>就会显示一个调查问卷。将引导你创建这个身份证。</p>\n<p><img src=\"image46.png\" alt=\"\"></p>\n<p>他会询问你包名字、版本、描述、入口文件、测试命令、git网址、关键词、作者、版权协议。</p>\n<p>你回答一下，系统会猜测一些答案就是括号中的内容，直接按回车就是使用它。</p>\n<p>系统会创建这个文件：</p>\n<p><img src=\"image47.png\" alt=\"\"></p>\n<p>内容：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"day1\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"version\"</span>: <span class=\"string\">\"0.0.1\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"description\"</span>: <span class=\"string\">\"这是考拉老师的一个案例\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"main\"</span>: <span class=\"string\">\"app.js\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"scripts\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"test\"</span>: <span class=\"string\">\"echo \\\"Error: no test specified\\\" &amp;&amp; exit 1\"</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">\"keywords\"</span>: [</span><br><span class=\"line\">    <span class=\"string\">\"考拉\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"牛逼\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"爱前端\"</span></span><br><span class=\"line\">  ],</span><br><span class=\"line\">  <span class=\"attr\">\"author\"</span>: <span class=\"string\">\"考拉\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"license\"</span>: <span class=\"string\">\"MIT\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>今后安装依赖的时候要加上--save后缀，比如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install nzh --save</span><br></pre></td></tr></table></figure>\n<p>此时加上<code>--save</code>之后，我们身份证会自动更新一个依赖项：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"day1\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"version\"</span>: <span class=\"string\">\"0.0.1\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"description\"</span>: <span class=\"string\">\"这是考拉老师的一个案例\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"main\"</span>: <span class=\"string\">\"app.js\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"scripts\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"test\"</span>: <span class=\"string\">\"echo \\\"Error: no test specified\\\" &amp;&amp; exit 1\"</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">\"keywords\"</span>: [</span><br><span class=\"line\">    <span class=\"string\">\"考拉\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"牛逼\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"爱前端\"</span></span><br><span class=\"line\">  ],</span><br><span class=\"line\">  <span class=\"attr\">\"author\"</span>: <span class=\"string\">\"考拉\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"license\"</span>: <span class=\"string\">\"MIT\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"dependencies\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"node-xlsx\"</span>: <span class=\"string\">\"^0.11.0\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"nzh\"</span>: <span class=\"string\">\"^1.0.1\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"solarlunar\"</span>: <span class=\"string\">\"^2.0.1\"</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>有了这个有什么好处呢？？</strong></p>\n<p>此时我们的项目拷贝给别人的时候、做版本管理的时候，可以完全忽略node_modules文件夹！</p>\n<p>因为我们任何使用可以使用</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install</span><br></pre></td></tr></table></figure>\n<p>来安装项目的所有依赖。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><blockquote>\n<p>第1天课堂笔记</p>\n<p>讲师：邵山欢</p>\n<p>日期：2017年11月2日</p>\n</blockquote>\n<h1 id=\"一、复习B-S架构\"><a href=\"#一、复习B-S架构\" class=\"headerlink\" title=\"一、复习B/S架构\"></a>一、复习B/S架构</h1><h2 id=\"1-1-B-S架构图示\"><a href=\"#1-1-B-S架构图示\" class=\"headerlink\" title=\"1.1 B/S架构图示\"></a>1.1 B/S架构图示</h2><p><img src=\"image2.png\" alt=\"\"></p>\n<p>服务器上运行着一些程序，这些程序是PHP、JSP、ASP、Python、Scala等等，这些语言都是后台语言。</p>\n<hr>\n<blockquote>\n<p>当用户从浏览器发出HTTP请求（点击了一个超级链接、输入了网址、提交了表单）之后，后台语言就开始执行了。后台语言往往需要根据这个HTTP请求携带的参数，进行不同的、差异化的工作，与数据库通信完毕之后，组件一个页面用HTTP响应发回给浏览器。浏览器解析渲染HTML、CSS和JS脚本。</p>\n</blockquote>\n<h2 id=\"1-2-集合PHP程序来复习GET请求和POST请求\"><a href=\"#1-2-集合PHP程序来复习GET请求和POST请求\" class=\"headerlink\" title=\"1.2 集合PHP程序来复习GET请求和POST请求\"></a>1.2 集合PHP程序来复习GET请求和POST请求</h2><p>PHP是一个语言，不能独立运行，必须运行在阿帕奇（Apache）之上。计算机只要安装了这些服务器的软件（比如阿帕奇、IIS、Nginx、Tomcat、glassfish）就能提供HTTP服务，此时计算机就是服务器了。</p>\n<p>阿帕奇有一个最大的特点：<strong>就能能够自动根据文件的物理层次映射出URL。</strong></p>\n<hr>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>物理文件的地址</th>\n<th>URL</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>阿帕奇根目录/index.html</td>\n<td><a href=\"http://127.0.0.1/\" target=\"_blank\" rel=\"noopener\">http://127.0.0.1/</a></td>\n</tr>\n<tr>\n<td>阿帕奇根目录/a/index.html</td>\n<td><a href=\"http://127.0.0.1/a/\" target=\"_blank\" rel=\"noopener\">http://127.0.0.1/a/</a></td>\n</tr>\n<tr>\n<td>阿帕奇根目录/a/b/c/index.html</td>\n<td><a href=\"http://127.0.0.1/a/b/c/\" target=\"_blank\" rel=\"noopener\">http://127.0.0.1/a/b/c/</a></td>\n</tr>\n</tbody>\n</table>\n</div>\n<hr>\n<p>下面复习一下GET请求和POST请求，我们结合PHP和数据库来做演示案例。</p>\n<p><strong>GET请求的哲学是：问服务器要东西，使用POST请求往往是传给服务器id，希望服务器发回这个id的文章。</strong></p>\n<p>下面就是一个简单的GET请求的PHP程序。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">\t//链接数据库</span><br><span class=\"line\">\t$conn = mysql_connect(&quot;localhost&quot;,&quot;root&quot;,&quot;123456&quot;);</span><br><span class=\"line\">\t//选择数据库</span><br><span class=\"line\">\tmysql_select_db(&quot;kaolaxinwen&quot;, $conn);</span><br><span class=\"line\">\t//中文</span><br><span class=\"line\">\tmysql_query(&quot;SET NAMES UTF8&quot;);</span><br><span class=\"line\">\t//得到id</span><br><span class=\"line\">\t$id = $_GET[&quot;id&quot;];</span><br><span class=\"line\">\t//SQL语句</span><br><span class=\"line\">\t$sql = &quot;SELECT * FROM xinwen WHERE id = &#123;$id&#125;&quot;;</span><br><span class=\"line\">\t//执行SQL语句</span><br><span class=\"line\">\t$result = mysql_query($sql);</span><br><span class=\"line\">\t//转变结果的格式</span><br><span class=\"line\">\t$row = mysql_fetch_array($result);</span><br><span class=\"line\">?&gt;</span><br><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html lang=&quot;en&quot;&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">\t&lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class=\"line\">\t&lt;title&gt;Document&lt;/title&gt;</span><br><span class=\"line\">\t&lt;style type=&quot;text/css&quot;&gt;</span><br><span class=\"line\">\t\t.box&#123;</span><br><span class=\"line\">\t\t\twidth:1000px;</span><br><span class=\"line\">\t\t\tmargin: 0 auto;</span><br><span class=\"line\">\t\t\tbackground-color: skyblue;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\th1&#123;</span><br><span class=\"line\">\t\t\ttext-align: center;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&lt;/style&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">\t&lt;div class=&quot;box&quot;&gt;</span><br><span class=\"line\">\t\t&lt;h1&gt;&lt;?php echo $row[&quot;biaoti&quot;] ?&gt;&lt;/h1&gt;</span><br><span class=\"line\">\t\t&lt;div class=&quot;content&quot;&gt;</span><br><span class=\"line\">\t\t\t&lt;?php echo $row[&quot;neirong&quot;] ?&gt;</span><br><span class=\"line\">\t\t&lt;/div&gt;</span><br><span class=\"line\">\t&lt;/div&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n<p>效果：</p>\n<p><img src=\"image3.png\" alt=\"\"></p>\n<p>查看源代码：</p>\n<p><img src=\"image4.png\" alt=\"\"></p>\n<p><strong>POST请求的哲学是：希望服务器根据我的参数来对数据库进行一些增、删、改的操作。</strong></p>\n<p>比如我们做一个表单页面houtai.html，这个页面中的表单在往tijiao.php中提交内容。tijiao.php负责写入数据库。</p>\n<p><img src=\"image5.png\" alt=\"\"></p>\n<p><strong>GET请求优缺点</strong>：便于分享网址、安全性不强、不能传超长的参数。</p>\n<p><strong>POST请求的优缺点</strong>： 不便于分享网址、安全性强、理论是无限长的参数。</p>\n<p><strong>总结一下你要会的东西：</strong></p>\n<ul>\n<li><p>HTTP有请求、响应。</p>\n</li>\n<li><p>HTTP请求有GET请求和POST请求的区别，要知道他们的优缺点和哲学。</p>\n</li>\n<li><p>知道PHP是如何和数据库交互的。</p>\n</li>\n<li><p>知道GET请求的参数和POST请求的参数。</p>\n</li>\n</ul>\n<p>服务器上的语言有哪些：PHP、JSP、ASP、Python、Scala等等。</p>\n<p>今天，它迎来了Node.js。</p>\n<p><strong>Node.js将JavaScript的触角伸到了服务器上。Node.js让服务器上可以运行JS！</strong></p>\n<p>JS如今不是做个正则、做个轮播图、做个选项卡的浏览器端的语言了！今天，Node.JS可以让JS处理GET请求、POST请求、可以操作数据库！</p>\n<h1 id=\"二、Node-js的诞生和安装\"><a href=\"#二、Node-js的诞生和安装\" class=\"headerlink\" title=\"二、Node.js的诞生和安装\"></a>二、Node.js的诞生和安装</h1><h2 id=\"2-1-创始人\"><a href=\"#2-1-创始人\" class=\"headerlink\" title=\"2.1 创始人\"></a>2.1 创始人</h2><p>Rayn Dahl发现：以老牌PHP为例，理论上一个8GB内存的服务器可以同时连接的最大用户数为4000个左右。要让Web应用程序支持更多的用户，就需要增加服务器的数量，而Web应用程序的硬件成本当然就上升了。</p>\n<p><img src=\"image6.png\" alt=\"\"></p>\n<p>这个哥们就立志要发明一个平台，比PHP、JSP要有更高的性能、并发性。</p>\n<p>他将Chrome浏览器的V8引擎（目前世界上最快的JS解析引擎）移植到了服务器上，开发出了Node.js平台。</p>\n<p>2009年底，Ryan Dahl在柏林举行的JSConf EU会议上发表关于Node.js的演讲，之后Node.js逐渐流行于世。</p>\n<p><strong>Node.js是一个平台不是一个语言，语言仍然是JavaScript。此时Node.js平台可以让我们用JavaScript语言来开发服务器程序。</strong></p>\n<h2 id=\"2-2-安装Node-js\"><a href=\"#2-2-安装Node-js\" class=\"headerlink\" title=\"2.2 安装Node.js\"></a>2.2 安装Node.js</h2><p>node.js可以安装在windows、mac、linux上（绝大部分的服务器都是linux操作系统）。</p>\n<p>语言是一样的，都是JavaScript，所以node.js特别像java虚拟机，大家只需要写一份语言，就可以运行在windows、mac、linux上。</p>\n<p>nodejs官网：<a href=\"http://nodejs.org/\" target=\"_blank\" rel=\"noopener\">http://nodejs.org/</a></p>\n<p>nodejs中文网：<a href=\"http://nodejs.cn/\" target=\"_blank\" rel=\"noopener\">http://nodejs.cn/</a></p>\n<p><img src=\"image7.png\" alt=\"\"></p>\n<p>下载nodejs：</p>\n<p><img src=\"image8.png\" alt=\"\"></p>\n<p>nodejs有稳定版和最新版之分，我们学习的是最新版v8.7.0，今天的稳定版是v6.0.0。</p>\n<p><img src=\"image9.png\" alt=\"\"></p>\n<p>双击图标即可进行安装：</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th><img src=\"image10.png\" alt=\"img\"></th>\n<th>正在等待安装</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><img src=\"image11.png\" alt=\"img\"></td>\n<td>点击下一步next</td>\n</tr>\n<tr>\n<td><img src=\"image12.png\" alt=\"img\"></td>\n<td>同意协议，然后下一步</td>\n</tr>\n<tr>\n<td><img src=\"image13.png\" alt=\"img\"></td>\n<td></td>\n</tr>\n<tr>\n<td><img src=\"image14.png\" alt=\"img\"></td>\n<td>nodejs的安装包给计算机安装了4个东西。见左图。   不需要我们进行什么操作，直接点击next。</td>\n</tr>\n<tr>\n<td><img src=\"image15.png\" alt=\"img\"></td>\n<td>点击Install进行安装。</td>\n</tr>\n<tr>\n<td><img src=\"image16.png\" alt=\"img\"></td>\n<td>安装成功</td>\n</tr>\n</tbody>\n</table>\n</div>\n<p>我们要检查nodejs是否已经安装成功了。此时需要打开系统的”命令提示符”窗口。</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th><img src=\"image17.png\" alt=\"img\"></th>\n<th>按windows徽标键 + R键</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><img src=\"image18.png\" alt=\"img\"></td>\n<td>输入CMD按回车   CMD就是command命令的缩写。</td>\n</tr>\n<tr>\n<td><img src=\"image19.png\" alt=\"img\"></td>\n<td>然后就能看见这个黑底白字的命令提示符窗口。   我们以后简称“CMD”窗口。</td>\n</tr>\n<tr>\n<td><img src=\"image20.png\" alt=\"img\"></td>\n<td>输入node -v   此时就能看见版本号，说明nodejs安装成功了。</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h2 id=\"2-3-什么是环境变量？\"><a href=\"#2-3-什么是环境变量？\" class=\"headerlink\" title=\"2.3 什么是环境变量？\"></a>2.3 什么是环境变量？</h2><p>任何操作系统（windows、mac、linux）都有环境变量的概念，作用很简单：</p>\n<p><strong>在环境变量中的文件夹里面的所有exe程序都可以被当做系统级别的命令在CMD窗口中被调用。</strong></p>\n<p>对计算机图标点击属性，然后：</p>\n<p><img src=\"image21.png\" alt=\"\"></p>\n<p>环境变量是用英语分号隔开的一系列文件夹的路径。比如老师耍宝，将QQ的文件夹添加进去了。</p>\n<p>此时再次打开CMD创建，就可以运行QQ命令了：</p>\n<p><img src=\"image22.png\" alt=\"\"></p>\n<p>我们的node.js的msi安装包自动的将nodejs的安装目录设置为了环境变量。极大的方便了我们。</p>\n<p>因为nodejs的目录在环境变量中，所以我们刚才可以在CMD中运行</p>\n<p><code>node -v</code></p>\n<h1 id=\"三、Node-js的基本使用-运行谁就node谁\"><a href=\"#三、Node-js的基本使用-运行谁就node谁\" class=\"headerlink\" title=\"三、Node.js的基本使用 - 运行谁就node谁\"></a>三、Node.js的基本使用 - 运行谁就node谁</h1><p>我们创建今天的案例文件夹，是c盘的node_study文件夹，里面创建day1文件夹。</p>\n<p>我们先来认知一个事情：<strong>js的运行需要宿主环境。</strong></p>\n<p>我们创建一个01.js文件：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span> ; i &lt; <span class=\"number\">10</span> ; i++)&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(i * <span class=\"number\">2</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这个js文件不能直接拖入浏览器运行，因为没有html宿主环境。</p>\n<p>我们必须创建html文件：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Document<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"01.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>浏览这个html文件，此时控制台将有输出。</p>\n<p><img src=\"image23.png\" alt=\"\"></p>\n<p>JS需要宿主环境才能运行。截止今日，我们只知道js的一个宿主环境，就是HTML。</p>\n<p>今天我们迎来了新的宿主：<strong>nodejs平台！</strong></p>\n<p>在nodejs平台中运行js文件，此时需要使用CMD窗口。<strong>此时需要将CMD的”光标路径”更改为我们的项目文件夹</strong>。</p>\n<p>此时使用下面的命令可以切换路径：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd 路径</span><br></pre></td></tr></table></figure>\n<p>cd就是change directory，切换文件夹的意思。</p>\n<p><img src=\"image24.png\" alt=\"\"></p>\n<p>我们的口号是：运行谁就node谁</p>\n<p><img src=\"image25.png\" alt=\"\"></p>\n<p>告诉大家一个快捷操作：</p>\n<p>在项目文件夹中按住shift键的同时，点击鼠标右键，此时就能看见：</p>\n<p><img src=\"image26.png\" alt=\"\"></p>\n<p><img src=\"image27.png\" alt=\"\"></p>\n<p>由于nodejs平台没有DOM所以不能使用下面的语法：</p>\n<p>window、document、alert、document.getElementById()……</p>\n<p>但是nodejs能够识别函数、if语句、for、while等等js核心语法：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span> ; i &lt; <span class=\"number\">10</span> ; i++)&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(haha(i));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">haha</span>(<span class=\"params\">a</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> a * <span class=\"number\">3</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>补充一下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cls</span><br></pre></td></tr></table></figure>\n<p>表示清屏</p>\n<h1 id=\"四、使用Node-js搭建服务器\"><a href=\"#四、使用Node-js搭建服务器\" class=\"headerlink\" title=\"四、使用Node.js搭建服务器\"></a>四、使用Node.js搭建服务器</h1><h2 id=\"4-1-最简单的demo\"><a href=\"#4-1-最简单的demo\" class=\"headerlink\" title=\"4.1 最简单的demo\"></a>4.1 最简单的demo</h2><p>我们需要使用nodejs中的内置模块http模块，nodejs中有很多模块，我们最先使用的就是http模块。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//得到内置http模块</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">\"http\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//创建服务器，使用createServer方法来创建服务器。</span></span><br><span class=\"line\"><span class=\"comment\">//回调函数中有一个req参数表示请求，res参数表示响应。</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> server = http.createServer(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req,res</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//输出</span></span><br><span class=\"line\">\tres.end(<span class=\"string\">\"Hello NodeJS !!\"</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//监听，我们的默认80端口已经被阿帕奇占用了，所以我们监听3000端口。</span></span><br><span class=\"line\">server.listen(<span class=\"number\">3000</span></span><br></pre></td></tr></table></figure>\n<p>先照着写，然后就可以运行这个程序。</p>\n<p><img src=\"image28.png\" alt=\"\"></p>\n<p>此时不要关闭CMD窗口！打开浏览器，输入网址：</p>\n<p><a href=\"http://127.0.0.1**:3000**/\" target=\"_blank\" rel=\"noopener\">http://127.0.0.1**:3000**/</a></p>\n<p>冒号表示端口号，默认端口是80，但是我们的80被阿帕奇占用了，所以我们就使用3000端口了。</p>\n<p><img src=\"image29.png\" alt=\"\"></p>\n<p>如果想要打断服务器的执行，此时在CMD中按ctrl+c键。</p>\n<p><img src=\"image30.png\" alt=\"\"></p>\n<p>一旦打断了挂起的CMD，此时浏览器中就崩溃了：</p>\n<p><img src=\"image31.png\" alt=\"\"></p>\n<p><strong>注意：如果改变了js文件，此时刷新浏览器没用，必须重新执行node命令！</strong></p>\n<p><strong>两个问题：</strong></p>\n<p>●问题1：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">res.end(<span class=\"string\">\"好高兴啊我买了一个iPhone\"</span> + (<span class=\"number\">1</span>+<span class=\"number\">32</span>));</span><br></pre></td></tr></table></figure>\n<p>在浏览器中查看源代码，不能看见1+32的运算结果的。这是因为程序运行在服务器上。</p>\n<p>●问题2：</p>\n<p>用户的电脑里面没有安装nodejs平台，此时也可以访问nodejs服务器。</p>\n<p>因为nodejs运行在服务器上，发给客户端的时候已经变为纯的、平的HTML了！</p>\n<p><strong>补充：</strong></p>\n<p>● 多条输出用write，但是最后必须有end：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">res.write(<span class=\"string\">\"哈哈\"</span>);</span><br><span class=\"line\">res.write(<span class=\"string\">\"哈哈\"</span>);</span><br><span class=\"line\">res.write(<span class=\"string\">\"哈哈\"</span>);</span><br><span class=\"line\">res.write(<span class=\"string\">\"哈哈\"</span>);</span><br><span class=\"line\">res.write(<span class=\"string\">\"哈哈\"</span>);</span><br><span class=\"line\">res.end(<span class=\"string\">\"好高兴啊我买了一个iPhone\"</span> + (<span class=\"number\">4</span>+<span class=\"number\">4</span>));</span><br></pre></td></tr></table></figure>\n<p>● res.write()和res.end()中只能是字符串不能是数字：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">res.end(<span class=\"number\">123</span>); <span class=\"comment\">//错误的</span></span><br><span class=\"line\">res.end(<span class=\"string\">\"123\"</span>); <span class=\"comment\">//正确的</span></span><br></pre></td></tr></table></figure>\n<p>● 可以结合HTML标签：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">res.end(<span class=\"string\">\"&lt;h1&gt;你好，NodeJS我来了&lt;/h1&gt;\"</span>);</span><br></pre></td></tr></table></figure>\n<p>Node.js中有很多的内置模块，手册就是按模块来列出的API：</p>\n<p><img src=\"image32.png\" alt=\"\"></p>\n<h2 id=\"4-2-使用外置页面\"><a href=\"#4-2-使用外置页面\" class=\"headerlink\" title=\"4.2 使用外置页面\"></a>4.2 使用外置页面</h2><p>我们现在的目标就是做一个外面的页面public/wangjunkai.html，此时就要使用新的内置模块fs。</p>\n<p><strong>fs模块</strong>最重要的API，就是readFile，可以异步读取文件，第一个参数就是URL，要读取的文件路径（注意：必须以<code>./</code>开头，表示从当前js文件出发寻找html文件）。第二个参数是回调函数，表示读取完毕之后做的事情。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fs.readFile(<span class=\"string\">\"./public/wangjunkai.html\"</span> , <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err , data</span>)</span>&#123;</span><br><span class=\"line\">\tres.end(data);  <span class=\"comment\">//让res显示文件。</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>http和fs共同配合完成这个事情：</p>\n<p><img src=\"image33.png\" alt=\"\"></p>\n<h2 id=\"4-3-路由（重点）\"><a href=\"#4-3-路由（重点）\" class=\"headerlink\" title=\"4.3 路由（重点）\"></a>4.3 路由（重点）</h2><p>上面的案例，不管输入什么URL，都是访问wangjunkai.html页面：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> server = http.createServer(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req,res</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//设置UTF8</span></span><br><span class=\"line\">\tres.setHeader(<span class=\"string\">\"Content-Type\"</span>,<span class=\"string\">\"text/html;charset=UTF8\"</span>);</span><br><span class=\"line\">\t<span class=\"comment\">//需要读取文件</span></span><br><span class=\"line\">\tfs.readFile(<span class=\"string\">\"./public/wangjunkai.html\"</span> , <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err , data</span>)</span>&#123;</span><br><span class=\"line\">\t\tres.end(data);</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p><img src=\"image34.png\" alt=\"\"></p>\n<p>我们可以利用req.url得到用户输入的URL地址。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">\"http\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">\"fs\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//创建一个服务器</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> server = http.createServer(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req,res</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//设置UTF8</span></span><br><span class=\"line\">\tres.setHeader(<span class=\"string\">\"Content-Type\"</span>,<span class=\"string\">\"text/html;charset=UTF8\"</span>);</span><br><span class=\"line\">\t<span class=\"comment\">//输出访问的URL地址</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(req.url == <span class=\"string\">\"/mingxing/wjk\"</span>)&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//需要读取文件</span></span><br><span class=\"line\">\t\tfs.readFile(<span class=\"string\">\"./public/wangjunkai.html\"</span> , <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err , data</span>)</span>&#123;</span><br><span class=\"line\">\t\t\tres.end(data);</span><br><span class=\"line\">\t\t&#125;);</span><br><span class=\"line\">\t&#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(req.url == <span class=\"string\">\"/shuaige/lh\"</span>)&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//需要读取文件</span></span><br><span class=\"line\">\t\tfs.readFile(<span class=\"string\">\"./public/luhan.html\"</span> , <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err , data</span>)</span>&#123;</span><br><span class=\"line\">\t\t\tres.end(data);</span><br><span class=\"line\">\t\t&#125;);</span><br><span class=\"line\">\t&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\tres.end(<span class=\"string\">\"没有这个页面！\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//监听</span></span><br><span class=\"line\">server.listen(<span class=\"number\">3000</span>);</span><br></pre></td></tr></table></figure>\n<p><strong>顶层路由设计：</strong></p>\n<ul>\n<li><p>物理文件的层次和URL是没有关系的！</p>\n</li>\n<li><p>Node.js可以做顶层路由设计！一个页面想叫什么URL就可以叫做什么URL！</p>\n</li>\n<li><p>用户输入的URL可以被路由映射为任何HTML页面！</p>\n</li>\n</ul>\n<p><img src=\"image35.png\" alt=\"\"></p>\n<p>现在的时代主流，有意义的URL非常的重要。比如知乎的URL：</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>URL</th>\n<th>用途</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"https://www.zhihu.com/people/albanybear/activities\" target=\"_blank\" rel=\"noopener\">https://www.zhihu.com/people/albanybear/activities</a></td>\n<td>albanybear用户的活动</td>\n</tr>\n<tr>\n<td><a href=\"https://www.zhihu.com/people/albanybear/answers\" target=\"_blank\" rel=\"noopener\">https://www.zhihu.com/people/albanybear/answers</a></td>\n<td>albanybear用户的回答</td>\n</tr>\n<tr>\n<td><a href=\"https://www.zhihu.com/people/albanybear/asks\" target=\"_blank\" rel=\"noopener\">https://www.zhihu.com/people/albanybear/asks</a></td>\n<td>albanybear用户的提问</td>\n</tr>\n<tr>\n<td><a href=\"https://www.zhihu.com/people/albanybear/posts\" target=\"_blank\" rel=\"noopener\">https://www.zhihu.com/people/albanybear/posts</a></td>\n<td>albanybear用户的文章</td>\n</tr>\n<tr>\n<td><a href=\"https://www.zhihu.com/people/albanybear/columns\" target=\"_blank\" rel=\"noopener\">https://www.zhihu.com/people/albanybear/columns</a></td>\n<td>albanybear用户的专栏</td>\n</tr>\n<tr>\n<td><a href=\"https://www.zhihu.com/people/albanybear/pins\" target=\"_blank\" rel=\"noopener\">https://www.zhihu.com/people/albanybear/pins</a></td>\n<td>albanybear用户的想法</td>\n</tr>\n<tr>\n<td><a href=\"https://www.zhihu.com/people/albanybear/collections\" target=\"_blank\" rel=\"noopener\">https://www.zhihu.com/people/albanybear/collections</a></td>\n<td>albanybear用户的收藏</td>\n</tr>\n</tbody>\n</table>\n</div>\n<p>老一代的路由：</p>\n<p><a href=\"http://www.zhihu.com/tiwen.php?username=albanybear\" target=\"_blank\" rel=\"noopener\">http://www.zhihu.com/tiwen.php?username=albanybear</a></p>\n<p><a href=\"http://www.zhihu.com/answers.php?username=albanybear\" target=\"_blank\" rel=\"noopener\">http://www.zhihu.com/answers.php?username=albanybear</a></p>\n<p>我们现在可以模拟知乎的路由，首先先复习正则表达式的知识：</p>\n<p><img src=\"image36.png\" alt=\"\"></p>\n<p>代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> server = http.createServer(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req,res</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//设置UTF8</span></span><br><span class=\"line\">\tres.setHeader(<span class=\"string\">\"Content-Type\"</span>,<span class=\"string\">\"text/html;charset=UTF8\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//得到用户的url</span></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> url = req.url;</span><br><span class=\"line\">\t<span class=\"comment\">//用正则拆</span></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> arr = url.match(<span class=\"regexp\">/\\/user\\/(.+)\\/(.+)$/</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//验证是否提炼成为了数组</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(!arr)&#123;</span><br><span class=\"line\">\t\tres.end(<span class=\"string\">\"&lt;h1&gt;没有这个网址&lt;/h1&gt;\"</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//得到$1，就是正则中的第一个()</span></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> $<span class=\"number\">1</span> = arr[<span class=\"number\">1</span>];</span><br><span class=\"line\">\t<span class=\"comment\">//得到$2，就是正则中的第二个()</span></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> $<span class=\"number\">2</span> = arr[<span class=\"number\">2</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//模拟数据库</span></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> users = &#123;</span><br><span class=\"line\">\t\t<span class=\"string\">\"wangjunkai\"</span> : <span class=\"string\">\"王俊凯\"</span> ,</span><br><span class=\"line\">\t\t<span class=\"string\">\"liyifeng\"</span> : <span class=\"string\">\"李易峰\"</span>,</span><br><span class=\"line\">\t\t<span class=\"string\">\"luhan\"</span> : <span class=\"string\">\"鹿晗\"</span>,</span><br><span class=\"line\">\t\t<span class=\"string\">\"wuyifan\"</span> : <span class=\"string\">\"吴亦凡\"</span></span><br><span class=\"line\">\t&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> list = &#123;</span><br><span class=\"line\">\t\t<span class=\"string\">\"post\"</span> : <span class=\"string\">\"文章\"</span>,</span><br><span class=\"line\">\t\t<span class=\"string\">\"ask\"</span> : <span class=\"string\">\"提问\"</span>,</span><br><span class=\"line\">\t\t<span class=\"string\">\"answers\"</span> : <span class=\"string\">\"回答\"</span>,</span><br><span class=\"line\">\t\t<span class=\"string\">\"pins\"</span> : <span class=\"string\">\"想法\"</span></span><br><span class=\"line\">\t&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">\tres.end(<span class=\"string\">\"&lt;h1&gt;欢迎查看\"</span> + users[$<span class=\"number\">1</span>] + <span class=\"string\">\"的\"</span> + list[$<span class=\"number\">2</span>] + <span class=\"string\">\"&lt;/h1&gt;\"</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>我们就模拟出了知乎的路由设计：</p>\n<p><img src=\"image37.png\" alt=\"\"></p>\n<p>现在我们就<strong>不能</strong>认为根目录下有一个user文件夹，然后有luhan文件夹，然后有answers文件夹。</p>\n<h2 id=\"4-4-顶层路由设计有不方便的地方\"><a href=\"#4-4-顶层路由设计有不方便的地方\" class=\"headerlink\" title=\"4.4 顶层路由设计有不方便的地方\"></a>4.4 顶层路由设计有不方便的地方</h2><p>我们刚才通过案例知道了顶层路由设计的方便之处，URL非常的规整，类似知乎的路由。</p>\n<p>但是不方便的地方就是一些静态文件：图片、样式表等等。此时都需要一个一个开路由。</p>\n<p>比如页面上插入一个图片：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;img src=&quot;wangjunkai.png&quot; alt=&quot;&quot;</span><br></pre></td></tr></table></figure>\n<p>此时就要专门给这个图片开路由：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">……</span><br><span class=\"line\"><span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(req.url == <span class=\"string\">\"/mingxing/wangjunkai.png\"</span>)&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//设置UTF8</span></span><br><span class=\"line\">\tres.setHeader(<span class=\"string\">\"Content-Type\"</span>,<span class=\"string\">\"image/png\"</span>);</span><br><span class=\"line\">\t<span class=\"comment\">//需要读取文件</span></span><br><span class=\"line\">\tfs.readFile(<span class=\"string\">\"./public/wangjunkai.png\"</span> , <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err , data</span>)</span>&#123;</span><br><span class=\"line\">\t\tres.end(data);</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\">&#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(req.url == <span class=\"string\">\"/mingxing/goupi.css\"</span>)&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//设置UTF8</span></span><br><span class=\"line\">\tres.setHeader(<span class=\"string\">\"Content-Type\"</span>,<span class=\"string\">\"text/css\"</span>);</span><br><span class=\"line\">\t<span class=\"comment\">//需要读取文件</span></span><br><span class=\"line\">\tfs.readFile(<span class=\"string\">\"./public/css.css\"</span> , <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err , data</span>)</span>&#123;</span><br><span class=\"line\">\t\tres.end(data);</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">……</span><br></pre></td></tr></table></figure>\n<p><strong>理论上：如果页面上有100个图片，此时就要开100个路由。</strong></p>\n<p>我们明天将会在express中介绍将一个文件夹”静态化”。就是指这个文件夹中的文件将自动拥有URL路由。</p>\n<h1 id=\"五、模块（重点）\"><a href=\"#五、模块（重点）\" class=\"headerlink\" title=\"五、模块（重点）\"></a>五、模块（重点）</h1><h2 id=\"5-1-HTML宿主环境中的多js文件\"><a href=\"#5-1-HTML宿主环境中的多js文件\" class=\"headerlink\" title=\"5.1 HTML宿主环境中的多js文件\"></a>5.1 HTML宿主环境中的多js文件</h2><p>HTML宿主环境中，多个js文件共用一个html宿主，所以它们之间的<strong>作用域是打通的</strong>。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Document<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"1.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span>  → 这里面var a = 100;</span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"2.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span>  → 能够alert(a);</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>因为1.js文件中定义的<strong>a是全局变量就是window的属性</strong>，2.js文件中当然共用window对象。</p>\n<p>nodejs是如何处理多个js文件的？多个js文件如何搭配工作，是后面40分钟的内容。</p>\n<h2 id=\"5-2-require谁就会运行谁\"><a href=\"#5-2-require谁就会运行谁\" class=\"headerlink\" title=\"5.2 require谁就会运行谁\"></a>5.2 require谁就会运行谁</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">┣ app.js</span><br><span class=\"line\">┣ a.js</span><br></pre></td></tr></table></figure>\n<p>app.js:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">require</span>(<span class=\"string\">\"./a.js\"</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"我是app.js\"</span>);</span><br></pre></td></tr></table></figure>\n<p>a.js:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"你好我是a.js\"</span>);</span><br></pre></td></tr></table></figure>\n<p>现在node app.js</p>\n<p><img src=\"image38.png\" alt=\"\"></p>\n<p><strong>在nodejs中，可以js文件中require（引用）另一个js文件，此时就会立即运行那个引用的js文件</strong>。</p>\n<p>app.js可以require a.js文件，a.js文件也可以require b.js文件。</p>\n<h2 id=\"5-3-js文件在Node-js中天生作用域隔离\"><a href=\"#5-3-js文件在Node-js中天生作用域隔离\" class=\"headerlink\" title=\"5.3 js文件在Node.js中天生作用域隔离\"></a>5.3 js文件在Node.js中天生作用域隔离</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">┣ app.js</span><br><span class=\"line\">┣ a.js</span><br></pre></td></tr></table></figure>\n<p>在a.js文件中定义了所谓的”全局”m，然后app.js文件引用a.js之后，尝试显示m变量。</p>\n<p>app.js:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">require</span>(<span class=\"string\">\"./a.js\"</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(m);</span><br></pre></td></tr></table></figure>\n<p>a.js：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> m = <span class=\"number\">100</span>;  <span class=\"comment\">//尝试定义全局变量</span></span><br></pre></td></tr></table></figure>\n<p>此时node app.js报错了。</p>\n<p><img src=\"image39.png\" alt=\"\"></p>\n<p><strong>js文件在Node.js中天生作用域隔离的！为什么？</strong></p>\n<p><strong>因为没有了window对象。</strong></p>\n<h2 id=\"5-4-使用exports-的语法进行暴露\"><a href=\"#5-4-使用exports-的语法进行暴露\" class=\"headerlink\" title=\"5.4 使用exports.** = **的语法进行暴露\"></a>5.4 使用<code>exports.** = **</code>的语法进行暴露</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">┣ app.js</span><br><span class=\"line\">┣ a.js</span><br></pre></td></tr></table></figure>\n<p>a.js文件中定义了m值，并且进行了暴露。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> m = <span class=\"number\">100</span>;</span><br><span class=\"line\">exports.m = m;</span><br></pre></td></tr></table></figure>\n<p>在app.js文件中：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"built_in\">require</span>(<span class=\"string\">\"./a.js\"</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a.m);</span><br></pre></td></tr></table></figure>\n<p><strong>需要注意的是两点：</strong></p>\n<p>① 建议：暴露的时候必须是<code>exports.** = **</code>， **必须一致。你别玩杂技。</p>\n<p>明明变量是m你非要用n暴露。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//错误的：</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> m = <span class=\"number\">100</span>;</span><br><span class=\"line\">exports.n = m;</span><br></pre></td></tr></table></figure>\n<p>虽然语法没有问题，但是成熟程序员不会这样玩儿。</p>\n<p>② 建议：接收的时候，文件名是什么，就用什么接收。你别玩杂技。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//正确的：</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"built_in\">require</span>(<span class=\"string\">\"./a.js\"</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a.m);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//错误的：</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> b = <span class=\"built_in\">require</span>(<span class=\"string\">\"./a.js\"</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a.m);</span><br></pre></td></tr></table></figure>\n<p>nodejs在运行的时候，接受的那个变量（a）会自动成为exports对象。</p>\n<p><code>exports.** = **</code>的写法天生有namespace（命名空间）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">┣ app.js</span><br><span class=\"line\">┣ yuan.js</span><br><span class=\"line\">┣ juxing.js</span><br></pre></td></tr></table></figure>\n<p>yuan.js和juxing.js文件里面都定义了mianji和zhouchang函数，但是引入的时候由于又命名空间，所以不乱套。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> yuan = <span class=\"built_in\">require</span>(<span class=\"string\">\"./yuan.js\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> juxing = <span class=\"built_in\">require</span>(<span class=\"string\">\"./juxing.js\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(yuan.mianji(<span class=\"number\">15</span>));</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(yuan.zhouchang(<span class=\"number\">15</span>));</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(juxing.mianji(<span class=\"number\">10</span>,<span class=\"number\">12</span>));</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(juxing.zhouchang(<span class=\"number\">10</span>,<span class=\"number\">12</span>));</span><br></pre></td></tr></table></figure>\n<p><img src=\"image40.png\" alt=\"\"></p>\n<h2 id=\"5-5-使用module-exports-暴露\"><a href=\"#5-5-使用module-exports-暴露\" class=\"headerlink\" title=\"5.5 使用module.exports = **暴露\"></a>5.5 使用<code>module.exports = **</code>暴露</h2><p>当一个js文件中仅仅希望暴露一个东西（通常是构造函数），此时我们可以使用<code>module.exports = **</code>的方法暴露。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">┣ app.js</span><br><span class=\"line\">┣ People.js</span><br></pre></td></tr></table></figure>\n<p>People.js:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">People</span>(<span class=\"params\">name,age,sex</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>.age = age;</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>.sex = sex;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">People.prototype.sayHello = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"string\">\"你好我是\"</span> + <span class=\"keyword\">this</span>.name);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = People</span><br></pre></td></tr></table></figure>\n<p>app.js:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> People = <span class=\"built_in\">require</span>(<span class=\"string\">\"./People.js\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> xiaoming = <span class=\"keyword\">new</span> People(<span class=\"string\">\"小明\"</span> , <span class=\"number\">12</span> , <span class=\"string\">\"男\"</span>);</span><br><span class=\"line\">xiaoming.sayHello();</span><br></pre></td></tr></table></figure>\n<p>如果仍然使用exports.People = People的方法暴露，此时就势必要：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> xiaoming = <span class=\"keyword\">new</span> People.People(<span class=\"string\">\"小明\"</span> , <span class=\"number\">12</span> , <span class=\"string\">\"男\"</span>);</span><br></pre></td></tr></table></figure>\n<p><strong>总结一下：</strong></p>\n<p>● 如果一个js文件中有多个东西要暴露（通常是暴露一些相关的函数比如面积、周长），此时用<code>exports.** = **</code>暴露。</p>\n<p>● 如果一个js文件中只暴露一个文件（通常是构造函数），此时用<code>module.exports = **;</code>暴露。</p>\n<h2 id=\"5-6-使用文件夹\"><a href=\"#5-6-使用文件夹\" class=\"headerlink\" title=\"5.6 使用文件夹\"></a>5.6 使用文件夹</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">┣ app.js</span><br><span class=\"line\">┣ jihe</span><br><span class=\"line\">┃ ┣ yuan.js</span><br><span class=\"line\">┃ ┣ juxing.js</span><br><span class=\"line\">┃ ┣ index.js</span><br></pre></td></tr></table></figure>\n<p>我们将yuan.js和juxing.js放入了一个叫做jihe的文件夹中，被index.js”统领”。</p>\n<p>此时我们先看jihe/index.js:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> juxing = <span class=\"built_in\">require</span>(<span class=\"string\">\"./juxing.js\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> yuan = <span class=\"built_in\">require</span>(<span class=\"string\">\"./yuan.js\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">exports.juxing = juxing;</span><br><span class=\"line\">exports.yuan = yuan;</span><br></pre></td></tr></table></figure>\n<p>这个文件很性感，接受之后什么都不调用直接暴露。这个文件的作用就是一个小中转器，是一个小统领。</p>\n<p>此时yuan.js、juxing.js的文件内容和5.4一致，不再写了。</p>\n<p>app.js</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> jihe = <span class=\"built_in\">require</span>(<span class=\"string\">\"./jihe\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(jihe.yuan.mianji(<span class=\"number\">10</span>));</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(jihe.juxing.zhouchang(<span class=\"number\">10</span>,<span class=\"number\">19</span>));</span><br></pre></td></tr></table></figure>\n<p>需要注意，当我们require()的时候，如果没有写.js后缀，此时nodejs将认为我们在引入一个文件夹，此时将会自动引入这个文件夹中的index.js文件。</p>\n<p>也就是说</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> jihe = <span class=\"built_in\">require</span>(<span class=\"string\">\"./jihe\"</span>);</span><br></pre></td></tr></table></figure>\n<p>等价于：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> jihe = <span class=\"built_in\">require</span>(<span class=\"string\">\"./jihe/index.js\"</span>)</span><br></pre></td></tr></table></figure>\n<p>注意<code>./</code>不能省！！</p>\n<h2 id=\"5-7-神奇的node-modules文件夹\"><a href=\"#5-7-神奇的node-modules文件夹\" class=\"headerlink\" title=\"5.7 神奇的node_modules文件夹\"></a>5.7 神奇的node_modules文件夹</h2><p><strong>nodejs中有一个设置，就是如果js的文件夹放入了node_modules文件夹中，此时引用它的将可以不写<code>./</code></strong>。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">┣ app.js</span><br><span class=\"line\">┣ node_modules</span><br><span class=\"line\">┃  ┣ jihe</span><br><span class=\"line\">┃  ┃  ┣ yuan.js</span><br><span class=\"line\">┃  ┃  ┣ juxing.js</span><br><span class=\"line\">┃  ┃  ┣ index.js</span><br></pre></td></tr></table></figure>\n<p>jihe文件夹中的内容和5.6小节一样的，不写了。</p>\n<p>app.js引用jihe.js文件的时候，此时require的特别漂亮！</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> jihe = <span class=\"built_in\">require</span>(<span class=\"string\">\"jihe\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(jihe.yuan.mianji(<span class=\"number\">10</span>));</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(jihe.juxing.zhouchang(<span class=\"number\">10</span>,<span class=\"number\">19</span>));</span><br></pre></td></tr></table></figure>\n<p>也就是说：</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>require的形式</th>\n<th>引用的谁</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>require(“./a.js”)</td>\n<td>同目录的a.js文件</td>\n</tr>\n<tr>\n<td>require(“./a”)</td>\n<td>a文件夹中的index.js文件</td>\n</tr>\n<tr>\n<td>require(“a”)</td>\n<td>node_modules文件夹中的a文件夹中的index.js文件</td>\n</tr>\n<tr>\n<td>require(“a.js”)</td>\n<td>node_modules文件夹中的a.js</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h2 id=\"5-8-模块的概念\"><a href=\"#5-8-模块的概念\" class=\"headerlink\" title=\"5.8 模块的概念\"></a>5.8 模块的概念</h2><p>当一个js文件可以独立完成一个事情，这个js文件就是一个模块。</p>\n<p>当一些js文件共同配合完成一个事情，这些js文件就是一个模块。</p>\n<p>模块（module，不是model模型）是一个文件的功能性的、组织性的概念，不是物理性的概念。</p>\n<p>juxing.js是一个模块，因为它可以独立完成关于矩形的所有计算。</p>\n<p>yuan.js也是一个模块，因为它可以独立完成关于圆形的所有计算。</p>\n<p>他们结合在一起，成为jihe文件夹，jihe又称一个新模块。</p>\n<h1 id=\"六、npm的世界\"><a href=\"#六、npm的世界\" class=\"headerlink\" title=\"六、npm的世界\"></a>六、npm的世界</h1><h2 id=\"6-1-npm-install命令\"><a href=\"#6-1-npm-install命令\" class=\"headerlink\" title=\"6.1 npm install命令\"></a>6.1 npm install命令</h2><p>这是一个模块的分享社区，我们可以免费的、自由的使用别人的模块。</p>\n<p>而别人的模块，很可能也在使用其他人的模块。每个人都站在巨人的肩膀上，这个世界变得更简单，轮子不需要重复的造，我们只专注于造汽车。</p>\n<p>比如有一天，老板让你实现当用户输入网址</p>\n<p><a href=\"http://127.0.0.1:3000/12321\" target=\"_blank\" rel=\"noopener\">http://127.0.0.1:3000/12321</a></p>\n<p>的时候，页面显示一二三二一。或者一万两千三百二十一元。</p>\n<p>此时你会路由的知识，但是不知道如何进行阿拉伯数字和汉语的转换。</p>\n<p>找模块！找巨人！npm就是这样的社区，npm就是node package manager的意思。</p>\n<p>node包管理器。</p>\n<p>官网：<a href=\"https://www.npmjs.com/\" target=\"_blank\" rel=\"noopener\">https://www.npmjs.com/</a></p>\n<blockquote>\n<p>npm is the package manager for JavaScript and the world’s largest software registry. Discover packages of reusable code —- and assemble them in powerful new ways.</p>\n<p>npm是JavaScript的包管理器，是世界上最大的软件托管仓库。浏览这些包，这些包都是可服用的代码。组合他们开发出你自己的新的东西！</p>\n</blockquote>\n<p>输入大写，按回车：</p>\n<p><img src=\"image41.png\" alt=\"\"></p>\n<p>我们发现了一个叫做nzh的一个包，网址：<a href=\"https://www.npmjs.com/package/nzh\" target=\"_blank\" rel=\"noopener\">https://www.npmjs.com/package/nzh</a></p>\n<p>此时我们想要下载这个叫做nzh的包，此时我们使用CMD命令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install nzh</span><br></pre></td></tr></table></figure>\n<p>npm包管理器随着nodejs安装而安装了。所以我们已经可以使用npm了。</p>\n<p>注意要使用npm的时候，必须联网。</p>\n<p>当我们输入<code>npm install nzh</code>之后，此时项目文件夹中就自动多了<code>node\\_modules</code>文件夹。</p>\n<p><img src=\"image42.png\" alt=\"\"></p>\n<p>node_modules文件夹中就有了nzh文件夹！这是一个模块！</p>\n<p><img src=\"image43.png\" alt=\"\"></p>\n<p>此时通过查看API我们可以写出app.js文件了：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> nzh = <span class=\"built_in\">require</span>(<span class=\"string\">\"nzh\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> nzhcn = nzh.cn; </span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(nzhcn.toMoney(<span class=\"number\">12321</span>))</span><br></pre></td></tr></table></figure>\n<p>也就是说别人开发的nzh这个包现在就被我们自己使用了！</p>\n<p>这里说一嘴，所有的API的路径都是</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://www.npmjs.com/package/包名字</span><br></pre></td></tr></table></figure>\n<p>老板新需求：让你把1997年5月8日变为农历。</p>\n<p><img src=\"image44.png\" alt=\"\"></p>\n<p>参考API，此时就能写出自己的程序：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> solarLunar = <span class=\"built_in\">require</span>(<span class=\"string\">\"solarlunar\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//API看来的</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = solarLunar.solar2lunar(<span class=\"number\">1997</span>, <span class=\"number\">5</span>, <span class=\"number\">8</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj.gzYear + obj.gzMonth + obj.gzDay);</span><br></pre></td></tr></table></figure>\n<p>老板新需求：将一个数组变为excel表格。</p>\n<p>此时我们下载node-xlsx这个包，此时你会发现依赖的依赖也会被同时下载。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install node-xlsx</span><br></pre></td></tr></table></figure>\n<p>结合API我们写：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> xlsx = <span class=\"built_in\">require</span>(<span class=\"string\">\"node-xlsx\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">\"fs\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//API看来的</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> data = [[<span class=\"string\">\"国家\"</span>,<span class=\"string\">\"人口\"</span>,<span class=\"string\">\"GDP\"</span>],[<span class=\"string\">\"中国\"</span>,<span class=\"number\">13</span>,<span class=\"number\">200</span>],[<span class=\"string\">\"印度\"</span>,<span class=\"number\">15</span>,<span class=\"number\">1</span>],[<span class=\"string\">\"日本\"</span>,<span class=\"number\">1</span>,<span class=\"number\">0.08</span>]];</span><br><span class=\"line\"><span class=\"keyword\">var</span> buffer = xlsx.build([&#123;<span class=\"attr\">name</span>: <span class=\"string\">\"各国数据\"</span>, <span class=\"attr\">data</span>: data&#125;]);  </span><br><span class=\"line\">fs.writeFile(<span class=\"string\">\"./老板请您简约.xlsx\"</span> , buffer);</span><br></pre></td></tr></table></figure>\n<h2 id=\"6-2-依赖\"><a href=\"#6-2-依赖\" class=\"headerlink\" title=\"6.2 依赖\"></a>6.2 依赖</h2><p>我们从npm上下载的node_modules文件夹称之为依赖。</p>\n<p>此时我们可以用package.json文件管理这些依赖，我们称为项目的”身份证”。</p>\n<p>我们在开发项目的时候，第一步就是创建一个项目的身份证。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm init</span><br></pre></td></tr></table></figure>\n<p><img src=\"image45.png\" alt=\"\"></p>\n<p>就会显示一个调查问卷。将引导你创建这个身份证。</p>\n<p><img src=\"image46.png\" alt=\"\"></p>\n<p>他会询问你包名字、版本、描述、入口文件、测试命令、git网址、关键词、作者、版权协议。</p>\n<p>你回答一下，系统会猜测一些答案就是括号中的内容，直接按回车就是使用它。</p>\n<p>系统会创建这个文件：</p>\n<p><img src=\"image47.png\" alt=\"\"></p>\n<p>内容：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"day1\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"version\"</span>: <span class=\"string\">\"0.0.1\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"description\"</span>: <span class=\"string\">\"这是考拉老师的一个案例\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"main\"</span>: <span class=\"string\">\"app.js\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"scripts\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"test\"</span>: <span class=\"string\">\"echo \\\"Error: no test specified\\\" &amp;&amp; exit 1\"</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">\"keywords\"</span>: [</span><br><span class=\"line\">    <span class=\"string\">\"考拉\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"牛逼\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"爱前端\"</span></span><br><span class=\"line\">  ],</span><br><span class=\"line\">  <span class=\"attr\">\"author\"</span>: <span class=\"string\">\"考拉\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"license\"</span>: <span class=\"string\">\"MIT\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>今后安装依赖的时候要加上--save后缀，比如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install nzh --save</span><br></pre></td></tr></table></figure>\n<p>此时加上<code>--save</code>之后，我们身份证会自动更新一个依赖项：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"day1\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"version\"</span>: <span class=\"string\">\"0.0.1\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"description\"</span>: <span class=\"string\">\"这是考拉老师的一个案例\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"main\"</span>: <span class=\"string\">\"app.js\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"scripts\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"test\"</span>: <span class=\"string\">\"echo \\\"Error: no test specified\\\" &amp;&amp; exit 1\"</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">\"keywords\"</span>: [</span><br><span class=\"line\">    <span class=\"string\">\"考拉\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"牛逼\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"爱前端\"</span></span><br><span class=\"line\">  ],</span><br><span class=\"line\">  <span class=\"attr\">\"author\"</span>: <span class=\"string\">\"考拉\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"license\"</span>: <span class=\"string\">\"MIT\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"dependencies\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"node-xlsx\"</span>: <span class=\"string\">\"^0.11.0\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"nzh\"</span>: <span class=\"string\">\"^1.0.1\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"solarlunar\"</span>: <span class=\"string\">\"^2.0.1\"</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>有了这个有什么好处呢？？</strong></p>\n<p>此时我们的项目拷贝给别人的时候、做版本管理的时候，可以完全忽略node_modules文件夹！</p>\n<p>因为我们任何使用可以使用</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install</span><br></pre></td></tr></table></figure>\n<p>来安装项目的所有依赖。</p>\n"},{"title":"【转载】最全Hexo博客搭建+主题优化+插件配置+常用操作+错误分析","mathjax":false,"typora-root-url":"hexo-tutorial","typora-copy-images-to":"hexo-tutorial","abbrlink":1353166163,"date":"2018-11-13T10:59:23.000Z","updated":"2018-11-13T10:59:29.000Z","_content":"\n\n\n### 前言\n\n> **原作者：** TDsimon\n>\n> **转载来源：** <https://www.simon96.online/2018/10/12/hexo-tutorial/>\n>\n> **版权声明：** 本博客所有文章除特别声明外，均采用 [CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/) 许可协议。转载请注明出处！\n\n\n\n### 博客搭建\n\n#### 准备环境\n\n1. [Node.js](http://nodejs.org/) 下载，并安装。详细步骤：<https://www.simon96.online/2018/11/10/hexo-env/>\n\n2. [Git](http://git-scm.com/) 下载，并安装。详细步骤：<https://www.simon96.online/2018/11/10/hexo-env/>\n\n3. 安装Hexo，在命令行（即Git Bash）运行以下命令：\n\n   > npm install -g hexo-cli\n\n4. 初始化Hexo，在命令行（即Git Bash）依次运行以下命令即可：\n\n   以下，即存放Hexo初始化文件的路径， 即站点目录。\n\n   ```\n   $ hexo init <folder>\n   $ cd <folder>\n   $ npm install\n   ```\n\n   新建完成后，在路径下，会产生这些文件和文件夹：\n\n   ```\n   .\n   ├── _config.yml\n   ├── package.json\n   ├── scaffolds\n   ├── source\n   |   ├── _drafts\n   |   └── _posts\n   └── themes\n   ```\n\n   **注**：\n\n   * hexo相关命令均在**站点目录**下，用**Git Bash**运行。\n\n   * 站点配置文件：站点目录下的`_config.yml`。\n\n      路径为`<folder>\\_config.yml`\n\n   * 主题配置文件：站点目录下的`themes`文件夹下的，主题文件夹下的`_config.yml`。\n\n      路径为`<folder>\\themes\\<主题文件夹>\\_config.yml`\n\n5. 启动服务器。在路径下，命令行（即Git Bash）输入以下命令，运行即可：\n\n   > hexo server\n\n6. 浏览器访问网址： `http://localhost:4000/`\n\n至此，您的Hexo博客已经搭建在本地。\n\n\n\n#### 实施方案\n\n##### 方案一：GithubPages\n\n1. 创建[Github](https://github.com/)账号\n\n2. 创建仓库， 仓库名为：<Github账号名称>.github.io\n\n3. 将本地Hexo博客推送到GithubPages\n\n   3.1. 安装`hexo-deployer-git`插件。在命令行（即Git Bash）运行以下命令即可：\n\n   ```\n   $ npm install hexo-deployer-git --save\n   ```\n\n   3.2. 添加SSH key。\n\n   * 创建一个 SSH key 。在命令行（即Git Bash）输入以下命令， 回车三下即可：\n\n     ```\n     $ ssh-keygen -t rsa -C \"邮箱地址\"\n     ```\n\n   * 添加到 github。 复制密钥文件内容（路径形如`C:\\Users\\Administrator\\.ssh\\id_rsa.pub`），粘贴到[New SSH Key](https://github.com/settings/keys)即可。\n\n   * 测试是否添加成功。在命令行（即Git Bash）依次输入以下命令，返回“You’ve successfully authenticated”即成功：\n\n     ```\n     $ ssh -T git@github.com\n     $ yes\n     ```\n\n   3.3. 修改`_config.yml`（在站点目录下）。文件末尾修改为：\n\n   ```\n   # Deployment\n   ## Docs: https://hexo.io/docs/deployment.html\n   deploy:\n     type: git\n     repo: git@github.com:<Github账号名称>/<Github账号名称>.github.io.git\n     branch: master\n   ```\n\n   注意：上面仓库地址写ssh地址，不写http地址。\n\n   3.4. 推送到GithubPages。在命令行（即Git Bash）依次输入以下命令， 返回`INFO Deploy done: git`即成功推送：\n\n   ```\n   $ hexo g\n   $ hexo d\n   ```\n\n4. 等待1分钟左右，浏览器访问网址： `https://<Github账号名称>.github.io`\n\n至此，您的Hexo博客已经搭建在GithubPages, 域名为`https://<Github账号名称>.github.io`。\n\n##### 方案二：GithubPages + 域名\n\n在方案一的基础上，添加自定义域名（您购买的域名）。\n\n1. 域名解析。\n\n   类型选择为 CNAME；\n\n   主机记录即域名前缀，填写为www；\n\n   记录值填写为自定义域名；\n\n   解析线路，TTL 默认即可。\n\n2. 仓库设置。\n\n   2.1. 打开博客仓库设置：`https://github.com/<Github账号名称>/<Github账号名称>.github.io/settings`\n\n   2.2. 在Custom domain下，填写自定义域名，点击`save`。\n\n   2.3. 在站点目录的`source`文件夹下，创建并打开`CNAME.txt`，写入你的域名（如`www.simon96.online`），保存，并重命名为`CNAME`。\n\n3. 等待10分钟左右。\n\n   浏览器访问自定义域名。\n\n   至此，您的Hexo博客已经解析到自定义域名，`https://<Github账号名称>.github.io`依然可用。\n\n##### 方案三：GithubPages + CodingPages + 域名\n\nGithubPages 在国内较慢，百度不收录，而CodingPages 在国外较快。所以在方案二的基础上，添加CodingPages 。\n\n1. 创建[Coding](https://coding.net/)账号\n\n2. 创建仓库， 仓库名为：<Coding账号名称>\n\n3. 进入项目里『代码』页面，点击『一键开启静态 Pages』，稍等片刻CodingPages即可部署成功。\n\n4. 将本地Hexo博客推送到CodingPages\n\n   4.1. 鉴于创建GithubPages 时，已经生成过公钥。可直接复制密钥文件内容（路径形如`C:\\Users\\Administrator\\.ssh\\id_rsa.pub`）， 粘贴到[新增公钥](https://dev.tencent.com/user/account/setting/keys)。\n\n   4.2. 测试是否添加成功。在命令行（即Git Bash）依次输入以下命令，返回“You’ve successfully authenticated”即成功：\n\n   ```\n   $ ssh -T git@git.coding.net\n   $ yes\n   ```\n\n   4.3. 修改`_config.yml`（在存放Hexo初始化文件的路径下）。文件末尾修改为：\n\n   ```\n   # Deployment\n   ## Docs: https://hexo.io/docs/deployment.html\n   deploy:\n   - type: git\n     repo: git@github.com:<Github账号名称>/<Github账号名称>.github.io.git\n     branch: master\n   - type: git\n     repo: git@git.dev.tencent.com:<Coding账号名称>/<Coding账号名称>.git\n     branch: master\n   ```\n\n   4.4. 推送到GithubPages。在命令行（即Git Bash）依次输入以下命令， 返回`INFO Deploy done: git`即成功推送：\n\n   ```\n   $ hexo g\n   $ hexo d\n   ```\n\n5. 域名解析\n\n   1. 添加 CNAME 记录指向 <Coding账号名称>.coding.me\n\n      类型选择为 CNAME；\n\n      主机记录即域名前缀，填写为www；\n\n      记录值填写为自定义域名；\n\n      解析线路，TTL 默认即可。\n\n   2. 添加 两条A 记录指向 192.30.252.153和192.30.252.154\n\n      类型选择为 A；\n\n      主机记录即域名前缀，填写为@；\n\n      记录值填写为192.30.252.153和192.30.252.154；\n\n      解析线路，境外或谷歌。\n\n   3. 在『Pages 服务』设置页（`https://dev.tencent.com/u/<Coding账号名称>/p/<Coding账号名称>/git/pages/settings`）中绑定自定义域名。\n\n至此，您的Hexo博客已经解析到自定义域名，`https://<Github账号名称>.github.io`和`https://<Coding账号名称>.coding.me`依然可用。\n\n##### 方案四：云服务器 + 域名\n\n该方案需要先购买云服务器和域名。\n\n1. 在云服务器安装Git 和 Nginx。(Git 用于版本管理和部署，Nginx 用于静态博客托管。)\n\n   登陆root用户，运行：\n\n   ```\n   $ yum -y update\n   $ yum install -y git nginx\n   ```\n\n2. Nginx配置\n\n   2.1. 创建文件目录(用于博客站点文件存放)\n\n   ```\n   cd /usr/local/\n   mkdir hexo\n   chmod 775 -R /usr/local/hexo/\n   ```\n\n   2.2. 添加 index.html(用于检测配置 Nginx 是否成功)\n\n   ```\n   vim /usr/local/hexo/index.html\n   ```\n\n   添加以下代码，并保存。\n\n   ```\n   <!DOCTYPE html>\n   <html>\n     <head>\n       <title></title>\n       <meta charset=\"UTF-8\">\n     </head>\n     <body>\n       <p>Nginx running</p>\n     </body>\n   </html>\n   ```\n\n   2.3. 配置 Nginx 服务器\n\n   ```\n   vim /etc/nginx/nginx.conf\n   ```\n\n   修改server_name和root：\n\n   ```\n   server {\n         listen       80 default_server;\n         listen       [::]:80 default_server;\n         server_name  www.baidu.com; # 填个人域名      \n         root         /usr/local/hexo/;\n     }\n   ```\n\n   2.4. 启动nginx服务；\n\n   ```\n   service nginx start\n   ```\n\n   2.5. 云服务器浏览器访问个人域名或IP，若跳转index.html，则配置完成，否则检查以上配置。\n\n3. git配置\n\n   3.1. 创建文件目录, 用于私人 Git 仓库搭建, 并更改目录读写权限。\n\n   ```\n   cd /usr/local/\n   mkdir hexoRepo\n   chmod 775 -R /usr/local/hexoRepo/\n   ```\n\n   3.2. Git 初始化裸库。\n\n   ```\n   cd hexoRepo/\n   git init --bare hexo.git\n   ```\n\n   3.3. 创建 Git 钩子(hook)。\n\n   ```\n   vim /usr/local/hexoRepo/hexo.git/hooks/post-receive\n   ```\n\n   3.4. 输入以下信息，用于指定 Git 的源代码 和 Git 配置文件。\n\n   ```\n   #!/bin/bash\n   \n   git --work-tree=/usr/local/hexo --git-dir=/usr/local/hexoRepo/hexo.git checkout -f\n   ```\n\n   3.5. 保存并退出后, 给该文件添加可执行权限。\n\n   ```\n   chmod +x /usr/local/hexoRepo/hexo.git/hooks/post-receive\n   ```\n\n4. 本地博客推送到云服务器\n\n   4.1. 安装`hexo-deployer-git`插件。在命令行（即Git Bash）运行以下命令即可：\n\n   ```\n   $ npm install hexo-deployer-git --save\n   ```\n\n   4.2. 添加SSH key。\n\n   * 创建一个 SSH key 。在命令行（即Git Bash）输入以下命令， 回车三下即可：\n\n     ```\n     $ ssh-keygen -t rsa -C \"邮箱地址\"\n     ```\n\n   * 添加到 github。 复制密钥文件内容（路径形如`C:\\Users\\Administrator\\.ssh\\id_rsa.pub`），粘贴到[New SSH Key](https://github.com/settings/keys)即可。\n\n   * 测试是否添加成功。在命令行（即Git Bash）依次输入以下命令，返回“You’ve successfully authenticated”即成功：\n\n     ```\n     $ ssh -T git@github.com\n     $ yes\n     ```\n\n   4.3. 修改`_config.yml`（在站点目录下）。文件末尾修改为：\n\n   ```\n   # Deployment\n   ## Docs: https://hexo.io/docs/deployment.html\n   deploy:\n     type: git\n     repo: root@xxx.xxx.xxx.xxx:/usr/local/hexoRepo/hexo  //用户名@域名或 IP 地址:/usr/local/hexoRepo/hexo\n     branch: master\n   ```\n\n   注意：上面仓库地址写ssh地址，不写http地址。\n\n   4.4. 推送到GithubPages。在命令行（即Git Bash）依次输入以下命令， 返回`INFO Deploy done: git`即成功推送：\n\n   ```\n   $ hexo g\n   $ hexo d\n   ```\n\n5. 等待1分钟左右，浏览器访问个人域名。\n\n   至此，您的Hexo博客已经搭建在云服务器, 域名为个人域名。\n\n\n\n### 主题优化\n\n#### 选择主题\n\nHexo默认的主题是landscape，推荐以下主题：\n\n1. [snippet](https://github.com/shenliyang/hexo-theme-snippet#hexo-theme-snippet)\n2. [Hiero](https://github.com/iTimeTraveler/hexo-theme-hiero#hiero)\n3. [JSimple](https://github.com/tangkunyin/hexo-theme-jsimple#jsimple)\n4. [BlueLake](https://github.com/chaooo/hexo-theme-BlueLake#bluelake)\n\n\n\n#### 应用主题\n\n1. 下载主题\n2. 将下载好的主题文件夹，粘贴到站点目录的`themes`下。\n3. 更改站点配置文件`_config.yml` 的theme字段，为主题文件夹的名称：\n\n```\n# Extensions\n## Plugins: https://hexo.io/plugins/\n## Themes: https://hexo.io/themes/\ntheme: <主题文件夹的名称>\n```\n\n\n\n#### 主题优化\n\n以上主题都有比较详细的说明文档，本节主要解决主题优化的常见问题。\n\n主题优化一般包括：\n\n* **设置「RSS」**\n\n* **添加「标签」页面**\n\n* **添加「分类」页面**\n\n* **设置「字体」**\n\n  问题：引用国外字体镜像较慢。\n\n  解决：可以改用国内的。将\\themes\\*\\layout_partials\\head external-fonts.swig文件中fonts.google.com改成fonts.lug.ustc.edu.cn。\n\n* **设置「代码高亮主题」**\n\n* **侧边栏社交链接**\n\n  问题：图标哪里找？\n\n  解决：[Font Awesome](https://fontawesome.com/icons?d=gallery)\n\n* **开启打赏功能**\n\n  问题：微信支付宝二维码不美观，规格不一。\n\n  解决：[在线生成二维码](https://cli.im/weixin)\n\n* **设置友情链接**\n\n* **腾讯公益404页面**\n\n* **站点建立时间**\n\n* **订阅微信公众号**\n\n* **设置「动画效果」**\n\n  问题：慢，需要等待 JavaScript 脚本完全加载完毕后才会显示内容。\n  解决：将主题配置文件`_config.yml`中，use_motion字段的值设为 `false` 来关闭动画。\n\n* **设置「背景动画」**\n\n\n\n主题优化还包括：\n\n##### 添加背景图\n\n在 themes/*/source/css/_custom/custom.styl 中添加如下代码：\n\n```\nbody{\n    background:url(/images/bg.jpg);\n    background-size:cover;\n    background-repeat:no-repeat;\n    background-attachment:fixed;\n    background-position:center;\n}\n```\n\n##### 修改Logo字体\n\n在 `themes/*/source/css/_custom/custom.styl` 中添加如下代码：\n\n```\n@font-face {\n    font-family: Zitiming;\n    src: url('/fonts/Zitiming.ttf');\n}\n.site-title {\n    font-size: 40px !important;\n\tfont-family: 'Zitiming' !important;\n}\n```\n\n其中字体文件在 `themes/next/source/fonts` 目录下，里面有个 `.gitkeep` 的隐藏文件，打开写入你要保留的字体文件，比如我的是就是写入 `Zitiming.ttf` ，具体字库自己从网上下载即可。\n\n##### 修改内容区域的宽度\n\n编辑主题的 `source/css/_variables/custom.styl` 文件，新增变量：\n\n```\n// 修改成你期望的宽度\n$content-desktop = 700px\n\n// 当视窗超过 1600px 后的宽度\n$content-desktop-large = 900px\n```\n\n##### 网站标题栏背景颜色\n\n```\n.site-meta {\n  background: $blue; //修改为自己喜欢的颜色\n}\n```\n\n##### 自定义鼠标样式\n\n打开 `themes/*/source/css/_custom/custom.styl` ,在里面写下如下代码：\n\n```\n// 鼠标样式\n  * {\n      cursor: url(\"http://om8u46rmb.bkt.clouddn.com/sword2.ico\"),auto!important\n  }\n  :active {\n      cursor: url(\"http://om8u46rmb.bkt.clouddn.com/sword1.ico\"),auto!important\n  }\n```\n\n##### 文章加密访问\n\n打开 `themes/*/layout/_partials/head.swig`文件,在 ``之前插入代码：\n\n```\n<script>\n    (function(){\n        if('{{ page.password }}'){\n            if (prompt('请输入密码') !== '{{ page.password }}'){\n                alert('密码错误');\n                history.back();\n            }\n        }\n    })();\n</script>\n```\n\n写文章时加上`password: *`：\n\n```\n---\ntitle: 2018\ndate: 2018-10-25 16:10:03\npassword: 123456\n---\n```\n\n##### 实现点击出现桃心效果\n\n1. 在`/themes/*/source/js/src`下新建文件`click.js`，接着把以下粘贴到`click.js`文件中。\n   代码如下：\n\n```\n!function(e,t,a){function n(){c(\".heart{width: 10px;height: 10px;position: fixed;background: #f00;transform: rotate(45deg);-webkit-transform: rotate(45deg);-moz-transform: rotate(45deg);}.heart:after,.heart:before{content: '';width: inherit;height: inherit;background: inherit;border-radius: 50%;-webkit-border-radius: 50%;-moz-border-radius: 50%;position: fixed;}.heart:after{top: -5px;}.heart:before{left: -5px;}\"),o(),r()}function r(){for(var e=0;e<d.length;e++)d[e].alpha<=0?(t.body.removeChild(d[e].el),d.splice(e,1)):(d[e].y--,d[e].scale+=.004,d[e].alpha-=.013,d[e].el.style.cssText=\"left:\"+d[e].x+\"px;top:\"+d[e].y+\"px;opacity:\"+d[e].alpha+\";transform:scale(\"+d[e].scale+\",\"+d[e].scale+\") rotate(45deg);background:\"+d[e].color+\";z-index:99999\");requestAnimationFrame(r)}function o(){var t=\"function\"==typeof e.onclick&&e.onclick;e.onclick=function(e){t&&t(),i(e)}}function i(e){var a=t.createElement(\"div\");a.className=\"heart\",d.push({el:a,x:e.clientX-5,y:e.clientY-5,scale:1,alpha:1,color:s()}),t.body.appendChild(a)}function c(e){var a=t.createElement(\"style\");a.type=\"text/css\";try{a.appendChild(t.createTextNode(e))}catch(t){a.styleSheet.cssText=e}t.getElementsByTagName(\"head\")[0].appendChild(a)}function s(){return\"rgb(\"+~~(255*Math.random())+\",\"+~~(255*Math.random())+\",\"+~~(255*Math.random())+\")\"}var d=[];e.requestAnimationFrame=function(){return e.requestAnimationFrame||e.webkitRequestAnimationFrame||e.mozRequestAnimationFrame||e.oRequestAnimationFrame||e.msRequestAnimationFrame||function(e){setTimeout(e,1e3/60)}}(),n()}(window,document);\n```\n\n1. 在`\\themes\\*\\layout\\_layout.swig`文件末尾添加：\n\n```\n<!-- 页面点击小红心 -->\n<script type=\"text/javascript\" src=\"/js/src/clicklove.js\"></script>\n```\n\n##### 静态资源压缩\n\n在站点目录下：\n\n```\n$ npm install gulp -g\n```\n\n安装gulp插件：\n\n```\nnpm install gulp-minify-css --save\nnpm install gulp-uglify --save\nnpm install gulp-htmlmin --save\nnpm install gulp-htmlclean --save\nnpm install gulp-imagemin --save\n```\n\n在 `Hexo` 站点下新建 `gulpfile.js`文件，文件内容如下：\n\n```\nvar gulp = require('gulp');\nvar minifycss = require('gulp-minify-css');\nvar uglify = require('gulp-uglify');\nvar htmlmin = require('gulp-htmlmin');\nvar htmlclean = require('gulp-htmlclean');\nvar imagemin = require('gulp-imagemin');\n// 压缩css文件\ngulp.task('minify-css', function() {\n  return gulp.src('./public/**/*.css')\n  .pipe(minifycss())\n  .pipe(gulp.dest('./public'));\n});\n// 压缩html文件\ngulp.task('minify-html', function() {\n  return gulp.src('./public/**/*.html')\n  .pipe(htmlclean())\n  .pipe(htmlmin({\n    removeComments: true,\n    minifyJS: true,\n    minifyCSS: true,\n    minifyURLs: true,\n  }))\n  .pipe(gulp.dest('./public'))\n});\n// 压缩js文件\ngulp.task('minify-js', function() {\n    return gulp.src(['./public/**/.js','!./public/js/**/*min.js'])\n        .pipe(uglify())\n        .pipe(gulp.dest('./public'));\n});\n// 压缩 public/demo 目录内图片\ngulp.task('minify-images', function() {\n    gulp.src('./public/demo/**/*.*')\n        .pipe(imagemin({\n           optimizationLevel: 5, //类型：Number  默认：3  取值范围：0-7（优化等级）\n           progressive: true, //类型：Boolean 默认：false 无损压缩jpg图片\n           interlaced: false, //类型：Boolean 默认：false 隔行扫描gif进行渲染\n           multipass: false, //类型：Boolean 默认：false 多次优化svg直到完全优化\n        }))\n        .pipe(gulp.dest('./public/uploads'));\n});\n// 默认任务\ngulp.task('default', [\n  'minify-html','minify-css','minify-js','minify-images'\n]);\n```\n\n只需要每次在执行 `generate` 命令后执行 `gulp` 就可以实现对静态资源的压缩，压缩完成后执行 `deploy` 命令同步到服务器：\n\n```\nhexo g\ngulp\nhexo d\n```\n\n##### 修改访问URL路径\n\n默认情况下访问URL路径为：`domain/2018/10/18/关于本站`,修改为 `domain/About/关于本站`。 编辑 `Hexo` 站点下的 `_config.yml` 文件，修改其中的 `permalink`字段：\n\n```\npermalink: :category/:title/\n```\n\n##### 博文置顶\n\n1. 安装插件\n\n   ```\n   $ npm uninstall hexo-generator-index –save\n   $ npm install hexo-generator-index-pin-top –save\n   ```\n\n   然后在需要置顶的文章的Front-matter中加上top即可：\n\n   ```\n   ---\n   title: 2018\n   date: 2018-10-25 16:10:03\n   top: 10\n   ---\n   ```\n\n2. 设置置顶标志\n\n   打开：/themes/*/layout/_macro/post.swig，定位到`<div class=\"post-meta\">`标签下，在此便签下行，插入如下代码：\n\n   ```yaml\n   {% if post.top %}\n     <i class=\"fa fa-thumb-tack\"></i>\n     <font color=7D26CD>置顶</font>\n     <span class=\"post-meta-divider\">|</span>\n   {% endif %}\n   ```\n\n   \n\n##### 在右上角或者左上角实现fork me on github\n\n1. 选择样式[GitHub Ribbons](https://blog.github.com/2008-12-19-github-ribbons/),\n2. 修改图片跳转链接,将`<a href=\"https://github.com/you\">`中的链接换为自己Github链接：\n3. 打开 `themes/next/layout/_layout.swig` 文件，把代码复制到`<div class=\"headband\"></div>`下面。\n\n##### 主页文章添加边框阴影效果\n\n打开 `themes/*/source/css/_custom/custom.styl` ,向里面加代码:\n\n```\n// 主页文章添加阴影效果\n.post {\n   margin-top: 0px;\n   margin-bottom: 60px;\n   padding: 25px;\n   -webkit-box-shadow: 0 0 5px rgba(202, 203, 203, .5);\n   -moz-box-shadow: 0 0 5px rgba(202, 203, 204, .5);\n}\n```\n\n##### 显示当前浏览进度\n\n修改`themes/*/_config.yml`，把 `false` 改为 `true`：\n\n```\n# Back to top in sidebar\nb2t: true\n\n# Scroll percent label in b2t button\nscrollpercent: true\n```\n\n##### 创建分类页\n\n在终端窗口下，定位到 `Hexo` 站点目录下，新建：\n\n```\n$ cd <站点目录>\n$ hexo new page categories\n```\n\n##### 加入 广告\n\n主要有两种：[百度SSP](https://ssp.baidu.com/static/register.html)和[谷歌Adsense](https://www.google.com/adsense/start/#/?modal_active=none)。方法类似：\n\n1. 注册，复制广告代码\n\n2. 部署到网站。\n\n   2.1. 新建 `theme/*/layout/_custom/google_ad.swig`，将 AdSense 上的代码粘贴进去\n\n   2.2. 头部。在 `theme/*/layout/_custom/head.swig` 中也粘贴一份\n\n   2.3. 每篇博客。在 `theme/*/layout/post.swig` 里中在希望看到的地方加上：\n\n   ```\n   {% include '_custom/google_ad.swig' %}\n   ```\n\n   例如：在 `<div id=\"posts\" class=\"posts-expand\"> </div>` 中间插入，总代码如下：\n\n   ```\n   {% block content %}\n     <div id=\"posts\" class=\"posts-expand\">\n       {{ post_template.render(page) }}\n       {% include '_custom/google_ad.swig' %}\n     </div>\n   {% endblock %}\n   ```\n\n3. 等待审核通过。如果失败，可再次申请。\n\n##### 添加萌萌哒\n\n1. 安装插件\n\n   ```\n   npm install --save hexo-helper-live2d\n   ```\n\n2. 复制你喜欢的模型名字：\n\n   Epsilon2.1\n\n   [![img](Epsilon2.1.gif)](https://huaji8.top/img/live2d/Epsilon2.1.gif)\n\n   Gantzert_Felixander\n\n   [![img](Gantzert_Felixander.gif)](https://huaji8.top/img/live2d/Gantzert_Felixander.gif)\n\n   haru\n\n   [![img](haru.gif)](https://huaji8.top/img/live2d/haru.gif)\n\n   miku\n\n   [![img](miku.gif)](https://huaji8.top/img/live2d/miku.gif)\n\n   ni-j\n\n   [![img](ni-j.gif)](https://huaji8.top/img/live2d/ni-j.gif)\n\n   nico\n\n   [![img](nico.gif)](https://huaji8.top/img/live2d/nico.gif)\n\n   nietzche\n\n   [![img](nietzche.gif)](https://huaji8.top/img/live2d/nietzche.gif)\n\n   nipsilon\n\n   [![img](nipsilon.gif)](https://huaji8.top/img/live2d/nipsilon.gif)\n\n   nito\n\n   [![img](nito.gif)](https://huaji8.top/img/live2d/nito.gif)\n\n   shizuku\n\n   [![img](shizuku.gif)](https://huaji8.top/img/live2d/shizuku.gif)\n\n   tsumiki\n\n   [![img](tsumiki.gif)](https://huaji8.top/img/live2d/tsumiki.gif)\n\n   wanko\n\n   [![img](wanko.gif)](https://huaji8.top/img/live2d/wanko.gif)\n\n   z16\n\n   [![img](z16.gif)](https://huaji8.top/img/live2d/z16.gif)\n\n   hibiki\n\n   [![img](hibiki.gif)](https://huaji8.top/img/live2d/hibiki.gif)\n\n   koharu\n\n   [![img](koharu.gif)](https://huaji8.top/img/live2d/koharu.gif)\n\n   haruto\n\n   [![img](haruto.gif)](https://huaji8.top/img/live2d/haruto.gif)\n\n   Unitychan\n\n   [![img](Unitychan.gif)](https://huaji8.top/img/live2d/Unitychan.gif)\n\n   tororo\n\n   [![img](tororo.gif)](https://huaji8.top/img/live2d/tororo.gif)\n\n   hijiki\n\n   [![img](hijiki.gif)](https://huaji8.top/img/live2d/hijiki.gif)\n\n3. 将以下代码添加到主题配置文件`_config.yml`，修改<你喜欢的模型名字>：\n\n   ```\n   live2d:\n     enable: true\n     scriptFrom: local\n     pluginRootPath: live2dw/\n     pluginJsPath: lib/\n     pluginModelPath: assets/\n     tagMode: false\n     log: false\n     model:\n       use: live2d-widget-model-<你喜欢的模型名字>\n     display:\n       position: right\n       width: 150\n       height: 300\n     mobile:\n       show: true\n   ```\n\n4. 建配置文件\n\n   4.1. 在站点目录下建文件夹`live2d_models`，\n\n   4.2. 再在`live2d_models`下建文件夹`<你喜欢的模型名字>`,\n\n   4.3. 再在`<你喜欢的模型名字>`下建json文件：<你喜欢的模型名字>.model.json\n\n5. 安装模型。在命令行（即Git Bash）运行以下命令即可：\n\n   > npm install –save live2d-widget-model-<你喜欢的模型名字>\n\n6. 在命令行（即Git Bash）运行以下命令， 在`http://127.0.0.1:4000/`查看测试结果:\n\n   > hexo clean && hexo g && hexo s\n\n\n\n### 插件配置\n\n以下插件（评论系统、数据统计与分析、内容分享服务、搜索服务）各选一个即可。\n\n#### 评论系统\n\n|                                             | 推荐指数 | 优点                        | 缺点               |\n| ------------------------------------------- | -------- | --------------------------- | ------------------ |\n| [Valine](https://valine.js.org/)            | 4        | 每天30000条评论，10GB的储存 | 作者评论无标识     |\n| [来必力/livere](https://livere.com/)        | 4        | 多种账号登录                | 评论无法导出       |\n| [畅言](http://changyan.kuaizhan.com/)       | 3        | 美观                        | 必须备案域名       |\n| [gitment](https://github.com/imsun/gitment) | 3        | 简洁                        | 只能登陆github评论 |\n| Disqus                                      | 1        |                             | 需要翻*墙          |\n\n##### Valine\n\n1.1. 获取APP ID 和 APP Key\n\n请先登录或注册 [LeanCloud](https://leancloud.cn/), 进入控制台后点击左下角创建应用，\n\n进入刚刚创建的应用，选择左下角的`设置`>`应用Key`，然后就能看到你的`APP ID`和`APP Key`了。\n\n1.2. 填写APP ID 和 APP Key到主题配置文件`_config.yml`\n\n1.3. 运行`hexo g&&hexo d`推送到博客。\n\n##### 来必力/livere\n\n2.1. 登陆 [来必力](https://livere.com/) 获取你的 LiveRe UID。\n\n2.2. 填写LiveRe UID到主题配置文件`_config.yml`\n\n##### 畅言\n\n3.1.获取APP ID 和 APP Key\n\n请先登录或注册 [畅言](http://changyan.kuaizhan.com/), 点击“立即免费获取畅言”，\n\n新建站点，点击管理，点击评论插件>评论管理，\n\n点击后台总览，然后就能看到你的`APP ID`和`APP Key`了。\n\n3.2. 填写APP ID 和 APP Key到主题配置文件`_config.yml`\n\n3.3. 运行`hexo g&&hexo d`推送到博客。\n\n##### gitment\n\n4.1. 安装插件：\n\n> npm i –save gitment\n\n4.2. 申请应用\n\n在[New OAuth App](https://github.com/settings/applications/new)为你的博客应用一个密钥:\n\n```\nApplication name:随便写\nHomepage URL:这个也可以随意写,就写你的博客地址就行\nApplication description:描述,也可以随意写\nAuthorization callback URL:这个必须写你的博客地址\n```\n\n4.3. 配置\n\n编辑主题配置文件`themes/*/_config.yml`:\n\n```\n# Gitment\n# Introduction: https://imsun.net/posts/gitment-introduction/\ngitment:\n  enable: true\n  mint: true # RECOMMEND, A mint on Gitment, to support count, language and proxy_gateway\n  count: true # Show comments count in post meta area\n  lazy: false # Comments lazy loading with a button\n  cleanly: false # Hide 'Powered by ...' on footer, and more\n  language: # Force language, or auto switch by theme\n  github_user: {you github user id}\n  github_repo: 公开的git仓库,评论会作为那个项目的issue\n  client_id: {刚才申请的ClientID}\n  client_secret: {刚才申请的Client Secret}\n  proxy_gateway: # Address of api proxy, See: https://github.com/aimingoo/intersect\n  redirect_protocol: # Protocol of redirect_uri with force_redirect_pro\n```\n\n##### Disqus\n\n编辑 主题配置文件`themes/*/_config.yml`， 将 disqus 下的 enable 设定为 true，同时提供您的 shortname。count 用于指定是否显示评论数量。\n\n```\ndisqus:\n  enable: false\n  shortname:\n  count: true\n```\n\n#### 数据统计与分析\n\n|                                                   | 推荐指数 | 优点                                           | 缺点   |\n| ------------------------------------------------- | -------- | ---------------------------------------------- | ------ |\n| [不蒜子](http://ibruce.info/2015/04/04/busuanzi/) | 4        | 可直接将访问次数显示在您在网页上（也可不显示） | 只计数 |\n| 百度统计                                          | 3        |                                                | 收录慢 |\n\n##### 不蒜子\n\n编辑 主题配置文件 `themes/*/_config.yml`中的`busuanzi_count`的配置项即可。\n\n* 当`enable: true`时，代表开启全局开关。\n* 若`site_uv`（本站访客数）、`site_pv`（本站访客数）、`page_pv`（本文总阅读量）的值均为`false`时，不蒜子仅作记录而不会在页面上显示。\n\n注意：\n\n```\n不蒜子官方因七牛强制过期原有的『dn-lbstatics.qbox.me』域名（预计2018年10月初），与客服沟通数次无果，即使我提出为此付费也不行，只能更换域名到『busuanzi.ibruce.info』！\n```\n\n解决办法：\n\n1. 找到主题调用不蒜子的swig文件。一般在”\\themes*\\layout_third-party\\analytics\\busuanzi-counter.swig”\n\n2. 更改域名\n\n   ```\n   把原有的：\n   <script async src=\"\u0001\u0001//dn-lbstatics.qbox.me/busuanzi/2.3/busuanzi.pure.mini.js\u0002\u0002\"></script>\n   域名改一下即可：\n   <script async src=\"\u0001\u0001//busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js\u0002\u0002\"></script>\n   ```\n\n##### 百度统计\n\n1. 登录 [百度统计](http://tongji.baidu.com/)，定位到站点的代码获取页面\n\n2. 复制统计脚本 id，如图：\n\n   [![img](analytics-baidu-id.png)](http://theme-next.iissnan.com/uploads/five-minutes-setup/analytics-baidu-id.png)\n\n3. 编辑 主题配置文件`themes/*/_config.yml`，修改字段 `google_analytics`，值设置成你的统计脚本 id。\n\n#### 内容分享服务\n\n|                                                              | 推荐指数 | 优点 | 缺点                          |\n| ------------------------------------------------------------ | -------- | ---- | ----------------------------- |\n| [百度分享](http://share.baidu.com/)                          | 4        | 稳定 | 不太美观                      |\n| [need-more-share2](https://github.com/revir/need-more-share2) | 4        | 美观 | 更新不及时（比如微信分享API） |\n\n##### 百度分享\n\n编辑 主题配置文件，添加/修改字段 `baidushare`，值为 `true`即可。\n\n```\n# 百度分享服务\nbaidushare: true\n```\n\n##### need-more-share2\n\n编辑 主题配置文件，添加/修改字段 `needmoreshare2`，值为 `true`即可。\n\n```\nneedmoreshare2:\n  enable: true\n```\n\n#### 搜索服务\n\n|              | 推荐指数 | 优点     | 缺点   |\n| ------------ | -------- | -------- | ------ |\n| Local Search | 4        | 配置方便 |        |\n| Swiftype     | 2        |          | 需注册 |\n| Algolia      | 2        |          | 需注册 |\n\n##### Local Search\n\n添加百度/谷歌/本地 自定义站点内容搜索\n\n1. 安装 `hexo-generator-searchdb`，在站点的根目录下执行以下命令：\n\n   ```\n   $ npm install hexo-generator-searchdb --save\n   ```\n\n2. 编辑 站点配置文件，新增以下内容到任意位置：\n\n   ```\n   search:\n     path: search.xml\n     field: post\n     format: html\n     limit: 10000\n   ```\n\n3. 编辑 主题配置文件，启用本地搜索功能：\n\n   ```\n   # Local search\n   local_search:\n     enable: true\n   ```\n\n### 错误分析\n\n如果你使用Hexo遇到同样的问题,这里有一些常见问题的解决方案。\n\n#### YAML Parsing Error\n\n```\nJS-YAML: incomplete explicit mapping pair; a key node is missed at line 18, column 29:\n      last_updated: Last updated: %s\n```\n\n1. 参数中包含冒号，请用加引号，如`Last updated: %s`\n\n```\nJS-YAML: bad indentation of a mapping entry at line 18, column 31:\n      last_updated：\"Last updated: %s\"\n```\n\n1. 字段后面的冒号必须为**英文冒号**，如：last_updated:\n2. 字段冒号后面必须跟一个空格，如：last_updated: “Last updated: %s”\n\n#### EMFILE Error\n\n```\nError: EMFILE, too many open files\n```\n\n生成大量的文件时，可能遇到EMFILE错误。\n\n可以运行以下命令来增加允许同步I / O操作的数量。\n\n```\n$ ulimit -n 10000\n```\n\n#### Process Out of Memory\n\n当`hexo g`时，遇到以下错误：\n\n```\nFATAL ERROR: CALL_AND_RETRY_LAST Allocation failed - process out of memory\n```\n\n如下，更改`hexo-cli`文件的第一行，来增大nodejs堆内存.该bug已在[新版本](https://github.com/hexojs/hexo/issues/1735)修复。\n\n```\n#!/usr/bin/env node --max_old_space_size=8192\n```\n\n#### Git Deployment Problems\n\n1. **RPC failed**\n\n   ```\n   error: RPC failed; result=22, HTTP code = 403\n   \n   fatal: 'username.github.io' does not appear to be a git repository\n   ```\n\n   确保你有你的电脑上设置git正确或尝试使用HTTPS存储库URL。\n\n1. **Error: ENOENT: no such file or directory**\n\n这个需要有一定的git的知识，因为可能是由于写错了标签,类别,或文件名，导致本地和github冲突了，Git不能自动合并这一变化所以它打破了自动分支。\n\n**解决办法：**\n\n1. 检查文章的标签和类别,确保本地和github上是相同的。\n2. 合并分支（Commit）。\n3. 清除，重构。在站点目录下，命令行（即Git Bash）运行`hexo clean`和`hexo g`\n4. 手动将站点目录下的`public`文件夹复制到您的桌面\n5. 从你的master分支切换到部署在本地分支。\n6. 从桌面复制`public`文件夹到本地分支。\n7. 合并分支到github（Commit）。\n8. 切回master分支。\n\n#### Server Problems\n\n```\nError: listen EADDRINUSE\n```\n\n你可能使用相同的端口，同时开启了两个Hexo服务器。如果需要同时开启，可以尝试修改端口设置：\n\n```\n$ hexo server -p 5000\n```\n\n#### Plugin Installation Problems\n\n```\nnpm ERR! node-waf configure build\n```\n\n这个错误可能发生在试图安装一个用Cc++或另一个javascript语言编写的插件。确保您已经安装了正确的编译器在您的计算机上。\n\n#### Error with DTrace (Mac OS X)\n\n```\n{ [Error: Cannot find module './build/Release/DTraceProviderBindings'] code: 'MODULE_NOT_FOUND' }\n{ [Error: Cannot find module './build/default/DTraceProviderBindings'] code: 'MODULE_NOT_FOUND' }\n{ [Error: Cannot find module './build/Debug/DTraceProviderBindings'] code: 'MODULE_NOT_FOUND' }\n```\n\nDTrace安装可能有问题，重装:\n\n```\n$ npm install hexo --no-optional\n```\n\n详见 [#1326](https://github.com/hexojs/hexo/issues/1326#issuecomment-113871796)\n\n#### Iterate Data Model on Jade or Swig\n\nHexo使用仓库的数据模型。这不是一个数组,所以你可能需要将对象转换为iterable。\n\n```\n{% for post in site.posts.toArray() %}\n{% endfor %}\n```\n\n#### Data Not Updated\n\n一些数据不能更新或新生成的文件的最后一个版本完全相同。清理缓存，再试一次：\n\n```\n$ hexo clean\n```\n\n#### No command is executed\n\n那个不能使用除`help`、`init`和`version`以外的命令行（即Git Bash）时, 有可能时站点目录下的`package.json`文件，缺少`hexo` ，如下:\n\n```\n{\n  \"hexo\": {\n    \"version\": \"3.2.2\"\n  }\n}\n```\n\n#### Escape Contents\n\nHexo使用Nunjucks渲染的页面. `{ { } }`或`{ % % }`将解析和可能会引起麻烦， 如果要在博文中出现，必须使用三引号：\n\n```\nHello {{ sensitive }}\n```\n\n```\n#### ENOSPC Error (Linux)\n\n如果运行命令`$ hexo server` 返回一个错误:\nError: watch ENOSPC …\n可以通过运行`$ npm dedupe`或者以下命令行（即Git Bash）：\n$ echo fs.inotify.max_user_watches=524288 | sudo tee -a /etc/sysctl.conf && sudo sysctl -p\n来增加测试时，你可以看见的文件数量。\n```\n\n\n\n```\n#### EMPERM Error (Windows Subsystem for Linux)\n\n如果在Windows Subsystem for Linux，运行命令`$ hexo server` 返回这个错误:\nError: watch /path/to/hexo/theme/ EMPERM\n\n因为目前在Windows Subsystem for Linux中，有些内容更改时，还不能实时更新到hexo服务器。\n所以需要重新编译，再启动服务器：\n$ hexo generate\n$ hexo server -s\n```\n\n\n\n```\n#### Template render error\n\n有时运行命令`$ hexo generate` 返回一个错误:\nFATAL Something’s wrong. Maybe you can find the solution here: http://hexo.io/docs/troubleshooting.html\nTemplate render error: (unknown path)\n\n这意味着有些认不出来单词在你的文件，并且很可能在你的新博文,或者配置文件`_config.yml`中，比如缩进错误：\n```\n\n\n\n### 常用操作\n\n#### 创建文章\n\n命令：\n\n```\n$ hexo new [layout] <title>\n```\n\n参数说明：\n\n* [layout]可以为以下三种：\n\n| 参数名 | 功能                    | 文章路径       |\n| ------ | ----------------------- | -------------- |\n| post   | 新建博文                | source/_posts  |\n| page   | 新建页面（如404，分类） | source         |\n| draft  | 草稿                    | source/_drafts |\n\n草稿可通过一下命令发布：\n\n```\n$ hexo publish [layout] <title>\n```\n\n* title注意：\n\n  不是博文标题，\n\n  是博文markdown文件的名字，\n\n  也是博文链接的后缀（如`https://www.simon96.online/2018/10/12/hexo-tutorial/`中的hexo-tutorial）\n\n#### 文章模版\n\n* 创建模版\n\n  在新建文章时，Hexo 会根据 `scaffolds` 文件夹内相对应的文件来建立文件，例如：\n\n  ```\n  $ hexo new blog “simon”\n  ```\n\n   在执行这行指令时，Hexo 会尝试在 `scaffolds` 文件夹中寻找 `blog.md`，并根据其内容建立文章。\n\n* 修改参数\n\n  以下是您可以在模版中使用的变量：\n\n| 变量   | 描述         |\n| ------ | ------------ |\n| layout | 布局         |\n| title  | 标题         |\n| date   | 文件建立日期 |\n\n#### Front-matter\n\n就是博文最上方以 `---` 分隔的那部分。\n\n默认可以使用的Front-matter：\n\n| 参数         | 描述                 | 默认值       |\n| ------------ | -------------------- | ------------ |\n| `layout`     | 布局                 |              |\n| `title`      | 标题                 |              |\n| `date`       | 建立日期             | 文件建立日期 |\n| `updated`    | 更新日期             | 文件更新日期 |\n| `comments`   | 开启文章的评论功能   | true         |\n| `tags`       | 标签（不适用于分页） |              |\n| `categories` | 分类（不适用于分页） |              |\n| `permalink`  | 覆盖文章网址         |              |\n\n------\n\n\n\n","source":"_posts/Dev/hexo/hexo-tutorial.md","raw":"---\ntitle: 【转载】最全Hexo博客搭建+主题优化+插件配置+常用操作+错误分析\nmathjax: false\ntags:\n  - hexo\ntypora-root-url: hexo-tutorial\ntypora-copy-images-to: hexo-tutorial\ncategories:\n  - hexo\nabbrlink: 1353166163\ndate: 2018-11-13 18:59:23\nupdated: 2018-11-13 18:59:29\n---\n\n\n\n### 前言\n\n> **原作者：** TDsimon\n>\n> **转载来源：** <https://www.simon96.online/2018/10/12/hexo-tutorial/>\n>\n> **版权声明：** 本博客所有文章除特别声明外，均采用 [CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/) 许可协议。转载请注明出处！\n\n\n\n### 博客搭建\n\n#### 准备环境\n\n1. [Node.js](http://nodejs.org/) 下载，并安装。详细步骤：<https://www.simon96.online/2018/11/10/hexo-env/>\n\n2. [Git](http://git-scm.com/) 下载，并安装。详细步骤：<https://www.simon96.online/2018/11/10/hexo-env/>\n\n3. 安装Hexo，在命令行（即Git Bash）运行以下命令：\n\n   > npm install -g hexo-cli\n\n4. 初始化Hexo，在命令行（即Git Bash）依次运行以下命令即可：\n\n   以下，即存放Hexo初始化文件的路径， 即站点目录。\n\n   ```\n   $ hexo init <folder>\n   $ cd <folder>\n   $ npm install\n   ```\n\n   新建完成后，在路径下，会产生这些文件和文件夹：\n\n   ```\n   .\n   ├── _config.yml\n   ├── package.json\n   ├── scaffolds\n   ├── source\n   |   ├── _drafts\n   |   └── _posts\n   └── themes\n   ```\n\n   **注**：\n\n   * hexo相关命令均在**站点目录**下，用**Git Bash**运行。\n\n   * 站点配置文件：站点目录下的`_config.yml`。\n\n      路径为`<folder>\\_config.yml`\n\n   * 主题配置文件：站点目录下的`themes`文件夹下的，主题文件夹下的`_config.yml`。\n\n      路径为`<folder>\\themes\\<主题文件夹>\\_config.yml`\n\n5. 启动服务器。在路径下，命令行（即Git Bash）输入以下命令，运行即可：\n\n   > hexo server\n\n6. 浏览器访问网址： `http://localhost:4000/`\n\n至此，您的Hexo博客已经搭建在本地。\n\n\n\n#### 实施方案\n\n##### 方案一：GithubPages\n\n1. 创建[Github](https://github.com/)账号\n\n2. 创建仓库， 仓库名为：<Github账号名称>.github.io\n\n3. 将本地Hexo博客推送到GithubPages\n\n   3.1. 安装`hexo-deployer-git`插件。在命令行（即Git Bash）运行以下命令即可：\n\n   ```\n   $ npm install hexo-deployer-git --save\n   ```\n\n   3.2. 添加SSH key。\n\n   * 创建一个 SSH key 。在命令行（即Git Bash）输入以下命令， 回车三下即可：\n\n     ```\n     $ ssh-keygen -t rsa -C \"邮箱地址\"\n     ```\n\n   * 添加到 github。 复制密钥文件内容（路径形如`C:\\Users\\Administrator\\.ssh\\id_rsa.pub`），粘贴到[New SSH Key](https://github.com/settings/keys)即可。\n\n   * 测试是否添加成功。在命令行（即Git Bash）依次输入以下命令，返回“You’ve successfully authenticated”即成功：\n\n     ```\n     $ ssh -T git@github.com\n     $ yes\n     ```\n\n   3.3. 修改`_config.yml`（在站点目录下）。文件末尾修改为：\n\n   ```\n   # Deployment\n   ## Docs: https://hexo.io/docs/deployment.html\n   deploy:\n     type: git\n     repo: git@github.com:<Github账号名称>/<Github账号名称>.github.io.git\n     branch: master\n   ```\n\n   注意：上面仓库地址写ssh地址，不写http地址。\n\n   3.4. 推送到GithubPages。在命令行（即Git Bash）依次输入以下命令， 返回`INFO Deploy done: git`即成功推送：\n\n   ```\n   $ hexo g\n   $ hexo d\n   ```\n\n4. 等待1分钟左右，浏览器访问网址： `https://<Github账号名称>.github.io`\n\n至此，您的Hexo博客已经搭建在GithubPages, 域名为`https://<Github账号名称>.github.io`。\n\n##### 方案二：GithubPages + 域名\n\n在方案一的基础上，添加自定义域名（您购买的域名）。\n\n1. 域名解析。\n\n   类型选择为 CNAME；\n\n   主机记录即域名前缀，填写为www；\n\n   记录值填写为自定义域名；\n\n   解析线路，TTL 默认即可。\n\n2. 仓库设置。\n\n   2.1. 打开博客仓库设置：`https://github.com/<Github账号名称>/<Github账号名称>.github.io/settings`\n\n   2.2. 在Custom domain下，填写自定义域名，点击`save`。\n\n   2.3. 在站点目录的`source`文件夹下，创建并打开`CNAME.txt`，写入你的域名（如`www.simon96.online`），保存，并重命名为`CNAME`。\n\n3. 等待10分钟左右。\n\n   浏览器访问自定义域名。\n\n   至此，您的Hexo博客已经解析到自定义域名，`https://<Github账号名称>.github.io`依然可用。\n\n##### 方案三：GithubPages + CodingPages + 域名\n\nGithubPages 在国内较慢，百度不收录，而CodingPages 在国外较快。所以在方案二的基础上，添加CodingPages 。\n\n1. 创建[Coding](https://coding.net/)账号\n\n2. 创建仓库， 仓库名为：<Coding账号名称>\n\n3. 进入项目里『代码』页面，点击『一键开启静态 Pages』，稍等片刻CodingPages即可部署成功。\n\n4. 将本地Hexo博客推送到CodingPages\n\n   4.1. 鉴于创建GithubPages 时，已经生成过公钥。可直接复制密钥文件内容（路径形如`C:\\Users\\Administrator\\.ssh\\id_rsa.pub`）， 粘贴到[新增公钥](https://dev.tencent.com/user/account/setting/keys)。\n\n   4.2. 测试是否添加成功。在命令行（即Git Bash）依次输入以下命令，返回“You’ve successfully authenticated”即成功：\n\n   ```\n   $ ssh -T git@git.coding.net\n   $ yes\n   ```\n\n   4.3. 修改`_config.yml`（在存放Hexo初始化文件的路径下）。文件末尾修改为：\n\n   ```\n   # Deployment\n   ## Docs: https://hexo.io/docs/deployment.html\n   deploy:\n   - type: git\n     repo: git@github.com:<Github账号名称>/<Github账号名称>.github.io.git\n     branch: master\n   - type: git\n     repo: git@git.dev.tencent.com:<Coding账号名称>/<Coding账号名称>.git\n     branch: master\n   ```\n\n   4.4. 推送到GithubPages。在命令行（即Git Bash）依次输入以下命令， 返回`INFO Deploy done: git`即成功推送：\n\n   ```\n   $ hexo g\n   $ hexo d\n   ```\n\n5. 域名解析\n\n   1. 添加 CNAME 记录指向 <Coding账号名称>.coding.me\n\n      类型选择为 CNAME；\n\n      主机记录即域名前缀，填写为www；\n\n      记录值填写为自定义域名；\n\n      解析线路，TTL 默认即可。\n\n   2. 添加 两条A 记录指向 192.30.252.153和192.30.252.154\n\n      类型选择为 A；\n\n      主机记录即域名前缀，填写为@；\n\n      记录值填写为192.30.252.153和192.30.252.154；\n\n      解析线路，境外或谷歌。\n\n   3. 在『Pages 服务』设置页（`https://dev.tencent.com/u/<Coding账号名称>/p/<Coding账号名称>/git/pages/settings`）中绑定自定义域名。\n\n至此，您的Hexo博客已经解析到自定义域名，`https://<Github账号名称>.github.io`和`https://<Coding账号名称>.coding.me`依然可用。\n\n##### 方案四：云服务器 + 域名\n\n该方案需要先购买云服务器和域名。\n\n1. 在云服务器安装Git 和 Nginx。(Git 用于版本管理和部署，Nginx 用于静态博客托管。)\n\n   登陆root用户，运行：\n\n   ```\n   $ yum -y update\n   $ yum install -y git nginx\n   ```\n\n2. Nginx配置\n\n   2.1. 创建文件目录(用于博客站点文件存放)\n\n   ```\n   cd /usr/local/\n   mkdir hexo\n   chmod 775 -R /usr/local/hexo/\n   ```\n\n   2.2. 添加 index.html(用于检测配置 Nginx 是否成功)\n\n   ```\n   vim /usr/local/hexo/index.html\n   ```\n\n   添加以下代码，并保存。\n\n   ```\n   <!DOCTYPE html>\n   <html>\n     <head>\n       <title></title>\n       <meta charset=\"UTF-8\">\n     </head>\n     <body>\n       <p>Nginx running</p>\n     </body>\n   </html>\n   ```\n\n   2.3. 配置 Nginx 服务器\n\n   ```\n   vim /etc/nginx/nginx.conf\n   ```\n\n   修改server_name和root：\n\n   ```\n   server {\n         listen       80 default_server;\n         listen       [::]:80 default_server;\n         server_name  www.baidu.com; # 填个人域名      \n         root         /usr/local/hexo/;\n     }\n   ```\n\n   2.4. 启动nginx服务；\n\n   ```\n   service nginx start\n   ```\n\n   2.5. 云服务器浏览器访问个人域名或IP，若跳转index.html，则配置完成，否则检查以上配置。\n\n3. git配置\n\n   3.1. 创建文件目录, 用于私人 Git 仓库搭建, 并更改目录读写权限。\n\n   ```\n   cd /usr/local/\n   mkdir hexoRepo\n   chmod 775 -R /usr/local/hexoRepo/\n   ```\n\n   3.2. Git 初始化裸库。\n\n   ```\n   cd hexoRepo/\n   git init --bare hexo.git\n   ```\n\n   3.3. 创建 Git 钩子(hook)。\n\n   ```\n   vim /usr/local/hexoRepo/hexo.git/hooks/post-receive\n   ```\n\n   3.4. 输入以下信息，用于指定 Git 的源代码 和 Git 配置文件。\n\n   ```\n   #!/bin/bash\n   \n   git --work-tree=/usr/local/hexo --git-dir=/usr/local/hexoRepo/hexo.git checkout -f\n   ```\n\n   3.5. 保存并退出后, 给该文件添加可执行权限。\n\n   ```\n   chmod +x /usr/local/hexoRepo/hexo.git/hooks/post-receive\n   ```\n\n4. 本地博客推送到云服务器\n\n   4.1. 安装`hexo-deployer-git`插件。在命令行（即Git Bash）运行以下命令即可：\n\n   ```\n   $ npm install hexo-deployer-git --save\n   ```\n\n   4.2. 添加SSH key。\n\n   * 创建一个 SSH key 。在命令行（即Git Bash）输入以下命令， 回车三下即可：\n\n     ```\n     $ ssh-keygen -t rsa -C \"邮箱地址\"\n     ```\n\n   * 添加到 github。 复制密钥文件内容（路径形如`C:\\Users\\Administrator\\.ssh\\id_rsa.pub`），粘贴到[New SSH Key](https://github.com/settings/keys)即可。\n\n   * 测试是否添加成功。在命令行（即Git Bash）依次输入以下命令，返回“You’ve successfully authenticated”即成功：\n\n     ```\n     $ ssh -T git@github.com\n     $ yes\n     ```\n\n   4.3. 修改`_config.yml`（在站点目录下）。文件末尾修改为：\n\n   ```\n   # Deployment\n   ## Docs: https://hexo.io/docs/deployment.html\n   deploy:\n     type: git\n     repo: root@xxx.xxx.xxx.xxx:/usr/local/hexoRepo/hexo  //用户名@域名或 IP 地址:/usr/local/hexoRepo/hexo\n     branch: master\n   ```\n\n   注意：上面仓库地址写ssh地址，不写http地址。\n\n   4.4. 推送到GithubPages。在命令行（即Git Bash）依次输入以下命令， 返回`INFO Deploy done: git`即成功推送：\n\n   ```\n   $ hexo g\n   $ hexo d\n   ```\n\n5. 等待1分钟左右，浏览器访问个人域名。\n\n   至此，您的Hexo博客已经搭建在云服务器, 域名为个人域名。\n\n\n\n### 主题优化\n\n#### 选择主题\n\nHexo默认的主题是landscape，推荐以下主题：\n\n1. [snippet](https://github.com/shenliyang/hexo-theme-snippet#hexo-theme-snippet)\n2. [Hiero](https://github.com/iTimeTraveler/hexo-theme-hiero#hiero)\n3. [JSimple](https://github.com/tangkunyin/hexo-theme-jsimple#jsimple)\n4. [BlueLake](https://github.com/chaooo/hexo-theme-BlueLake#bluelake)\n\n\n\n#### 应用主题\n\n1. 下载主题\n2. 将下载好的主题文件夹，粘贴到站点目录的`themes`下。\n3. 更改站点配置文件`_config.yml` 的theme字段，为主题文件夹的名称：\n\n```\n# Extensions\n## Plugins: https://hexo.io/plugins/\n## Themes: https://hexo.io/themes/\ntheme: <主题文件夹的名称>\n```\n\n\n\n#### 主题优化\n\n以上主题都有比较详细的说明文档，本节主要解决主题优化的常见问题。\n\n主题优化一般包括：\n\n* **设置「RSS」**\n\n* **添加「标签」页面**\n\n* **添加「分类」页面**\n\n* **设置「字体」**\n\n  问题：引用国外字体镜像较慢。\n\n  解决：可以改用国内的。将\\themes\\*\\layout_partials\\head external-fonts.swig文件中fonts.google.com改成fonts.lug.ustc.edu.cn。\n\n* **设置「代码高亮主题」**\n\n* **侧边栏社交链接**\n\n  问题：图标哪里找？\n\n  解决：[Font Awesome](https://fontawesome.com/icons?d=gallery)\n\n* **开启打赏功能**\n\n  问题：微信支付宝二维码不美观，规格不一。\n\n  解决：[在线生成二维码](https://cli.im/weixin)\n\n* **设置友情链接**\n\n* **腾讯公益404页面**\n\n* **站点建立时间**\n\n* **订阅微信公众号**\n\n* **设置「动画效果」**\n\n  问题：慢，需要等待 JavaScript 脚本完全加载完毕后才会显示内容。\n  解决：将主题配置文件`_config.yml`中，use_motion字段的值设为 `false` 来关闭动画。\n\n* **设置「背景动画」**\n\n\n\n主题优化还包括：\n\n##### 添加背景图\n\n在 themes/*/source/css/_custom/custom.styl 中添加如下代码：\n\n```\nbody{\n    background:url(/images/bg.jpg);\n    background-size:cover;\n    background-repeat:no-repeat;\n    background-attachment:fixed;\n    background-position:center;\n}\n```\n\n##### 修改Logo字体\n\n在 `themes/*/source/css/_custom/custom.styl` 中添加如下代码：\n\n```\n@font-face {\n    font-family: Zitiming;\n    src: url('/fonts/Zitiming.ttf');\n}\n.site-title {\n    font-size: 40px !important;\n\tfont-family: 'Zitiming' !important;\n}\n```\n\n其中字体文件在 `themes/next/source/fonts` 目录下，里面有个 `.gitkeep` 的隐藏文件，打开写入你要保留的字体文件，比如我的是就是写入 `Zitiming.ttf` ，具体字库自己从网上下载即可。\n\n##### 修改内容区域的宽度\n\n编辑主题的 `source/css/_variables/custom.styl` 文件，新增变量：\n\n```\n// 修改成你期望的宽度\n$content-desktop = 700px\n\n// 当视窗超过 1600px 后的宽度\n$content-desktop-large = 900px\n```\n\n##### 网站标题栏背景颜色\n\n```\n.site-meta {\n  background: $blue; //修改为自己喜欢的颜色\n}\n```\n\n##### 自定义鼠标样式\n\n打开 `themes/*/source/css/_custom/custom.styl` ,在里面写下如下代码：\n\n```\n// 鼠标样式\n  * {\n      cursor: url(\"http://om8u46rmb.bkt.clouddn.com/sword2.ico\"),auto!important\n  }\n  :active {\n      cursor: url(\"http://om8u46rmb.bkt.clouddn.com/sword1.ico\"),auto!important\n  }\n```\n\n##### 文章加密访问\n\n打开 `themes/*/layout/_partials/head.swig`文件,在 ``之前插入代码：\n\n```\n<script>\n    (function(){\n        if('{{ page.password }}'){\n            if (prompt('请输入密码') !== '{{ page.password }}'){\n                alert('密码错误');\n                history.back();\n            }\n        }\n    })();\n</script>\n```\n\n写文章时加上`password: *`：\n\n```\n---\ntitle: 2018\ndate: 2018-10-25 16:10:03\npassword: 123456\n---\n```\n\n##### 实现点击出现桃心效果\n\n1. 在`/themes/*/source/js/src`下新建文件`click.js`，接着把以下粘贴到`click.js`文件中。\n   代码如下：\n\n```\n!function(e,t,a){function n(){c(\".heart{width: 10px;height: 10px;position: fixed;background: #f00;transform: rotate(45deg);-webkit-transform: rotate(45deg);-moz-transform: rotate(45deg);}.heart:after,.heart:before{content: '';width: inherit;height: inherit;background: inherit;border-radius: 50%;-webkit-border-radius: 50%;-moz-border-radius: 50%;position: fixed;}.heart:after{top: -5px;}.heart:before{left: -5px;}\"),o(),r()}function r(){for(var e=0;e<d.length;e++)d[e].alpha<=0?(t.body.removeChild(d[e].el),d.splice(e,1)):(d[e].y--,d[e].scale+=.004,d[e].alpha-=.013,d[e].el.style.cssText=\"left:\"+d[e].x+\"px;top:\"+d[e].y+\"px;opacity:\"+d[e].alpha+\";transform:scale(\"+d[e].scale+\",\"+d[e].scale+\") rotate(45deg);background:\"+d[e].color+\";z-index:99999\");requestAnimationFrame(r)}function o(){var t=\"function\"==typeof e.onclick&&e.onclick;e.onclick=function(e){t&&t(),i(e)}}function i(e){var a=t.createElement(\"div\");a.className=\"heart\",d.push({el:a,x:e.clientX-5,y:e.clientY-5,scale:1,alpha:1,color:s()}),t.body.appendChild(a)}function c(e){var a=t.createElement(\"style\");a.type=\"text/css\";try{a.appendChild(t.createTextNode(e))}catch(t){a.styleSheet.cssText=e}t.getElementsByTagName(\"head\")[0].appendChild(a)}function s(){return\"rgb(\"+~~(255*Math.random())+\",\"+~~(255*Math.random())+\",\"+~~(255*Math.random())+\")\"}var d=[];e.requestAnimationFrame=function(){return e.requestAnimationFrame||e.webkitRequestAnimationFrame||e.mozRequestAnimationFrame||e.oRequestAnimationFrame||e.msRequestAnimationFrame||function(e){setTimeout(e,1e3/60)}}(),n()}(window,document);\n```\n\n1. 在`\\themes\\*\\layout\\_layout.swig`文件末尾添加：\n\n```\n<!-- 页面点击小红心 -->\n<script type=\"text/javascript\" src=\"/js/src/clicklove.js\"></script>\n```\n\n##### 静态资源压缩\n\n在站点目录下：\n\n```\n$ npm install gulp -g\n```\n\n安装gulp插件：\n\n```\nnpm install gulp-minify-css --save\nnpm install gulp-uglify --save\nnpm install gulp-htmlmin --save\nnpm install gulp-htmlclean --save\nnpm install gulp-imagemin --save\n```\n\n在 `Hexo` 站点下新建 `gulpfile.js`文件，文件内容如下：\n\n```\nvar gulp = require('gulp');\nvar minifycss = require('gulp-minify-css');\nvar uglify = require('gulp-uglify');\nvar htmlmin = require('gulp-htmlmin');\nvar htmlclean = require('gulp-htmlclean');\nvar imagemin = require('gulp-imagemin');\n// 压缩css文件\ngulp.task('minify-css', function() {\n  return gulp.src('./public/**/*.css')\n  .pipe(minifycss())\n  .pipe(gulp.dest('./public'));\n});\n// 压缩html文件\ngulp.task('minify-html', function() {\n  return gulp.src('./public/**/*.html')\n  .pipe(htmlclean())\n  .pipe(htmlmin({\n    removeComments: true,\n    minifyJS: true,\n    minifyCSS: true,\n    minifyURLs: true,\n  }))\n  .pipe(gulp.dest('./public'))\n});\n// 压缩js文件\ngulp.task('minify-js', function() {\n    return gulp.src(['./public/**/.js','!./public/js/**/*min.js'])\n        .pipe(uglify())\n        .pipe(gulp.dest('./public'));\n});\n// 压缩 public/demo 目录内图片\ngulp.task('minify-images', function() {\n    gulp.src('./public/demo/**/*.*')\n        .pipe(imagemin({\n           optimizationLevel: 5, //类型：Number  默认：3  取值范围：0-7（优化等级）\n           progressive: true, //类型：Boolean 默认：false 无损压缩jpg图片\n           interlaced: false, //类型：Boolean 默认：false 隔行扫描gif进行渲染\n           multipass: false, //类型：Boolean 默认：false 多次优化svg直到完全优化\n        }))\n        .pipe(gulp.dest('./public/uploads'));\n});\n// 默认任务\ngulp.task('default', [\n  'minify-html','minify-css','minify-js','minify-images'\n]);\n```\n\n只需要每次在执行 `generate` 命令后执行 `gulp` 就可以实现对静态资源的压缩，压缩完成后执行 `deploy` 命令同步到服务器：\n\n```\nhexo g\ngulp\nhexo d\n```\n\n##### 修改访问URL路径\n\n默认情况下访问URL路径为：`domain/2018/10/18/关于本站`,修改为 `domain/About/关于本站`。 编辑 `Hexo` 站点下的 `_config.yml` 文件，修改其中的 `permalink`字段：\n\n```\npermalink: :category/:title/\n```\n\n##### 博文置顶\n\n1. 安装插件\n\n   ```\n   $ npm uninstall hexo-generator-index –save\n   $ npm install hexo-generator-index-pin-top –save\n   ```\n\n   然后在需要置顶的文章的Front-matter中加上top即可：\n\n   ```\n   ---\n   title: 2018\n   date: 2018-10-25 16:10:03\n   top: 10\n   ---\n   ```\n\n2. 设置置顶标志\n\n   打开：/themes/*/layout/_macro/post.swig，定位到`<div class=\"post-meta\">`标签下，在此便签下行，插入如下代码：\n\n   ```yaml\n   {% if post.top %}\n     <i class=\"fa fa-thumb-tack\"></i>\n     <font color=7D26CD>置顶</font>\n     <span class=\"post-meta-divider\">|</span>\n   {% endif %}\n   ```\n\n   \n\n##### 在右上角或者左上角实现fork me on github\n\n1. 选择样式[GitHub Ribbons](https://blog.github.com/2008-12-19-github-ribbons/),\n2. 修改图片跳转链接,将`<a href=\"https://github.com/you\">`中的链接换为自己Github链接：\n3. 打开 `themes/next/layout/_layout.swig` 文件，把代码复制到`<div class=\"headband\"></div>`下面。\n\n##### 主页文章添加边框阴影效果\n\n打开 `themes/*/source/css/_custom/custom.styl` ,向里面加代码:\n\n```\n// 主页文章添加阴影效果\n.post {\n   margin-top: 0px;\n   margin-bottom: 60px;\n   padding: 25px;\n   -webkit-box-shadow: 0 0 5px rgba(202, 203, 203, .5);\n   -moz-box-shadow: 0 0 5px rgba(202, 203, 204, .5);\n}\n```\n\n##### 显示当前浏览进度\n\n修改`themes/*/_config.yml`，把 `false` 改为 `true`：\n\n```\n# Back to top in sidebar\nb2t: true\n\n# Scroll percent label in b2t button\nscrollpercent: true\n```\n\n##### 创建分类页\n\n在终端窗口下，定位到 `Hexo` 站点目录下，新建：\n\n```\n$ cd <站点目录>\n$ hexo new page categories\n```\n\n##### 加入 广告\n\n主要有两种：[百度SSP](https://ssp.baidu.com/static/register.html)和[谷歌Adsense](https://www.google.com/adsense/start/#/?modal_active=none)。方法类似：\n\n1. 注册，复制广告代码\n\n2. 部署到网站。\n\n   2.1. 新建 `theme/*/layout/_custom/google_ad.swig`，将 AdSense 上的代码粘贴进去\n\n   2.2. 头部。在 `theme/*/layout/_custom/head.swig` 中也粘贴一份\n\n   2.3. 每篇博客。在 `theme/*/layout/post.swig` 里中在希望看到的地方加上：\n\n   ```\n   {% include '_custom/google_ad.swig' %}\n   ```\n\n   例如：在 `<div id=\"posts\" class=\"posts-expand\"> </div>` 中间插入，总代码如下：\n\n   ```\n   {% block content %}\n     <div id=\"posts\" class=\"posts-expand\">\n       {{ post_template.render(page) }}\n       {% include '_custom/google_ad.swig' %}\n     </div>\n   {% endblock %}\n   ```\n\n3. 等待审核通过。如果失败，可再次申请。\n\n##### 添加萌萌哒\n\n1. 安装插件\n\n   ```\n   npm install --save hexo-helper-live2d\n   ```\n\n2. 复制你喜欢的模型名字：\n\n   Epsilon2.1\n\n   [![img](Epsilon2.1.gif)](https://huaji8.top/img/live2d/Epsilon2.1.gif)\n\n   Gantzert_Felixander\n\n   [![img](Gantzert_Felixander.gif)](https://huaji8.top/img/live2d/Gantzert_Felixander.gif)\n\n   haru\n\n   [![img](haru.gif)](https://huaji8.top/img/live2d/haru.gif)\n\n   miku\n\n   [![img](miku.gif)](https://huaji8.top/img/live2d/miku.gif)\n\n   ni-j\n\n   [![img](ni-j.gif)](https://huaji8.top/img/live2d/ni-j.gif)\n\n   nico\n\n   [![img](nico.gif)](https://huaji8.top/img/live2d/nico.gif)\n\n   nietzche\n\n   [![img](nietzche.gif)](https://huaji8.top/img/live2d/nietzche.gif)\n\n   nipsilon\n\n   [![img](nipsilon.gif)](https://huaji8.top/img/live2d/nipsilon.gif)\n\n   nito\n\n   [![img](nito.gif)](https://huaji8.top/img/live2d/nito.gif)\n\n   shizuku\n\n   [![img](shizuku.gif)](https://huaji8.top/img/live2d/shizuku.gif)\n\n   tsumiki\n\n   [![img](tsumiki.gif)](https://huaji8.top/img/live2d/tsumiki.gif)\n\n   wanko\n\n   [![img](wanko.gif)](https://huaji8.top/img/live2d/wanko.gif)\n\n   z16\n\n   [![img](z16.gif)](https://huaji8.top/img/live2d/z16.gif)\n\n   hibiki\n\n   [![img](hibiki.gif)](https://huaji8.top/img/live2d/hibiki.gif)\n\n   koharu\n\n   [![img](koharu.gif)](https://huaji8.top/img/live2d/koharu.gif)\n\n   haruto\n\n   [![img](haruto.gif)](https://huaji8.top/img/live2d/haruto.gif)\n\n   Unitychan\n\n   [![img](Unitychan.gif)](https://huaji8.top/img/live2d/Unitychan.gif)\n\n   tororo\n\n   [![img](tororo.gif)](https://huaji8.top/img/live2d/tororo.gif)\n\n   hijiki\n\n   [![img](hijiki.gif)](https://huaji8.top/img/live2d/hijiki.gif)\n\n3. 将以下代码添加到主题配置文件`_config.yml`，修改<你喜欢的模型名字>：\n\n   ```\n   live2d:\n     enable: true\n     scriptFrom: local\n     pluginRootPath: live2dw/\n     pluginJsPath: lib/\n     pluginModelPath: assets/\n     tagMode: false\n     log: false\n     model:\n       use: live2d-widget-model-<你喜欢的模型名字>\n     display:\n       position: right\n       width: 150\n       height: 300\n     mobile:\n       show: true\n   ```\n\n4. 建配置文件\n\n   4.1. 在站点目录下建文件夹`live2d_models`，\n\n   4.2. 再在`live2d_models`下建文件夹`<你喜欢的模型名字>`,\n\n   4.3. 再在`<你喜欢的模型名字>`下建json文件：<你喜欢的模型名字>.model.json\n\n5. 安装模型。在命令行（即Git Bash）运行以下命令即可：\n\n   > npm install –save live2d-widget-model-<你喜欢的模型名字>\n\n6. 在命令行（即Git Bash）运行以下命令， 在`http://127.0.0.1:4000/`查看测试结果:\n\n   > hexo clean && hexo g && hexo s\n\n\n\n### 插件配置\n\n以下插件（评论系统、数据统计与分析、内容分享服务、搜索服务）各选一个即可。\n\n#### 评论系统\n\n|                                             | 推荐指数 | 优点                        | 缺点               |\n| ------------------------------------------- | -------- | --------------------------- | ------------------ |\n| [Valine](https://valine.js.org/)            | 4        | 每天30000条评论，10GB的储存 | 作者评论无标识     |\n| [来必力/livere](https://livere.com/)        | 4        | 多种账号登录                | 评论无法导出       |\n| [畅言](http://changyan.kuaizhan.com/)       | 3        | 美观                        | 必须备案域名       |\n| [gitment](https://github.com/imsun/gitment) | 3        | 简洁                        | 只能登陆github评论 |\n| Disqus                                      | 1        |                             | 需要翻*墙          |\n\n##### Valine\n\n1.1. 获取APP ID 和 APP Key\n\n请先登录或注册 [LeanCloud](https://leancloud.cn/), 进入控制台后点击左下角创建应用，\n\n进入刚刚创建的应用，选择左下角的`设置`>`应用Key`，然后就能看到你的`APP ID`和`APP Key`了。\n\n1.2. 填写APP ID 和 APP Key到主题配置文件`_config.yml`\n\n1.3. 运行`hexo g&&hexo d`推送到博客。\n\n##### 来必力/livere\n\n2.1. 登陆 [来必力](https://livere.com/) 获取你的 LiveRe UID。\n\n2.2. 填写LiveRe UID到主题配置文件`_config.yml`\n\n##### 畅言\n\n3.1.获取APP ID 和 APP Key\n\n请先登录或注册 [畅言](http://changyan.kuaizhan.com/), 点击“立即免费获取畅言”，\n\n新建站点，点击管理，点击评论插件>评论管理，\n\n点击后台总览，然后就能看到你的`APP ID`和`APP Key`了。\n\n3.2. 填写APP ID 和 APP Key到主题配置文件`_config.yml`\n\n3.3. 运行`hexo g&&hexo d`推送到博客。\n\n##### gitment\n\n4.1. 安装插件：\n\n> npm i –save gitment\n\n4.2. 申请应用\n\n在[New OAuth App](https://github.com/settings/applications/new)为你的博客应用一个密钥:\n\n```\nApplication name:随便写\nHomepage URL:这个也可以随意写,就写你的博客地址就行\nApplication description:描述,也可以随意写\nAuthorization callback URL:这个必须写你的博客地址\n```\n\n4.3. 配置\n\n编辑主题配置文件`themes/*/_config.yml`:\n\n```\n# Gitment\n# Introduction: https://imsun.net/posts/gitment-introduction/\ngitment:\n  enable: true\n  mint: true # RECOMMEND, A mint on Gitment, to support count, language and proxy_gateway\n  count: true # Show comments count in post meta area\n  lazy: false # Comments lazy loading with a button\n  cleanly: false # Hide 'Powered by ...' on footer, and more\n  language: # Force language, or auto switch by theme\n  github_user: {you github user id}\n  github_repo: 公开的git仓库,评论会作为那个项目的issue\n  client_id: {刚才申请的ClientID}\n  client_secret: {刚才申请的Client Secret}\n  proxy_gateway: # Address of api proxy, See: https://github.com/aimingoo/intersect\n  redirect_protocol: # Protocol of redirect_uri with force_redirect_pro\n```\n\n##### Disqus\n\n编辑 主题配置文件`themes/*/_config.yml`， 将 disqus 下的 enable 设定为 true，同时提供您的 shortname。count 用于指定是否显示评论数量。\n\n```\ndisqus:\n  enable: false\n  shortname:\n  count: true\n```\n\n#### 数据统计与分析\n\n|                                                   | 推荐指数 | 优点                                           | 缺点   |\n| ------------------------------------------------- | -------- | ---------------------------------------------- | ------ |\n| [不蒜子](http://ibruce.info/2015/04/04/busuanzi/) | 4        | 可直接将访问次数显示在您在网页上（也可不显示） | 只计数 |\n| 百度统计                                          | 3        |                                                | 收录慢 |\n\n##### 不蒜子\n\n编辑 主题配置文件 `themes/*/_config.yml`中的`busuanzi_count`的配置项即可。\n\n* 当`enable: true`时，代表开启全局开关。\n* 若`site_uv`（本站访客数）、`site_pv`（本站访客数）、`page_pv`（本文总阅读量）的值均为`false`时，不蒜子仅作记录而不会在页面上显示。\n\n注意：\n\n```\n不蒜子官方因七牛强制过期原有的『dn-lbstatics.qbox.me』域名（预计2018年10月初），与客服沟通数次无果，即使我提出为此付费也不行，只能更换域名到『busuanzi.ibruce.info』！\n```\n\n解决办法：\n\n1. 找到主题调用不蒜子的swig文件。一般在”\\themes*\\layout_third-party\\analytics\\busuanzi-counter.swig”\n\n2. 更改域名\n\n   ```\n   把原有的：\n   <script async src=\"\u0001\u0001//dn-lbstatics.qbox.me/busuanzi/2.3/busuanzi.pure.mini.js\u0002\u0002\"></script>\n   域名改一下即可：\n   <script async src=\"\u0001\u0001//busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js\u0002\u0002\"></script>\n   ```\n\n##### 百度统计\n\n1. 登录 [百度统计](http://tongji.baidu.com/)，定位到站点的代码获取页面\n\n2. 复制统计脚本 id，如图：\n\n   [![img](analytics-baidu-id.png)](http://theme-next.iissnan.com/uploads/five-minutes-setup/analytics-baidu-id.png)\n\n3. 编辑 主题配置文件`themes/*/_config.yml`，修改字段 `google_analytics`，值设置成你的统计脚本 id。\n\n#### 内容分享服务\n\n|                                                              | 推荐指数 | 优点 | 缺点                          |\n| ------------------------------------------------------------ | -------- | ---- | ----------------------------- |\n| [百度分享](http://share.baidu.com/)                          | 4        | 稳定 | 不太美观                      |\n| [need-more-share2](https://github.com/revir/need-more-share2) | 4        | 美观 | 更新不及时（比如微信分享API） |\n\n##### 百度分享\n\n编辑 主题配置文件，添加/修改字段 `baidushare`，值为 `true`即可。\n\n```\n# 百度分享服务\nbaidushare: true\n```\n\n##### need-more-share2\n\n编辑 主题配置文件，添加/修改字段 `needmoreshare2`，值为 `true`即可。\n\n```\nneedmoreshare2:\n  enable: true\n```\n\n#### 搜索服务\n\n|              | 推荐指数 | 优点     | 缺点   |\n| ------------ | -------- | -------- | ------ |\n| Local Search | 4        | 配置方便 |        |\n| Swiftype     | 2        |          | 需注册 |\n| Algolia      | 2        |          | 需注册 |\n\n##### Local Search\n\n添加百度/谷歌/本地 自定义站点内容搜索\n\n1. 安装 `hexo-generator-searchdb`，在站点的根目录下执行以下命令：\n\n   ```\n   $ npm install hexo-generator-searchdb --save\n   ```\n\n2. 编辑 站点配置文件，新增以下内容到任意位置：\n\n   ```\n   search:\n     path: search.xml\n     field: post\n     format: html\n     limit: 10000\n   ```\n\n3. 编辑 主题配置文件，启用本地搜索功能：\n\n   ```\n   # Local search\n   local_search:\n     enable: true\n   ```\n\n### 错误分析\n\n如果你使用Hexo遇到同样的问题,这里有一些常见问题的解决方案。\n\n#### YAML Parsing Error\n\n```\nJS-YAML: incomplete explicit mapping pair; a key node is missed at line 18, column 29:\n      last_updated: Last updated: %s\n```\n\n1. 参数中包含冒号，请用加引号，如`Last updated: %s`\n\n```\nJS-YAML: bad indentation of a mapping entry at line 18, column 31:\n      last_updated：\"Last updated: %s\"\n```\n\n1. 字段后面的冒号必须为**英文冒号**，如：last_updated:\n2. 字段冒号后面必须跟一个空格，如：last_updated: “Last updated: %s”\n\n#### EMFILE Error\n\n```\nError: EMFILE, too many open files\n```\n\n生成大量的文件时，可能遇到EMFILE错误。\n\n可以运行以下命令来增加允许同步I / O操作的数量。\n\n```\n$ ulimit -n 10000\n```\n\n#### Process Out of Memory\n\n当`hexo g`时，遇到以下错误：\n\n```\nFATAL ERROR: CALL_AND_RETRY_LAST Allocation failed - process out of memory\n```\n\n如下，更改`hexo-cli`文件的第一行，来增大nodejs堆内存.该bug已在[新版本](https://github.com/hexojs/hexo/issues/1735)修复。\n\n```\n#!/usr/bin/env node --max_old_space_size=8192\n```\n\n#### Git Deployment Problems\n\n1. **RPC failed**\n\n   ```\n   error: RPC failed; result=22, HTTP code = 403\n   \n   fatal: 'username.github.io' does not appear to be a git repository\n   ```\n\n   确保你有你的电脑上设置git正确或尝试使用HTTPS存储库URL。\n\n1. **Error: ENOENT: no such file or directory**\n\n这个需要有一定的git的知识，因为可能是由于写错了标签,类别,或文件名，导致本地和github冲突了，Git不能自动合并这一变化所以它打破了自动分支。\n\n**解决办法：**\n\n1. 检查文章的标签和类别,确保本地和github上是相同的。\n2. 合并分支（Commit）。\n3. 清除，重构。在站点目录下，命令行（即Git Bash）运行`hexo clean`和`hexo g`\n4. 手动将站点目录下的`public`文件夹复制到您的桌面\n5. 从你的master分支切换到部署在本地分支。\n6. 从桌面复制`public`文件夹到本地分支。\n7. 合并分支到github（Commit）。\n8. 切回master分支。\n\n#### Server Problems\n\n```\nError: listen EADDRINUSE\n```\n\n你可能使用相同的端口，同时开启了两个Hexo服务器。如果需要同时开启，可以尝试修改端口设置：\n\n```\n$ hexo server -p 5000\n```\n\n#### Plugin Installation Problems\n\n```\nnpm ERR! node-waf configure build\n```\n\n这个错误可能发生在试图安装一个用Cc++或另一个javascript语言编写的插件。确保您已经安装了正确的编译器在您的计算机上。\n\n#### Error with DTrace (Mac OS X)\n\n```\n{ [Error: Cannot find module './build/Release/DTraceProviderBindings'] code: 'MODULE_NOT_FOUND' }\n{ [Error: Cannot find module './build/default/DTraceProviderBindings'] code: 'MODULE_NOT_FOUND' }\n{ [Error: Cannot find module './build/Debug/DTraceProviderBindings'] code: 'MODULE_NOT_FOUND' }\n```\n\nDTrace安装可能有问题，重装:\n\n```\n$ npm install hexo --no-optional\n```\n\n详见 [#1326](https://github.com/hexojs/hexo/issues/1326#issuecomment-113871796)\n\n#### Iterate Data Model on Jade or Swig\n\nHexo使用仓库的数据模型。这不是一个数组,所以你可能需要将对象转换为iterable。\n\n```\n{% for post in site.posts.toArray() %}\n{% endfor %}\n```\n\n#### Data Not Updated\n\n一些数据不能更新或新生成的文件的最后一个版本完全相同。清理缓存，再试一次：\n\n```\n$ hexo clean\n```\n\n#### No command is executed\n\n那个不能使用除`help`、`init`和`version`以外的命令行（即Git Bash）时, 有可能时站点目录下的`package.json`文件，缺少`hexo` ，如下:\n\n```\n{\n  \"hexo\": {\n    \"version\": \"3.2.2\"\n  }\n}\n```\n\n#### Escape Contents\n\nHexo使用Nunjucks渲染的页面. `{ { } }`或`{ % % }`将解析和可能会引起麻烦， 如果要在博文中出现，必须使用三引号：\n\n```\nHello {{ sensitive }}\n```\n\n```\n#### ENOSPC Error (Linux)\n\n如果运行命令`$ hexo server` 返回一个错误:\nError: watch ENOSPC …\n可以通过运行`$ npm dedupe`或者以下命令行（即Git Bash）：\n$ echo fs.inotify.max_user_watches=524288 | sudo tee -a /etc/sysctl.conf && sudo sysctl -p\n来增加测试时，你可以看见的文件数量。\n```\n\n\n\n```\n#### EMPERM Error (Windows Subsystem for Linux)\n\n如果在Windows Subsystem for Linux，运行命令`$ hexo server` 返回这个错误:\nError: watch /path/to/hexo/theme/ EMPERM\n\n因为目前在Windows Subsystem for Linux中，有些内容更改时，还不能实时更新到hexo服务器。\n所以需要重新编译，再启动服务器：\n$ hexo generate\n$ hexo server -s\n```\n\n\n\n```\n#### Template render error\n\n有时运行命令`$ hexo generate` 返回一个错误:\nFATAL Something’s wrong. Maybe you can find the solution here: http://hexo.io/docs/troubleshooting.html\nTemplate render error: (unknown path)\n\n这意味着有些认不出来单词在你的文件，并且很可能在你的新博文,或者配置文件`_config.yml`中，比如缩进错误：\n```\n\n\n\n### 常用操作\n\n#### 创建文章\n\n命令：\n\n```\n$ hexo new [layout] <title>\n```\n\n参数说明：\n\n* [layout]可以为以下三种：\n\n| 参数名 | 功能                    | 文章路径       |\n| ------ | ----------------------- | -------------- |\n| post   | 新建博文                | source/_posts  |\n| page   | 新建页面（如404，分类） | source         |\n| draft  | 草稿                    | source/_drafts |\n\n草稿可通过一下命令发布：\n\n```\n$ hexo publish [layout] <title>\n```\n\n* title注意：\n\n  不是博文标题，\n\n  是博文markdown文件的名字，\n\n  也是博文链接的后缀（如`https://www.simon96.online/2018/10/12/hexo-tutorial/`中的hexo-tutorial）\n\n#### 文章模版\n\n* 创建模版\n\n  在新建文章时，Hexo 会根据 `scaffolds` 文件夹内相对应的文件来建立文件，例如：\n\n  ```\n  $ hexo new blog “simon”\n  ```\n\n   在执行这行指令时，Hexo 会尝试在 `scaffolds` 文件夹中寻找 `blog.md`，并根据其内容建立文章。\n\n* 修改参数\n\n  以下是您可以在模版中使用的变量：\n\n| 变量   | 描述         |\n| ------ | ------------ |\n| layout | 布局         |\n| title  | 标题         |\n| date   | 文件建立日期 |\n\n#### Front-matter\n\n就是博文最上方以 `---` 分隔的那部分。\n\n默认可以使用的Front-matter：\n\n| 参数         | 描述                 | 默认值       |\n| ------------ | -------------------- | ------------ |\n| `layout`     | 布局                 |              |\n| `title`      | 标题                 |              |\n| `date`       | 建立日期             | 文件建立日期 |\n| `updated`    | 更新日期             | 文件更新日期 |\n| `comments`   | 开启文章的评论功能   | true         |\n| `tags`       | 标签（不适用于分页） |              |\n| `categories` | 分类（不适用于分页） |              |\n| `permalink`  | 覆盖文章网址         |              |\n\n------\n\n\n\n","slug":"Dev/hexo/hexo-tutorial","published":1,"_id":"cjoncnbs900102gfi9b03xa8z","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><blockquote>\n<p><strong>原作者：</strong> TDsimon</p>\n<p><strong>转载来源：</strong> <a href=\"https://www.simon96.online/2018/10/12/hexo-tutorial/\" target=\"_blank\" rel=\"noopener\">https://www.simon96.online/2018/10/12/hexo-tutorial/</a></p>\n<p><strong>版权声明：</strong> 本博客所有文章除特别声明外，均采用 <a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/\" target=\"_blank\" rel=\"noopener\">CC BY-NC-SA 4.0</a> 许可协议。转载请注明出处！</p>\n</blockquote>\n<h3 id=\"博客搭建\"><a href=\"#博客搭建\" class=\"headerlink\" title=\"博客搭建\"></a>博客搭建</h3><h4 id=\"准备环境\"><a href=\"#准备环境\" class=\"headerlink\" title=\"准备环境\"></a>准备环境</h4><ol>\n<li><p><a href=\"http://nodejs.org/\" target=\"_blank\" rel=\"noopener\">Node.js</a> 下载，并安装。详细步骤：<a href=\"https://www.simon96.online/2018/11/10/hexo-env/\" target=\"_blank\" rel=\"noopener\">https://www.simon96.online/2018/11/10/hexo-env/</a></p>\n</li>\n<li><p><a href=\"http://git-scm.com/\" target=\"_blank\" rel=\"noopener\">Git</a> 下载，并安装。详细步骤：<a href=\"https://www.simon96.online/2018/11/10/hexo-env/\" target=\"_blank\" rel=\"noopener\">https://www.simon96.online/2018/11/10/hexo-env/</a></p>\n</li>\n<li><p>安装Hexo，在命令行（即Git Bash）运行以下命令：</p>\n<blockquote>\n<p>npm install -g hexo-cli</p>\n</blockquote>\n</li>\n<li><p>初始化Hexo，在命令行（即Git Bash）依次运行以下命令即可：</p>\n<p>以下，即存放Hexo初始化文件的路径， 即站点目录。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo init &lt;folder&gt;</span><br><span class=\"line\">$ cd &lt;folder&gt;</span><br><span class=\"line\">$ npm install</span><br></pre></td></tr></table></figure>\n<p>新建完成后，在路径下，会产生这些文件和文件夹：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.</span><br><span class=\"line\">├── _config.yml</span><br><span class=\"line\">├── package.json</span><br><span class=\"line\">├── scaffolds</span><br><span class=\"line\">├── source</span><br><span class=\"line\">|   ├── _drafts</span><br><span class=\"line\">|   └── _posts</span><br><span class=\"line\">└── themes</span><br></pre></td></tr></table></figure>\n<p><strong>注</strong>：</p>\n<ul>\n<li><p>hexo相关命令均在<strong>站点目录</strong>下，用<strong>Git Bash</strong>运行。</p>\n</li>\n<li><p>站点配置文件：站点目录下的<code>_config.yml</code>。</p>\n<p> 路径为<code>&lt;folder&gt;\\_config.yml</code></p>\n</li>\n<li><p>主题配置文件：站点目录下的<code>themes</code>文件夹下的，主题文件夹下的<code>_config.yml</code>。</p>\n<p> 路径为<code>&lt;folder&gt;\\themes\\&lt;主题文件夹&gt;\\_config.yml</code></p>\n</li>\n</ul>\n</li>\n<li><p>启动服务器。在路径下，命令行（即Git Bash）输入以下命令，运行即可：</p>\n<blockquote>\n<p>hexo server</p>\n</blockquote>\n</li>\n<li><p>浏览器访问网址： <code>http://localhost:4000/</code></p>\n</li>\n</ol>\n<p>至此，您的Hexo博客已经搭建在本地。</p>\n<h4 id=\"实施方案\"><a href=\"#实施方案\" class=\"headerlink\" title=\"实施方案\"></a>实施方案</h4><h5 id=\"方案一：GithubPages\"><a href=\"#方案一：GithubPages\" class=\"headerlink\" title=\"方案一：GithubPages\"></a>方案一：GithubPages</h5><ol>\n<li><p>创建<a href=\"https://github.com/\" target=\"_blank\" rel=\"noopener\">Github</a>账号</p>\n</li>\n<li><p>创建仓库， 仓库名为：<github账号名称>.github.io</github账号名称></p>\n</li>\n<li><p>将本地Hexo博客推送到GithubPages</p>\n<p>3.1. 安装<code>hexo-deployer-git</code>插件。在命令行（即Git Bash）运行以下命令即可：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>\n<p>3.2. 添加SSH key。</p>\n<ul>\n<li><p>创建一个 SSH key 。在命令行（即Git Bash）输入以下命令， 回车三下即可：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ssh-keygen -t rsa -C &quot;邮箱地址&quot;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>添加到 github。 复制密钥文件内容（路径形如<code>C:\\Users\\Administrator\\.ssh\\id_rsa.pub</code>），粘贴到<a href=\"https://github.com/settings/keys\" target=\"_blank\" rel=\"noopener\">New SSH Key</a>即可。</p>\n</li>\n<li><p>测试是否添加成功。在命令行（即Git Bash）依次输入以下命令，返回“You’ve successfully authenticated”即成功：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ssh -T git@github.com</span><br><span class=\"line\">$ yes</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>3.3. 修改<code>_config.yml</code>（在站点目录下）。文件末尾修改为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Deployment</span><br><span class=\"line\">## Docs: https://hexo.io/docs/deployment.html</span><br><span class=\"line\">deploy:</span><br><span class=\"line\">  type: git</span><br><span class=\"line\">  repo: git@github.com:&lt;Github账号名称&gt;/&lt;Github账号名称&gt;.github.io.git</span><br><span class=\"line\">  branch: master</span><br></pre></td></tr></table></figure>\n<p>注意：上面仓库地址写ssh地址，不写http地址。</p>\n<p>3.4. 推送到GithubPages。在命令行（即Git Bash）依次输入以下命令， 返回<code>INFO Deploy done: git</code>即成功推送：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo g</span><br><span class=\"line\">$ hexo d</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>等待1分钟左右，浏览器访问网址： <code>https://&lt;Github账号名称&gt;.github.io</code></p>\n</li>\n</ol>\n<p>至此，您的Hexo博客已经搭建在GithubPages, 域名为<code>https://&lt;Github账号名称&gt;.github.io</code>。</p>\n<h5 id=\"方案二：GithubPages-域名\"><a href=\"#方案二：GithubPages-域名\" class=\"headerlink\" title=\"方案二：GithubPages + 域名\"></a>方案二：GithubPages + 域名</h5><p>在方案一的基础上，添加自定义域名（您购买的域名）。</p>\n<ol>\n<li><p>域名解析。</p>\n<p>类型选择为 CNAME；</p>\n<p>主机记录即域名前缀，填写为www；</p>\n<p>记录值填写为自定义域名；</p>\n<p>解析线路，TTL 默认即可。</p>\n</li>\n<li><p>仓库设置。</p>\n<p>2.1. 打开博客仓库设置：<code>https://github.com/&lt;Github账号名称&gt;/&lt;Github账号名称&gt;.github.io/settings</code></p>\n<p>2.2. 在Custom domain下，填写自定义域名，点击<code>save</code>。</p>\n<p>2.3. 在站点目录的<code>source</code>文件夹下，创建并打开<code>CNAME.txt</code>，写入你的域名（如<code>www.simon96.online</code>），保存，并重命名为<code>CNAME</code>。</p>\n</li>\n<li><p>等待10分钟左右。</p>\n<p>浏览器访问自定义域名。</p>\n<p>至此，您的Hexo博客已经解析到自定义域名，<code>https://&lt;Github账号名称&gt;.github.io</code>依然可用。</p>\n</li>\n</ol>\n<h5 id=\"方案三：GithubPages-CodingPages-域名\"><a href=\"#方案三：GithubPages-CodingPages-域名\" class=\"headerlink\" title=\"方案三：GithubPages + CodingPages + 域名\"></a>方案三：GithubPages + CodingPages + 域名</h5><p>GithubPages 在国内较慢，百度不收录，而CodingPages 在国外较快。所以在方案二的基础上，添加CodingPages 。</p>\n<ol>\n<li><p>创建<a href=\"https://coding.net/\" target=\"_blank\" rel=\"noopener\">Coding</a>账号</p>\n</li>\n<li><p>创建仓库， 仓库名为：<coding账号名称></coding账号名称></p>\n</li>\n<li><p>进入项目里『代码』页面，点击『一键开启静态 Pages』，稍等片刻CodingPages即可部署成功。</p>\n</li>\n<li><p>将本地Hexo博客推送到CodingPages</p>\n<p>4.1. 鉴于创建GithubPages 时，已经生成过公钥。可直接复制密钥文件内容（路径形如<code>C:\\Users\\Administrator\\.ssh\\id_rsa.pub</code>）， 粘贴到<a href=\"https://dev.tencent.com/user/account/setting/keys\" target=\"_blank\" rel=\"noopener\">新增公钥</a>。</p>\n<p>4.2. 测试是否添加成功。在命令行（即Git Bash）依次输入以下命令，返回“You’ve successfully authenticated”即成功：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ssh -T git@git.coding.net</span><br><span class=\"line\">$ yes</span><br></pre></td></tr></table></figure>\n<p>4.3. 修改<code>_config.yml</code>（在存放Hexo初始化文件的路径下）。文件末尾修改为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Deployment</span><br><span class=\"line\">## Docs: https://hexo.io/docs/deployment.html</span><br><span class=\"line\">deploy:</span><br><span class=\"line\">- type: git</span><br><span class=\"line\">  repo: git@github.com:&lt;Github账号名称&gt;/&lt;Github账号名称&gt;.github.io.git</span><br><span class=\"line\">  branch: master</span><br><span class=\"line\">- type: git</span><br><span class=\"line\">  repo: git@git.dev.tencent.com:&lt;Coding账号名称&gt;/&lt;Coding账号名称&gt;.git</span><br><span class=\"line\">  branch: master</span><br></pre></td></tr></table></figure>\n<p>4.4. 推送到GithubPages。在命令行（即Git Bash）依次输入以下命令， 返回<code>INFO Deploy done: git</code>即成功推送：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo g</span><br><span class=\"line\">$ hexo d</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>域名解析</p>\n<ol>\n<li><p>添加 CNAME 记录指向 <coding账号名称>.coding.me</coding账号名称></p>\n<p>类型选择为 CNAME；</p>\n<p>主机记录即域名前缀，填写为www；</p>\n<p>记录值填写为自定义域名；</p>\n<p>解析线路，TTL 默认即可。</p>\n</li>\n<li><p>添加 两条A 记录指向 192.30.252.153和192.30.252.154</p>\n<p>类型选择为 A；</p>\n<p>主机记录即域名前缀，填写为@；</p>\n<p>记录值填写为192.30.252.153和192.30.252.154；</p>\n<p>解析线路，境外或谷歌。</p>\n</li>\n<li><p>在『Pages 服务』设置页（<code>https://dev.tencent.com/u/&lt;Coding账号名称&gt;/p/&lt;Coding账号名称&gt;/git/pages/settings</code>）中绑定自定义域名。</p>\n</li>\n</ol>\n</li>\n</ol>\n<p>至此，您的Hexo博客已经解析到自定义域名，<code>https://&lt;Github账号名称&gt;.github.io</code>和<code>https://&lt;Coding账号名称&gt;.coding.me</code>依然可用。</p>\n<h5 id=\"方案四：云服务器-域名\"><a href=\"#方案四：云服务器-域名\" class=\"headerlink\" title=\"方案四：云服务器 + 域名\"></a>方案四：云服务器 + 域名</h5><p>该方案需要先购买云服务器和域名。</p>\n<ol>\n<li><p>在云服务器安装Git 和 Nginx。(Git 用于版本管理和部署，Nginx 用于静态博客托管。)</p>\n<p>登陆root用户，运行：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ yum -y update</span><br><span class=\"line\">$ yum install -y git nginx</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Nginx配置</p>\n<p>2.1. 创建文件目录(用于博客站点文件存放)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /usr/local/</span><br><span class=\"line\">mkdir hexo</span><br><span class=\"line\">chmod 775 -R /usr/local/hexo/</span><br></pre></td></tr></table></figure>\n<p>2.2. 添加 index.html(用于检测配置 Nginx 是否成功)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /usr/local/hexo/index.html</span><br></pre></td></tr></table></figure>\n<p>添加以下代码，并保存。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">  &lt;head&gt;</span><br><span class=\"line\">    &lt;title&gt;&lt;/title&gt;</span><br><span class=\"line\">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class=\"line\">  &lt;/head&gt;</span><br><span class=\"line\">  &lt;body&gt;</span><br><span class=\"line\">    &lt;p&gt;Nginx running&lt;/p&gt;</span><br><span class=\"line\">  &lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n<p>2.3. 配置 Nginx 服务器</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /etc/nginx/nginx.conf</span><br></pre></td></tr></table></figure>\n<p>修改server_name和root：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">      listen       80 default_server;</span><br><span class=\"line\">      listen       [::]:80 default_server;</span><br><span class=\"line\">      server_name  www.baidu.com; # 填个人域名      </span><br><span class=\"line\">      root         /usr/local/hexo/;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<p>2.4. 启动nginx服务；</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">service nginx start</span><br></pre></td></tr></table></figure>\n<p>2.5. 云服务器浏览器访问个人域名或IP，若跳转index.html，则配置完成，否则检查以上配置。</p>\n</li>\n<li><p>git配置</p>\n<p>3.1. 创建文件目录, 用于私人 Git 仓库搭建, 并更改目录读写权限。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /usr/local/</span><br><span class=\"line\">mkdir hexoRepo</span><br><span class=\"line\">chmod 775 -R /usr/local/hexoRepo/</span><br></pre></td></tr></table></figure>\n<p>3.2. Git 初始化裸库。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd hexoRepo/</span><br><span class=\"line\">git init --bare hexo.git</span><br></pre></td></tr></table></figure>\n<p>3.3. 创建 Git 钩子(hook)。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /usr/local/hexoRepo/hexo.git/hooks/post-receive</span><br></pre></td></tr></table></figure>\n<p>3.4. 输入以下信息，用于指定 Git 的源代码 和 Git 配置文件。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/bin/bash</span><br><span class=\"line\"></span><br><span class=\"line\">git --work-tree=/usr/local/hexo --git-dir=/usr/local/hexoRepo/hexo.git checkout -f</span><br></pre></td></tr></table></figure>\n<p>3.5. 保存并退出后, 给该文件添加可执行权限。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chmod +x /usr/local/hexoRepo/hexo.git/hooks/post-receive</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>本地博客推送到云服务器</p>\n<p>4.1. 安装<code>hexo-deployer-git</code>插件。在命令行（即Git Bash）运行以下命令即可：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>\n<p>4.2. 添加SSH key。</p>\n<ul>\n<li><p>创建一个 SSH key 。在命令行（即Git Bash）输入以下命令， 回车三下即可：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ssh-keygen -t rsa -C &quot;邮箱地址&quot;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>添加到 github。 复制密钥文件内容（路径形如<code>C:\\Users\\Administrator\\.ssh\\id_rsa.pub</code>），粘贴到<a href=\"https://github.com/settings/keys\" target=\"_blank\" rel=\"noopener\">New SSH Key</a>即可。</p>\n</li>\n<li><p>测试是否添加成功。在命令行（即Git Bash）依次输入以下命令，返回“You’ve successfully authenticated”即成功：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ssh -T git@github.com</span><br><span class=\"line\">$ yes</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>4.3. 修改<code>_config.yml</code>（在站点目录下）。文件末尾修改为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Deployment</span><br><span class=\"line\">## Docs: https://hexo.io/docs/deployment.html</span><br><span class=\"line\">deploy:</span><br><span class=\"line\">  type: git</span><br><span class=\"line\">  repo: root@xxx.xxx.xxx.xxx:/usr/local/hexoRepo/hexo  //用户名@域名或 IP 地址:/usr/local/hexoRepo/hexo</span><br><span class=\"line\">  branch: master</span><br></pre></td></tr></table></figure>\n<p>注意：上面仓库地址写ssh地址，不写http地址。</p>\n<p>4.4. 推送到GithubPages。在命令行（即Git Bash）依次输入以下命令， 返回<code>INFO Deploy done: git</code>即成功推送：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo g</span><br><span class=\"line\">$ hexo d</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>等待1分钟左右，浏览器访问个人域名。</p>\n<p>至此，您的Hexo博客已经搭建在云服务器, 域名为个人域名。</p>\n</li>\n</ol>\n<h3 id=\"主题优化\"><a href=\"#主题优化\" class=\"headerlink\" title=\"主题优化\"></a>主题优化</h3><h4 id=\"选择主题\"><a href=\"#选择主题\" class=\"headerlink\" title=\"选择主题\"></a>选择主题</h4><p>Hexo默认的主题是landscape，推荐以下主题：</p>\n<ol>\n<li><a href=\"https://github.com/shenliyang/hexo-theme-snippet#hexo-theme-snippet\" target=\"_blank\" rel=\"noopener\">snippet</a></li>\n<li><a href=\"https://github.com/iTimeTraveler/hexo-theme-hiero#hiero\" target=\"_blank\" rel=\"noopener\">Hiero</a></li>\n<li><a href=\"https://github.com/tangkunyin/hexo-theme-jsimple#jsimple\" target=\"_blank\" rel=\"noopener\">JSimple</a></li>\n<li><a href=\"https://github.com/chaooo/hexo-theme-BlueLake#bluelake\" target=\"_blank\" rel=\"noopener\">BlueLake</a></li>\n</ol>\n<h4 id=\"应用主题\"><a href=\"#应用主题\" class=\"headerlink\" title=\"应用主题\"></a>应用主题</h4><ol>\n<li>下载主题</li>\n<li>将下载好的主题文件夹，粘贴到站点目录的<code>themes</code>下。</li>\n<li>更改站点配置文件<code>_config.yml</code> 的theme字段，为主题文件夹的名称：</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Extensions</span><br><span class=\"line\">## Plugins: https://hexo.io/plugins/</span><br><span class=\"line\">## Themes: https://hexo.io/themes/</span><br><span class=\"line\">theme: &lt;主题文件夹的名称&gt;</span><br></pre></td></tr></table></figure>\n<h4 id=\"主题优化-1\"><a href=\"#主题优化-1\" class=\"headerlink\" title=\"主题优化\"></a>主题优化</h4><p>以上主题都有比较详细的说明文档，本节主要解决主题优化的常见问题。</p>\n<p>主题优化一般包括：</p>\n<ul>\n<li><p><strong>设置「RSS」</strong></p>\n</li>\n<li><p><strong>添加「标签」页面</strong></p>\n</li>\n<li><p><strong>添加「分类」页面</strong></p>\n</li>\n<li><p><strong>设置「字体」</strong></p>\n<p>问题：引用国外字体镜像较慢。</p>\n<p>解决：可以改用国内的。将\\themes*\\layout_partials\\head external-fonts.swig文件中fonts.google.com改成fonts.lug.ustc.edu.cn。</p>\n</li>\n<li><p><strong>设置「代码高亮主题」</strong></p>\n</li>\n<li><p><strong>侧边栏社交链接</strong></p>\n<p>问题：图标哪里找？</p>\n<p>解决：<a href=\"https://fontawesome.com/icons?d=gallery\" target=\"_blank\" rel=\"noopener\">Font Awesome</a></p>\n</li>\n<li><p><strong>开启打赏功能</strong></p>\n<p>问题：微信支付宝二维码不美观，规格不一。</p>\n<p>解决：<a href=\"https://cli.im/weixin\" target=\"_blank\" rel=\"noopener\">在线生成二维码</a></p>\n</li>\n<li><p><strong>设置友情链接</strong></p>\n</li>\n<li><p><strong>腾讯公益404页面</strong></p>\n</li>\n<li><p><strong>站点建立时间</strong></p>\n</li>\n<li><p><strong>订阅微信公众号</strong></p>\n</li>\n<li><p><strong>设置「动画效果」</strong></p>\n<p>问题：慢，需要等待 JavaScript 脚本完全加载完毕后才会显示内容。<br>解决：将主题配置文件<code>_config.yml</code>中，use_motion字段的值设为 <code>false</code> 来关闭动画。</p>\n</li>\n<li><p><strong>设置「背景动画」</strong></p>\n</li>\n</ul>\n<p>主题优化还包括：</p>\n<h5 id=\"添加背景图\"><a href=\"#添加背景图\" class=\"headerlink\" title=\"添加背景图\"></a>添加背景图</h5><p>在 themes/*/source/css/_custom/custom.styl 中添加如下代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">body&#123;</span><br><span class=\"line\">    background:url(/images/bg.jpg);</span><br><span class=\"line\">    background-size:cover;</span><br><span class=\"line\">    background-repeat:no-repeat;</span><br><span class=\"line\">    background-attachment:fixed;</span><br><span class=\"line\">    background-position:center;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"修改Logo字体\"><a href=\"#修改Logo字体\" class=\"headerlink\" title=\"修改Logo字体\"></a>修改Logo字体</h5><p>在 <code>themes/*/source/css/_custom/custom.styl</code> 中添加如下代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@font-face &#123;</span><br><span class=\"line\">    font-family: Zitiming;</span><br><span class=\"line\">    src: url(&apos;/fonts/Zitiming.ttf&apos;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.site-title &#123;</span><br><span class=\"line\">    font-size: 40px !important;</span><br><span class=\"line\">\tfont-family: &apos;Zitiming&apos; !important;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>其中字体文件在 <code>themes/next/source/fonts</code> 目录下，里面有个 <code>.gitkeep</code> 的隐藏文件，打开写入你要保留的字体文件，比如我的是就是写入 <code>Zitiming.ttf</code> ，具体字库自己从网上下载即可。</p>\n<h5 id=\"修改内容区域的宽度\"><a href=\"#修改内容区域的宽度\" class=\"headerlink\" title=\"修改内容区域的宽度\"></a>修改内容区域的宽度</h5><p>编辑主题的 <code>source/css/_variables/custom.styl</code> 文件，新增变量：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 修改成你期望的宽度</span><br><span class=\"line\">$content-desktop = 700px</span><br><span class=\"line\"></span><br><span class=\"line\">// 当视窗超过 1600px 后的宽度</span><br><span class=\"line\">$content-desktop-large = 900px</span><br></pre></td></tr></table></figure>\n<h5 id=\"网站标题栏背景颜色\"><a href=\"#网站标题栏背景颜色\" class=\"headerlink\" title=\"网站标题栏背景颜色\"></a>网站标题栏背景颜色</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.site-meta &#123;</span><br><span class=\"line\">  background: $blue; //修改为自己喜欢的颜色</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"自定义鼠标样式\"><a href=\"#自定义鼠标样式\" class=\"headerlink\" title=\"自定义鼠标样式\"></a>自定义鼠标样式</h5><p>打开 <code>themes/*/source/css/_custom/custom.styl</code> ,在里面写下如下代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 鼠标样式</span><br><span class=\"line\">  * &#123;</span><br><span class=\"line\">      cursor: url(&quot;http://om8u46rmb.bkt.clouddn.com/sword2.ico&quot;),auto!important</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  :active &#123;</span><br><span class=\"line\">      cursor: url(&quot;http://om8u46rmb.bkt.clouddn.com/sword1.ico&quot;),auto!important</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"文章加密访问\"><a href=\"#文章加密访问\" class=\"headerlink\" title=\"文章加密访问\"></a>文章加密访问</h5><p>打开 <code>themes/*/layout/_partials/head.swig</code>文件,在 ``之前插入代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">    (function()&#123;</span><br><span class=\"line\">        if(&apos;&#123;&#123; page.password &#125;&#125;&apos;)&#123;</span><br><span class=\"line\">            if (prompt(&apos;请输入密码&apos;) !== &apos;&#123;&#123; page.password &#125;&#125;&apos;)&#123;</span><br><span class=\"line\">                alert(&apos;密码错误&apos;);</span><br><span class=\"line\">                history.back();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)();</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<p>写文章时加上<code>password: *</code>：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title: 2018</span><br><span class=\"line\">date: 2018-10-25 16:10:03</span><br><span class=\"line\">password: 123456</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure>\n<h5 id=\"实现点击出现桃心效果\"><a href=\"#实现点击出现桃心效果\" class=\"headerlink\" title=\"实现点击出现桃心效果\"></a>实现点击出现桃心效果</h5><ol>\n<li>在<code>/themes/*/source/js/src</code>下新建文件<code>click.js</code>，接着把以下粘贴到<code>click.js</code>文件中。<br>代码如下：</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">!function(e,t,a)&#123;function n()&#123;c(&quot;.heart&#123;width: 10px;height: 10px;position: fixed;background: #f00;transform: rotate(45deg);-webkit-transform: rotate(45deg);-moz-transform: rotate(45deg);&#125;.heart:after,.heart:before&#123;content: &apos;&apos;;width: inherit;height: inherit;background: inherit;border-radius: 50%;-webkit-border-radius: 50%;-moz-border-radius: 50%;position: fixed;&#125;.heart:after&#123;top: -5px;&#125;.heart:before&#123;left: -5px;&#125;&quot;),o(),r()&#125;function r()&#123;for(var e=0;e&lt;d.length;e++)d[e].alpha&lt;=0?(t.body.removeChild(d[e].el),d.splice(e,1)):(d[e].y--,d[e].scale+=.004,d[e].alpha-=.013,d[e].el.style.cssText=&quot;left:&quot;+d[e].x+&quot;px;top:&quot;+d[e].y+&quot;px;opacity:&quot;+d[e].alpha+&quot;;transform:scale(&quot;+d[e].scale+&quot;,&quot;+d[e].scale+&quot;) rotate(45deg);background:&quot;+d[e].color+&quot;;z-index:99999&quot;);requestAnimationFrame(r)&#125;function o()&#123;var t=&quot;function&quot;==typeof e.onclick&amp;&amp;e.onclick;e.onclick=function(e)&#123;t&amp;&amp;t(),i(e)&#125;&#125;function i(e)&#123;var a=t.createElement(&quot;div&quot;);a.className=&quot;heart&quot;,d.push(&#123;el:a,x:e.clientX-5,y:e.clientY-5,scale:1,alpha:1,color:s()&#125;),t.body.appendChild(a)&#125;function c(e)&#123;var a=t.createElement(&quot;style&quot;);a.type=&quot;text/css&quot;;try&#123;a.appendChild(t.createTextNode(e))&#125;catch(t)&#123;a.styleSheet.cssText=e&#125;t.getElementsByTagName(&quot;head&quot;)[0].appendChild(a)&#125;function s()&#123;return&quot;rgb(&quot;+~~(255*Math.random())+&quot;,&quot;+~~(255*Math.random())+&quot;,&quot;+~~(255*Math.random())+&quot;)&quot;&#125;var d=[];e.requestAnimationFrame=function()&#123;return e.requestAnimationFrame||e.webkitRequestAnimationFrame||e.mozRequestAnimationFrame||e.oRequestAnimationFrame||e.msRequestAnimationFrame||function(e)&#123;setTimeout(e,1e3/60)&#125;&#125;(),n()&#125;(window,document);</span><br></pre></td></tr></table></figure>\n<ol>\n<li>在<code>\\themes\\*\\layout\\_layout.swig</code>文件末尾添加：</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- 页面点击小红心 --&gt;</span><br><span class=\"line\">&lt;script type=&quot;text/javascript&quot; src=&quot;/js/src/clicklove.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<h5 id=\"静态资源压缩\"><a href=\"#静态资源压缩\" class=\"headerlink\" title=\"静态资源压缩\"></a>静态资源压缩</h5><p>在站点目录下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install gulp -g</span><br></pre></td></tr></table></figure>\n<p>安装gulp插件：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install gulp-minify-css --save</span><br><span class=\"line\">npm install gulp-uglify --save</span><br><span class=\"line\">npm install gulp-htmlmin --save</span><br><span class=\"line\">npm install gulp-htmlclean --save</span><br><span class=\"line\">npm install gulp-imagemin --save</span><br></pre></td></tr></table></figure>\n<p>在 <code>Hexo</code> 站点下新建 <code>gulpfile.js</code>文件，文件内容如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var gulp = require(&apos;gulp&apos;);</span><br><span class=\"line\">var minifycss = require(&apos;gulp-minify-css&apos;);</span><br><span class=\"line\">var uglify = require(&apos;gulp-uglify&apos;);</span><br><span class=\"line\">var htmlmin = require(&apos;gulp-htmlmin&apos;);</span><br><span class=\"line\">var htmlclean = require(&apos;gulp-htmlclean&apos;);</span><br><span class=\"line\">var imagemin = require(&apos;gulp-imagemin&apos;);</span><br><span class=\"line\">// 压缩css文件</span><br><span class=\"line\">gulp.task(&apos;minify-css&apos;, function() &#123;</span><br><span class=\"line\">  return gulp.src(&apos;./public/**/*.css&apos;)</span><br><span class=\"line\">  .pipe(minifycss())</span><br><span class=\"line\">  .pipe(gulp.dest(&apos;./public&apos;));</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">// 压缩html文件</span><br><span class=\"line\">gulp.task(&apos;minify-html&apos;, function() &#123;</span><br><span class=\"line\">  return gulp.src(&apos;./public/**/*.html&apos;)</span><br><span class=\"line\">  .pipe(htmlclean())</span><br><span class=\"line\">  .pipe(htmlmin(&#123;</span><br><span class=\"line\">    removeComments: true,</span><br><span class=\"line\">    minifyJS: true,</span><br><span class=\"line\">    minifyCSS: true,</span><br><span class=\"line\">    minifyURLs: true,</span><br><span class=\"line\">  &#125;))</span><br><span class=\"line\">  .pipe(gulp.dest(&apos;./public&apos;))</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">// 压缩js文件</span><br><span class=\"line\">gulp.task(&apos;minify-js&apos;, function() &#123;</span><br><span class=\"line\">    return gulp.src([&apos;./public/**/.js&apos;,&apos;!./public/js/**/*min.js&apos;])</span><br><span class=\"line\">        .pipe(uglify())</span><br><span class=\"line\">        .pipe(gulp.dest(&apos;./public&apos;));</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">// 压缩 public/demo 目录内图片</span><br><span class=\"line\">gulp.task(&apos;minify-images&apos;, function() &#123;</span><br><span class=\"line\">    gulp.src(&apos;./public/demo/**/*.*&apos;)</span><br><span class=\"line\">        .pipe(imagemin(&#123;</span><br><span class=\"line\">           optimizationLevel: 5, //类型：Number  默认：3  取值范围：0-7（优化等级）</span><br><span class=\"line\">           progressive: true, //类型：Boolean 默认：false 无损压缩jpg图片</span><br><span class=\"line\">           interlaced: false, //类型：Boolean 默认：false 隔行扫描gif进行渲染</span><br><span class=\"line\">           multipass: false, //类型：Boolean 默认：false 多次优化svg直到完全优化</span><br><span class=\"line\">        &#125;))</span><br><span class=\"line\">        .pipe(gulp.dest(&apos;./public/uploads&apos;));</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">// 默认任务</span><br><span class=\"line\">gulp.task(&apos;default&apos;, [</span><br><span class=\"line\">  &apos;minify-html&apos;,&apos;minify-css&apos;,&apos;minify-js&apos;,&apos;minify-images&apos;</span><br><span class=\"line\">]);</span><br></pre></td></tr></table></figure>\n<p>只需要每次在执行 <code>generate</code> 命令后执行 <code>gulp</code> 就可以实现对静态资源的压缩，压缩完成后执行 <code>deploy</code> 命令同步到服务器：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo g</span><br><span class=\"line\">gulp</span><br><span class=\"line\">hexo d</span><br></pre></td></tr></table></figure>\n<h5 id=\"修改访问URL路径\"><a href=\"#修改访问URL路径\" class=\"headerlink\" title=\"修改访问URL路径\"></a>修改访问URL路径</h5><p>默认情况下访问URL路径为：<code>domain/2018/10/18/关于本站</code>,修改为 <code>domain/About/关于本站</code>。 编辑 <code>Hexo</code> 站点下的 <code>_config.yml</code> 文件，修改其中的 <code>permalink</code>字段：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">permalink: :category/:title/</span><br></pre></td></tr></table></figure>\n<h5 id=\"博文置顶\"><a href=\"#博文置顶\" class=\"headerlink\" title=\"博文置顶\"></a>博文置顶</h5><ol>\n<li><p>安装插件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm uninstall hexo-generator-index –save</span><br><span class=\"line\">$ npm install hexo-generator-index-pin-top –save</span><br></pre></td></tr></table></figure>\n<p>然后在需要置顶的文章的Front-matter中加上top即可：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title: 2018</span><br><span class=\"line\">date: 2018-10-25 16:10:03</span><br><span class=\"line\">top: 10</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>设置置顶标志</p>\n<p>打开：/themes/*/layout/_macro/post.swig，定位到<code>&lt;div class=&quot;post-meta&quot;&gt;</code>标签下，在此便签下行，插入如下代码：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&#123;%</span> <span class=\"string\">if</span> <span class=\"string\">post.top</span> <span class=\"string\">%&#125;</span></span><br><span class=\"line\">  <span class=\"string\">&lt;i</span> <span class=\"string\">class=\"fa</span> <span class=\"string\">fa-thumb-tack\"&gt;&lt;/i&gt;</span></span><br><span class=\"line\">  <span class=\"string\">&lt;font</span> <span class=\"string\">color=7D26CD&gt;置顶&lt;/font&gt;</span></span><br><span class=\"line\">  <span class=\"string\">&lt;span</span> <span class=\"string\">class=\"post-meta-divider\"&gt;|&lt;/span&gt;</span></span><br><span class=\"line\"><span class=\"string\">&#123;%</span> <span class=\"string\">endif</span> <span class=\"string\">%&#125;</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h5 id=\"在右上角或者左上角实现fork-me-on-github\"><a href=\"#在右上角或者左上角实现fork-me-on-github\" class=\"headerlink\" title=\"在右上角或者左上角实现fork me on github\"></a>在右上角或者左上角实现fork me on github</h5><ol>\n<li>选择样式<a href=\"https://blog.github.com/2008-12-19-github-ribbons/\" target=\"_blank\" rel=\"noopener\">GitHub Ribbons</a>,</li>\n<li>修改图片跳转链接,将<code>&lt;a href=&quot;https://github.com/you&quot;&gt;</code>中的链接换为自己Github链接：</li>\n<li>打开 <code>themes/next/layout/_layout.swig</code> 文件，把代码复制到<code>&lt;div class=&quot;headband&quot;&gt;&lt;/div&gt;</code>下面。</li>\n</ol>\n<h5 id=\"主页文章添加边框阴影效果\"><a href=\"#主页文章添加边框阴影效果\" class=\"headerlink\" title=\"主页文章添加边框阴影效果\"></a>主页文章添加边框阴影效果</h5><p>打开 <code>themes/*/source/css/_custom/custom.styl</code> ,向里面加代码:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 主页文章添加阴影效果</span><br><span class=\"line\">.post &#123;</span><br><span class=\"line\">   margin-top: 0px;</span><br><span class=\"line\">   margin-bottom: 60px;</span><br><span class=\"line\">   padding: 25px;</span><br><span class=\"line\">   -webkit-box-shadow: 0 0 5px rgba(202, 203, 203, .5);</span><br><span class=\"line\">   -moz-box-shadow: 0 0 5px rgba(202, 203, 204, .5);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"显示当前浏览进度\"><a href=\"#显示当前浏览进度\" class=\"headerlink\" title=\"显示当前浏览进度\"></a>显示当前浏览进度</h5><p>修改<code>themes/*/_config.yml</code>，把 <code>false</code> 改为 <code>true</code>：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Back to top in sidebar</span><br><span class=\"line\">b2t: true</span><br><span class=\"line\"></span><br><span class=\"line\"># Scroll percent label in b2t button</span><br><span class=\"line\">scrollpercent: true</span><br></pre></td></tr></table></figure>\n<h5 id=\"创建分类页\"><a href=\"#创建分类页\" class=\"headerlink\" title=\"创建分类页\"></a>创建分类页</h5><p>在终端窗口下，定位到 <code>Hexo</code> 站点目录下，新建：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cd &lt;站点目录&gt;</span><br><span class=\"line\">$ hexo new page categories</span><br></pre></td></tr></table></figure>\n<h5 id=\"加入-广告\"><a href=\"#加入-广告\" class=\"headerlink\" title=\"加入 广告\"></a>加入 广告</h5><p>主要有两种：<a href=\"https://ssp.baidu.com/static/register.html\" target=\"_blank\" rel=\"noopener\">百度SSP</a>和<a href=\"https://www.google.com/adsense/start/#/?modal_active=none\" target=\"_blank\" rel=\"noopener\">谷歌Adsense</a>。方法类似：</p>\n<ol>\n<li><p>注册，复制广告代码</p>\n</li>\n<li><p>部署到网站。</p>\n<p>2.1. 新建 <code>theme/*/layout/_custom/google_ad.swig</code>，将 AdSense 上的代码粘贴进去</p>\n<p>2.2. 头部。在 <code>theme/*/layout/_custom/head.swig</code> 中也粘贴一份</p>\n<p>2.3. 每篇博客。在 <code>theme/*/layout/post.swig</code> 里中在希望看到的地方加上：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% include &apos;_custom/google_ad.swig&apos; %&#125;</span><br></pre></td></tr></table></figure>\n<p>例如：在 <code>&lt;div id=&quot;posts&quot; class=&quot;posts-expand&quot;&gt; &lt;/div&gt;</code> 中间插入，总代码如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% block content %&#125;</span><br><span class=\"line\">  &lt;div id=&quot;posts&quot; class=&quot;posts-expand&quot;&gt;</span><br><span class=\"line\">    &#123;&#123; post_template.render(page) &#125;&#125;</span><br><span class=\"line\">    &#123;% include &apos;_custom/google_ad.swig&apos; %&#125;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>等待审核通过。如果失败，可再次申请。</p>\n</li>\n</ol>\n<h5 id=\"添加萌萌哒\"><a href=\"#添加萌萌哒\" class=\"headerlink\" title=\"添加萌萌哒\"></a>添加萌萌哒</h5><ol>\n<li><p>安装插件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --save hexo-helper-live2d</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>复制你喜欢的模型名字：</p>\n<p>Epsilon2.1</p>\n<p><a href=\"https://huaji8.top/img/live2d/Epsilon2.1.gif\" target=\"_blank\" rel=\"noopener\"><img src=\"Epsilon2.1.gif\" alt=\"img\"></a></p>\n<p>Gantzert_Felixander</p>\n<p><a href=\"https://huaji8.top/img/live2d/Gantzert_Felixander.gif\" target=\"_blank\" rel=\"noopener\"><img src=\"Gantzert_Felixander.gif\" alt=\"img\"></a></p>\n<p>haru</p>\n<p><a href=\"https://huaji8.top/img/live2d/haru.gif\" target=\"_blank\" rel=\"noopener\"><img src=\"haru.gif\" alt=\"img\"></a></p>\n<p>miku</p>\n<p><a href=\"https://huaji8.top/img/live2d/miku.gif\" target=\"_blank\" rel=\"noopener\"><img src=\"miku.gif\" alt=\"img\"></a></p>\n<p>ni-j</p>\n<p><a href=\"https://huaji8.top/img/live2d/ni-j.gif\" target=\"_blank\" rel=\"noopener\"><img src=\"ni-j.gif\" alt=\"img\"></a></p>\n<p>nico</p>\n<p><a href=\"https://huaji8.top/img/live2d/nico.gif\" target=\"_blank\" rel=\"noopener\"><img src=\"nico.gif\" alt=\"img\"></a></p>\n<p>nietzche</p>\n<p><a href=\"https://huaji8.top/img/live2d/nietzche.gif\" target=\"_blank\" rel=\"noopener\"><img src=\"nietzche.gif\" alt=\"img\"></a></p>\n<p>nipsilon</p>\n<p><a href=\"https://huaji8.top/img/live2d/nipsilon.gif\" target=\"_blank\" rel=\"noopener\"><img src=\"nipsilon.gif\" alt=\"img\"></a></p>\n<p>nito</p>\n<p><a href=\"https://huaji8.top/img/live2d/nito.gif\" target=\"_blank\" rel=\"noopener\"><img src=\"nito.gif\" alt=\"img\"></a></p>\n<p>shizuku</p>\n<p><a href=\"https://huaji8.top/img/live2d/shizuku.gif\" target=\"_blank\" rel=\"noopener\"><img src=\"shizuku.gif\" alt=\"img\"></a></p>\n<p>tsumiki</p>\n<p><a href=\"https://huaji8.top/img/live2d/tsumiki.gif\" target=\"_blank\" rel=\"noopener\"><img src=\"tsumiki.gif\" alt=\"img\"></a></p>\n<p>wanko</p>\n<p><a href=\"https://huaji8.top/img/live2d/wanko.gif\" target=\"_blank\" rel=\"noopener\"><img src=\"wanko.gif\" alt=\"img\"></a></p>\n<p>z16</p>\n<p><a href=\"https://huaji8.top/img/live2d/z16.gif\" target=\"_blank\" rel=\"noopener\"><img src=\"z16.gif\" alt=\"img\"></a></p>\n<p>hibiki</p>\n<p><a href=\"https://huaji8.top/img/live2d/hibiki.gif\" target=\"_blank\" rel=\"noopener\"><img src=\"hibiki.gif\" alt=\"img\"></a></p>\n<p>koharu</p>\n<p><a href=\"https://huaji8.top/img/live2d/koharu.gif\" target=\"_blank\" rel=\"noopener\"><img src=\"koharu.gif\" alt=\"img\"></a></p>\n<p>haruto</p>\n<p><a href=\"https://huaji8.top/img/live2d/haruto.gif\" target=\"_blank\" rel=\"noopener\"><img src=\"haruto.gif\" alt=\"img\"></a></p>\n<p>Unitychan</p>\n<p><a href=\"https://huaji8.top/img/live2d/Unitychan.gif\" target=\"_blank\" rel=\"noopener\"><img src=\"Unitychan.gif\" alt=\"img\"></a></p>\n<p>tororo</p>\n<p><a href=\"https://huaji8.top/img/live2d/tororo.gif\" target=\"_blank\" rel=\"noopener\"><img src=\"tororo.gif\" alt=\"img\"></a></p>\n<p>hijiki</p>\n<p><a href=\"https://huaji8.top/img/live2d/hijiki.gif\" target=\"_blank\" rel=\"noopener\"><img src=\"hijiki.gif\" alt=\"img\"></a></p>\n</li>\n<li><p>将以下代码添加到主题配置文件<code>_config.yml</code>，修改&lt;你喜欢的模型名字&gt;：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">live2d:</span><br><span class=\"line\">  enable: true</span><br><span class=\"line\">  scriptFrom: local</span><br><span class=\"line\">  pluginRootPath: live2dw/</span><br><span class=\"line\">  pluginJsPath: lib/</span><br><span class=\"line\">  pluginModelPath: assets/</span><br><span class=\"line\">  tagMode: false</span><br><span class=\"line\">  log: false</span><br><span class=\"line\">  model:</span><br><span class=\"line\">    use: live2d-widget-model-&lt;你喜欢的模型名字&gt;</span><br><span class=\"line\">  display:</span><br><span class=\"line\">    position: right</span><br><span class=\"line\">    width: 150</span><br><span class=\"line\">    height: 300</span><br><span class=\"line\">  mobile:</span><br><span class=\"line\">    show: true</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>建配置文件</p>\n<p>4.1. 在站点目录下建文件夹<code>live2d_models</code>，</p>\n<p>4.2. 再在<code>live2d_models</code>下建文件夹<code>&lt;你喜欢的模型名字&gt;</code>,</p>\n<p>4.3. 再在<code>&lt;你喜欢的模型名字&gt;</code>下建json文件：&lt;你喜欢的模型名字&gt;.model.json</p>\n</li>\n<li><p>安装模型。在命令行（即Git Bash）运行以下命令即可：</p>\n<blockquote>\n<p>npm install –save live2d-widget-model-&lt;你喜欢的模型名字&gt;</p>\n</blockquote>\n</li>\n<li><p>在命令行（即Git Bash）运行以下命令， 在<code>http://127.0.0.1:4000/</code>查看测试结果:</p>\n<blockquote>\n<p>hexo clean &amp;&amp; hexo g &amp;&amp; hexo s</p>\n</blockquote>\n</li>\n</ol>\n<h3 id=\"插件配置\"><a href=\"#插件配置\" class=\"headerlink\" title=\"插件配置\"></a>插件配置</h3><p>以下插件（评论系统、数据统计与分析、内容分享服务、搜索服务）各选一个即可。</p>\n<h4 id=\"评论系统\"><a href=\"#评论系统\" class=\"headerlink\" title=\"评论系统\"></a>评论系统</h4><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th></th>\n<th>推荐指数</th>\n<th>优点</th>\n<th>缺点</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"https://valine.js.org/\" target=\"_blank\" rel=\"noopener\">Valine</a></td>\n<td>4</td>\n<td>每天30000条评论，10GB的储存</td>\n<td>作者评论无标识</td>\n</tr>\n<tr>\n<td><a href=\"https://livere.com/\" target=\"_blank\" rel=\"noopener\">来必力/livere</a></td>\n<td>4</td>\n<td>多种账号登录</td>\n<td>评论无法导出</td>\n</tr>\n<tr>\n<td><a href=\"http://changyan.kuaizhan.com/\" target=\"_blank\" rel=\"noopener\">畅言</a></td>\n<td>3</td>\n<td>美观</td>\n<td>必须备案域名</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/imsun/gitment\" target=\"_blank\" rel=\"noopener\">gitment</a></td>\n<td>3</td>\n<td>简洁</td>\n<td>只能登陆github评论</td>\n</tr>\n<tr>\n<td>Disqus</td>\n<td>1</td>\n<td></td>\n<td>需要翻*墙</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h5 id=\"Valine\"><a href=\"#Valine\" class=\"headerlink\" title=\"Valine\"></a>Valine</h5><p>1.1. 获取APP ID 和 APP Key</p>\n<p>请先登录或注册 <a href=\"https://leancloud.cn/\" target=\"_blank\" rel=\"noopener\">LeanCloud</a>, 进入控制台后点击左下角创建应用，</p>\n<p>进入刚刚创建的应用，选择左下角的<code>设置</code>&gt;<code>应用Key</code>，然后就能看到你的<code>APP ID</code>和<code>APP Key</code>了。</p>\n<p>1.2. 填写APP ID 和 APP Key到主题配置文件<code>_config.yml</code></p>\n<p>1.3. 运行<code>hexo g&amp;&amp;hexo d</code>推送到博客。</p>\n<h5 id=\"来必力-livere\"><a href=\"#来必力-livere\" class=\"headerlink\" title=\"来必力/livere\"></a>来必力/livere</h5><p>2.1. 登陆 <a href=\"https://livere.com/\" target=\"_blank\" rel=\"noopener\">来必力</a> 获取你的 LiveRe UID。</p>\n<p>2.2. 填写LiveRe UID到主题配置文件<code>_config.yml</code></p>\n<h5 id=\"畅言\"><a href=\"#畅言\" class=\"headerlink\" title=\"畅言\"></a>畅言</h5><p>3.1.获取APP ID 和 APP Key</p>\n<p>请先登录或注册 <a href=\"http://changyan.kuaizhan.com/\" target=\"_blank\" rel=\"noopener\">畅言</a>, 点击“立即免费获取畅言”，</p>\n<p>新建站点，点击管理，点击评论插件&gt;评论管理，</p>\n<p>点击后台总览，然后就能看到你的<code>APP ID</code>和<code>APP Key</code>了。</p>\n<p>3.2. 填写APP ID 和 APP Key到主题配置文件<code>_config.yml</code></p>\n<p>3.3. 运行<code>hexo g&amp;&amp;hexo d</code>推送到博客。</p>\n<h5 id=\"gitment\"><a href=\"#gitment\" class=\"headerlink\" title=\"gitment\"></a>gitment</h5><p>4.1. 安装插件：</p>\n<blockquote>\n<p>npm i –save gitment</p>\n</blockquote>\n<p>4.2. 申请应用</p>\n<p>在<a href=\"https://github.com/settings/applications/new\" target=\"_blank\" rel=\"noopener\">New OAuth App</a>为你的博客应用一个密钥:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Application name:随便写</span><br><span class=\"line\">Homepage URL:这个也可以随意写,就写你的博客地址就行</span><br><span class=\"line\">Application description:描述,也可以随意写</span><br><span class=\"line\">Authorization callback URL:这个必须写你的博客地址</span><br></pre></td></tr></table></figure>\n<p>4.3. 配置</p>\n<p>编辑主题配置文件<code>themes/*/_config.yml</code>:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Gitment</span><br><span class=\"line\"># Introduction: https://imsun.net/posts/gitment-introduction/</span><br><span class=\"line\">gitment:</span><br><span class=\"line\">  enable: true</span><br><span class=\"line\">  mint: true # RECOMMEND, A mint on Gitment, to support count, language and proxy_gateway</span><br><span class=\"line\">  count: true # Show comments count in post meta area</span><br><span class=\"line\">  lazy: false # Comments lazy loading with a button</span><br><span class=\"line\">  cleanly: false # Hide &apos;Powered by ...&apos; on footer, and more</span><br><span class=\"line\">  language: # Force language, or auto switch by theme</span><br><span class=\"line\">  github_user: &#123;you github user id&#125;</span><br><span class=\"line\">  github_repo: 公开的git仓库,评论会作为那个项目的issue</span><br><span class=\"line\">  client_id: &#123;刚才申请的ClientID&#125;</span><br><span class=\"line\">  client_secret: &#123;刚才申请的Client Secret&#125;</span><br><span class=\"line\">  proxy_gateway: # Address of api proxy, See: https://github.com/aimingoo/intersect</span><br><span class=\"line\">  redirect_protocol: # Protocol of redirect_uri with force_redirect_pro</span><br></pre></td></tr></table></figure>\n<h5 id=\"Disqus\"><a href=\"#Disqus\" class=\"headerlink\" title=\"Disqus\"></a>Disqus</h5><p>编辑 主题配置文件<code>themes/*/_config.yml</code>， 将 disqus 下的 enable 设定为 true，同时提供您的 shortname。count 用于指定是否显示评论数量。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">disqus:</span><br><span class=\"line\">  enable: false</span><br><span class=\"line\">  shortname:</span><br><span class=\"line\">  count: true</span><br></pre></td></tr></table></figure>\n<h4 id=\"数据统计与分析\"><a href=\"#数据统计与分析\" class=\"headerlink\" title=\"数据统计与分析\"></a>数据统计与分析</h4><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th></th>\n<th>推荐指数</th>\n<th>优点</th>\n<th>缺点</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"http://ibruce.info/2015/04/04/busuanzi/\" target=\"_blank\" rel=\"noopener\">不蒜子</a></td>\n<td>4</td>\n<td>可直接将访问次数显示在您在网页上（也可不显示）</td>\n<td>只计数</td>\n</tr>\n<tr>\n<td>百度统计</td>\n<td>3</td>\n<td></td>\n<td>收录慢</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h5 id=\"不蒜子\"><a href=\"#不蒜子\" class=\"headerlink\" title=\"不蒜子\"></a>不蒜子</h5><p>编辑 主题配置文件 <code>themes/*/_config.yml</code>中的<code>busuanzi_count</code>的配置项即可。</p>\n<ul>\n<li>当<code>enable: true</code>时，代表开启全局开关。</li>\n<li>若<code>site_uv</code>（本站访客数）、<code>site_pv</code>（本站访客数）、<code>page_pv</code>（本文总阅读量）的值均为<code>false</code>时，不蒜子仅作记录而不会在页面上显示。</li>\n</ul>\n<p>注意：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">不蒜子官方因七牛强制过期原有的『dn-lbstatics.qbox.me』域名（预计2018年10月初），与客服沟通数次无果，即使我提出为此付费也不行，只能更换域名到『busuanzi.ibruce.info』！</span><br></pre></td></tr></table></figure>\n<p>解决办法：</p>\n<ol>\n<li><p>找到主题调用不蒜子的swig文件。一般在”\\themes*\\layout_third-party\\analytics\\busuanzi-counter.swig”</p>\n</li>\n<li><p>更改域名</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">把原有的：</span><br><span class=\"line\">&lt;script async src=&quot;\u0001\u0001//dn-lbstatics.qbox.me/busuanzi/2.3/busuanzi.pure.mini.js\u0002\u0002&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">域名改一下即可：</span><br><span class=\"line\">&lt;script async src=&quot;\u0001\u0001//busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js\u0002\u0002&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h5 id=\"百度统计\"><a href=\"#百度统计\" class=\"headerlink\" title=\"百度统计\"></a>百度统计</h5><ol>\n<li><p>登录 <a href=\"http://tongji.baidu.com/\" target=\"_blank\" rel=\"noopener\">百度统计</a>，定位到站点的代码获取页面</p>\n</li>\n<li><p>复制统计脚本 id，如图：</p>\n<p><a href=\"http://theme-next.iissnan.com/uploads/five-minutes-setup/analytics-baidu-id.png\" target=\"_blank\" rel=\"noopener\"><img src=\"analytics-baidu-id.png\" alt=\"img\"></a></p>\n</li>\n<li><p>编辑 主题配置文件<code>themes/*/_config.yml</code>，修改字段 <code>google_analytics</code>，值设置成你的统计脚本 id。</p>\n</li>\n</ol>\n<h4 id=\"内容分享服务\"><a href=\"#内容分享服务\" class=\"headerlink\" title=\"内容分享服务\"></a>内容分享服务</h4><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th></th>\n<th>推荐指数</th>\n<th>优点</th>\n<th>缺点</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"http://share.baidu.com/\" target=\"_blank\" rel=\"noopener\">百度分享</a></td>\n<td>4</td>\n<td>稳定</td>\n<td>不太美观</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/revir/need-more-share2\" target=\"_blank\" rel=\"noopener\">need-more-share2</a></td>\n<td>4</td>\n<td>美观</td>\n<td>更新不及时（比如微信分享API）</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h5 id=\"百度分享\"><a href=\"#百度分享\" class=\"headerlink\" title=\"百度分享\"></a>百度分享</h5><p>编辑 主题配置文件，添加/修改字段 <code>baidushare</code>，值为 <code>true</code>即可。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 百度分享服务</span><br><span class=\"line\">baidushare: true</span><br></pre></td></tr></table></figure>\n<h5 id=\"need-more-share2\"><a href=\"#need-more-share2\" class=\"headerlink\" title=\"need-more-share2\"></a>need-more-share2</h5><p>编辑 主题配置文件，添加/修改字段 <code>needmoreshare2</code>，值为 <code>true</code>即可。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">needmoreshare2:</span><br><span class=\"line\">  enable: true</span><br></pre></td></tr></table></figure>\n<h4 id=\"搜索服务\"><a href=\"#搜索服务\" class=\"headerlink\" title=\"搜索服务\"></a>搜索服务</h4><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th></th>\n<th>推荐指数</th>\n<th>优点</th>\n<th>缺点</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Local Search</td>\n<td>4</td>\n<td>配置方便</td>\n<td></td>\n</tr>\n<tr>\n<td>Swiftype</td>\n<td>2</td>\n<td></td>\n<td>需注册</td>\n</tr>\n<tr>\n<td>Algolia</td>\n<td>2</td>\n<td></td>\n<td>需注册</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h5 id=\"Local-Search\"><a href=\"#Local-Search\" class=\"headerlink\" title=\"Local Search\"></a>Local Search</h5><p>添加百度/谷歌/本地 自定义站点内容搜索</p>\n<ol>\n<li><p>安装 <code>hexo-generator-searchdb</code>，在站点的根目录下执行以下命令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install hexo-generator-searchdb --save</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>编辑 站点配置文件，新增以下内容到任意位置：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">search:</span><br><span class=\"line\">  path: search.xml</span><br><span class=\"line\">  field: post</span><br><span class=\"line\">  format: html</span><br><span class=\"line\">  limit: 10000</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>编辑 主题配置文件，启用本地搜索功能：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Local search</span><br><span class=\"line\">local_search:</span><br><span class=\"line\">  enable: true</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h3 id=\"错误分析\"><a href=\"#错误分析\" class=\"headerlink\" title=\"错误分析\"></a>错误分析</h3><p>如果你使用Hexo遇到同样的问题,这里有一些常见问题的解决方案。</p>\n<h4 id=\"YAML-Parsing-Error\"><a href=\"#YAML-Parsing-Error\" class=\"headerlink\" title=\"YAML Parsing Error\"></a>YAML Parsing Error</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">JS-YAML: incomplete explicit mapping pair; a key node is missed at line 18, column 29:</span><br><span class=\"line\">      last_updated: Last updated: %s</span><br></pre></td></tr></table></figure>\n<ol>\n<li>参数中包含冒号，请用加引号，如<code>Last updated: %s</code></li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">JS-YAML: bad indentation of a mapping entry at line 18, column 31:</span><br><span class=\"line\">      last_updated：&quot;Last updated: %s&quot;</span><br></pre></td></tr></table></figure>\n<ol>\n<li>字段后面的冒号必须为<strong>英文冒号</strong>，如：last_updated:</li>\n<li>字段冒号后面必须跟一个空格，如：last_updated: “Last updated: %s”</li>\n</ol>\n<h4 id=\"EMFILE-Error\"><a href=\"#EMFILE-Error\" class=\"headerlink\" title=\"EMFILE Error\"></a>EMFILE Error</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Error: EMFILE, too many open files</span><br></pre></td></tr></table></figure>\n<p>生成大量的文件时，可能遇到EMFILE错误。</p>\n<p>可以运行以下命令来增加允许同步I / O操作的数量。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ulimit -n 10000</span><br></pre></td></tr></table></figure>\n<h4 id=\"Process-Out-of-Memory\"><a href=\"#Process-Out-of-Memory\" class=\"headerlink\" title=\"Process Out of Memory\"></a>Process Out of Memory</h4><p>当<code>hexo g</code>时，遇到以下错误：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FATAL ERROR: CALL_AND_RETRY_LAST Allocation failed - process out of memory</span><br></pre></td></tr></table></figure>\n<p>如下，更改<code>hexo-cli</code>文件的第一行，来增大nodejs堆内存.该bug已在<a href=\"https://github.com/hexojs/hexo/issues/1735\" target=\"_blank\" rel=\"noopener\">新版本</a>修复。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/usr/bin/env node --max_old_space_size=8192</span><br></pre></td></tr></table></figure>\n<h4 id=\"Git-Deployment-Problems\"><a href=\"#Git-Deployment-Problems\" class=\"headerlink\" title=\"Git Deployment Problems\"></a>Git Deployment Problems</h4><ol>\n<li><p><strong>RPC failed</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">error: RPC failed; result=22, HTTP code = 403</span><br><span class=\"line\"></span><br><span class=\"line\">fatal: &apos;username.github.io&apos; does not appear to be a git repository</span><br></pre></td></tr></table></figure>\n<p>确保你有你的电脑上设置git正确或尝试使用HTTPS存储库URL。</p>\n</li>\n<li><p><strong>Error: ENOENT: no such file or directory</strong></p>\n</li>\n</ol>\n<p>这个需要有一定的git的知识，因为可能是由于写错了标签,类别,或文件名，导致本地和github冲突了，Git不能自动合并这一变化所以它打破了自动分支。</p>\n<p><strong>解决办法：</strong></p>\n<ol>\n<li>检查文章的标签和类别,确保本地和github上是相同的。</li>\n<li>合并分支（Commit）。</li>\n<li>清除，重构。在站点目录下，命令行（即Git Bash）运行<code>hexo clean</code>和<code>hexo g</code></li>\n<li>手动将站点目录下的<code>public</code>文件夹复制到您的桌面</li>\n<li>从你的master分支切换到部署在本地分支。</li>\n<li>从桌面复制<code>public</code>文件夹到本地分支。</li>\n<li>合并分支到github（Commit）。</li>\n<li>切回master分支。</li>\n</ol>\n<h4 id=\"Server-Problems\"><a href=\"#Server-Problems\" class=\"headerlink\" title=\"Server Problems\"></a>Server Problems</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Error: listen EADDRINUSE</span><br></pre></td></tr></table></figure>\n<p>你可能使用相同的端口，同时开启了两个Hexo服务器。如果需要同时开启，可以尝试修改端口设置：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server -p 5000</span><br></pre></td></tr></table></figure>\n<h4 id=\"Plugin-Installation-Problems\"><a href=\"#Plugin-Installation-Problems\" class=\"headerlink\" title=\"Plugin Installation Problems\"></a>Plugin Installation Problems</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm ERR! node-waf configure build</span><br></pre></td></tr></table></figure>\n<p>这个错误可能发生在试图安装一个用Cc++或另一个javascript语言编写的插件。确保您已经安装了正确的编译器在您的计算机上。</p>\n<h4 id=\"Error-with-DTrace-Mac-OS-X\"><a href=\"#Error-with-DTrace-Mac-OS-X\" class=\"headerlink\" title=\"Error with DTrace (Mac OS X)\"></a>Error with DTrace (Mac OS X)</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123; [Error: Cannot find module &apos;./build/Release/DTraceProviderBindings&apos;] code: &apos;MODULE_NOT_FOUND&apos; &#125;</span><br><span class=\"line\">&#123; [Error: Cannot find module &apos;./build/default/DTraceProviderBindings&apos;] code: &apos;MODULE_NOT_FOUND&apos; &#125;</span><br><span class=\"line\">&#123; [Error: Cannot find module &apos;./build/Debug/DTraceProviderBindings&apos;] code: &apos;MODULE_NOT_FOUND&apos; &#125;</span><br></pre></td></tr></table></figure>\n<p>DTrace安装可能有问题，重装:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install hexo --no-optional</span><br></pre></td></tr></table></figure>\n<p>详见 <a href=\"https://github.com/hexojs/hexo/issues/1326#issuecomment-113871796\" target=\"_blank\" rel=\"noopener\">#1326</a></p>\n<h4 id=\"Iterate-Data-Model-on-Jade-or-Swig\"><a href=\"#Iterate-Data-Model-on-Jade-or-Swig\" class=\"headerlink\" title=\"Iterate Data Model on Jade or Swig\"></a>Iterate Data Model on Jade or Swig</h4><p>Hexo使用仓库的数据模型。这不是一个数组,所以你可能需要将对象转换为iterable。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% for post in site.posts.toArray() %&#125;</span><br><span class=\"line\">&#123;% endfor %&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"Data-Not-Updated\"><a href=\"#Data-Not-Updated\" class=\"headerlink\" title=\"Data Not Updated\"></a>Data Not Updated</h4><p>一些数据不能更新或新生成的文件的最后一个版本完全相同。清理缓存，再试一次：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo clean</span><br></pre></td></tr></table></figure>\n<h4 id=\"No-command-is-executed\"><a href=\"#No-command-is-executed\" class=\"headerlink\" title=\"No command is executed\"></a>No command is executed</h4><p>那个不能使用除<code>help</code>、<code>init</code>和<code>version</code>以外的命令行（即Git Bash）时, 有可能时站点目录下的<code>package.json</code>文件，缺少<code>hexo</code> ，如下:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;hexo&quot;: &#123;</span><br><span class=\"line\">    &quot;version&quot;: &quot;3.2.2&quot;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"Escape-Contents\"><a href=\"#Escape-Contents\" class=\"headerlink\" title=\"Escape Contents\"></a>Escape Contents</h4><p>Hexo使用Nunjucks渲染的页面. <code>{ { } }</code>或<code>{ % % }</code>将解析和可能会引起麻烦， 如果要在博文中出现，必须使用三引号：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Hello &#123;&#123; sensitive &#125;&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#### ENOSPC Error (Linux)</span><br><span class=\"line\"></span><br><span class=\"line\">如果运行命令`$ hexo server` 返回一个错误:</span><br><span class=\"line\">Error: watch ENOSPC …</span><br><span class=\"line\">可以通过运行`$ npm dedupe`或者以下命令行（即Git Bash）：</span><br><span class=\"line\">$ echo fs.inotify.max_user_watches=524288 | sudo tee -a /etc/sysctl.conf &amp;&amp; sudo sysctl -p</span><br><span class=\"line\">来增加测试时，你可以看见的文件数量。</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#### EMPERM Error (Windows Subsystem for Linux)</span><br><span class=\"line\"></span><br><span class=\"line\">如果在Windows Subsystem for Linux，运行命令`$ hexo server` 返回这个错误:</span><br><span class=\"line\">Error: watch /path/to/hexo/theme/ EMPERM</span><br><span class=\"line\"></span><br><span class=\"line\">因为目前在Windows Subsystem for Linux中，有些内容更改时，还不能实时更新到hexo服务器。</span><br><span class=\"line\">所以需要重新编译，再启动服务器：</span><br><span class=\"line\">$ hexo generate</span><br><span class=\"line\">$ hexo server -s</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#### Template render error</span><br><span class=\"line\"></span><br><span class=\"line\">有时运行命令`$ hexo generate` 返回一个错误:</span><br><span class=\"line\">FATAL Something’s wrong. Maybe you can find the solution here: http://hexo.io/docs/troubleshooting.html</span><br><span class=\"line\">Template render error: (unknown path)</span><br><span class=\"line\"></span><br><span class=\"line\">这意味着有些认不出来单词在你的文件，并且很可能在你的新博文,或者配置文件`_config.yml`中，比如缩进错误：</span><br></pre></td></tr></table></figure>\n<h3 id=\"常用操作\"><a href=\"#常用操作\" class=\"headerlink\" title=\"常用操作\"></a>常用操作</h3><h4 id=\"创建文章\"><a href=\"#创建文章\" class=\"headerlink\" title=\"创建文章\"></a>创建文章</h4><p>命令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new [layout] &lt;title&gt;</span><br></pre></td></tr></table></figure>\n<p>参数说明：</p>\n<ul>\n<li>[layout]可以为以下三种：</li>\n</ul>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>参数名</th>\n<th>功能</th>\n<th>文章路径</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>post</td>\n<td>新建博文</td>\n<td>source/_posts</td>\n</tr>\n<tr>\n<td>page</td>\n<td>新建页面（如404，分类）</td>\n<td>source</td>\n</tr>\n<tr>\n<td>draft</td>\n<td>草稿</td>\n<td>source/_drafts</td>\n</tr>\n</tbody>\n</table>\n</div>\n<p>草稿可通过一下命令发布：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo publish [layout] &lt;title&gt;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>title注意：</p>\n<p>不是博文标题，</p>\n<p>是博文markdown文件的名字，</p>\n<p>也是博文链接的后缀（如<code>https://www.simon96.online/2018/10/12/hexo-tutorial/</code>中的hexo-tutorial）</p>\n</li>\n</ul>\n<h4 id=\"文章模版\"><a href=\"#文章模版\" class=\"headerlink\" title=\"文章模版\"></a>文章模版</h4><ul>\n<li><p>创建模版</p>\n<p>在新建文章时，Hexo 会根据 <code>scaffolds</code> 文件夹内相对应的文件来建立文件，例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new blog “simon”</span><br></pre></td></tr></table></figure>\n<p> 在执行这行指令时，Hexo 会尝试在 <code>scaffolds</code> 文件夹中寻找 <code>blog.md</code>，并根据其内容建立文章。</p>\n</li>\n<li><p>修改参数</p>\n<p>以下是您可以在模版中使用的变量：</p>\n</li>\n</ul>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>变量</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>layout</td>\n<td>布局</td>\n</tr>\n<tr>\n<td>title</td>\n<td>标题</td>\n</tr>\n<tr>\n<td>date</td>\n<td>文件建立日期</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h4 id=\"Front-matter\"><a href=\"#Front-matter\" class=\"headerlink\" title=\"Front-matter\"></a>Front-matter</h4><p>就是博文最上方以 <code>---</code> 分隔的那部分。</p>\n<p>默认可以使用的Front-matter：</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>描述</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>layout</code></td>\n<td>布局</td>\n<td></td>\n</tr>\n<tr>\n<td><code>title</code></td>\n<td>标题</td>\n<td></td>\n</tr>\n<tr>\n<td><code>date</code></td>\n<td>建立日期</td>\n<td>文件建立日期</td>\n</tr>\n<tr>\n<td><code>updated</code></td>\n<td>更新日期</td>\n<td>文件更新日期</td>\n</tr>\n<tr>\n<td><code>comments</code></td>\n<td>开启文章的评论功能</td>\n<td>true</td>\n</tr>\n<tr>\n<td><code>tags</code></td>\n<td>标签（不适用于分页）</td>\n<td></td>\n</tr>\n<tr>\n<td><code>categories</code></td>\n<td>分类（不适用于分页）</td>\n<td></td>\n</tr>\n<tr>\n<td><code>permalink</code></td>\n<td>覆盖文章网址</td>\n</tr>\n</tbody>\n</table>\n</div>\n<hr>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><blockquote>\n<p><strong>原作者：</strong> TDsimon</p>\n<p><strong>转载来源：</strong> <a href=\"https://www.simon96.online/2018/10/12/hexo-tutorial/\" target=\"_blank\" rel=\"noopener\">https://www.simon96.online/2018/10/12/hexo-tutorial/</a></p>\n<p><strong>版权声明：</strong> 本博客所有文章除特别声明外，均采用 <a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/\" target=\"_blank\" rel=\"noopener\">CC BY-NC-SA 4.0</a> 许可协议。转载请注明出处！</p>\n</blockquote>\n<h3 id=\"博客搭建\"><a href=\"#博客搭建\" class=\"headerlink\" title=\"博客搭建\"></a>博客搭建</h3><h4 id=\"准备环境\"><a href=\"#准备环境\" class=\"headerlink\" title=\"准备环境\"></a>准备环境</h4><ol>\n<li><p><a href=\"http://nodejs.org/\" target=\"_blank\" rel=\"noopener\">Node.js</a> 下载，并安装。详细步骤：<a href=\"https://www.simon96.online/2018/11/10/hexo-env/\" target=\"_blank\" rel=\"noopener\">https://www.simon96.online/2018/11/10/hexo-env/</a></p>\n</li>\n<li><p><a href=\"http://git-scm.com/\" target=\"_blank\" rel=\"noopener\">Git</a> 下载，并安装。详细步骤：<a href=\"https://www.simon96.online/2018/11/10/hexo-env/\" target=\"_blank\" rel=\"noopener\">https://www.simon96.online/2018/11/10/hexo-env/</a></p>\n</li>\n<li><p>安装Hexo，在命令行（即Git Bash）运行以下命令：</p>\n<blockquote>\n<p>npm install -g hexo-cli</p>\n</blockquote>\n</li>\n<li><p>初始化Hexo，在命令行（即Git Bash）依次运行以下命令即可：</p>\n<p>以下，即存放Hexo初始化文件的路径， 即站点目录。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo init &lt;folder&gt;</span><br><span class=\"line\">$ cd &lt;folder&gt;</span><br><span class=\"line\">$ npm install</span><br></pre></td></tr></table></figure>\n<p>新建完成后，在路径下，会产生这些文件和文件夹：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.</span><br><span class=\"line\">├── _config.yml</span><br><span class=\"line\">├── package.json</span><br><span class=\"line\">├── scaffolds</span><br><span class=\"line\">├── source</span><br><span class=\"line\">|   ├── _drafts</span><br><span class=\"line\">|   └── _posts</span><br><span class=\"line\">└── themes</span><br></pre></td></tr></table></figure>\n<p><strong>注</strong>：</p>\n<ul>\n<li><p>hexo相关命令均在<strong>站点目录</strong>下，用<strong>Git Bash</strong>运行。</p>\n</li>\n<li><p>站点配置文件：站点目录下的<code>_config.yml</code>。</p>\n<p> 路径为<code>&lt;folder&gt;\\_config.yml</code></p>\n</li>\n<li><p>主题配置文件：站点目录下的<code>themes</code>文件夹下的，主题文件夹下的<code>_config.yml</code>。</p>\n<p> 路径为<code>&lt;folder&gt;\\themes\\&lt;主题文件夹&gt;\\_config.yml</code></p>\n</li>\n</ul>\n</li>\n<li><p>启动服务器。在路径下，命令行（即Git Bash）输入以下命令，运行即可：</p>\n<blockquote>\n<p>hexo server</p>\n</blockquote>\n</li>\n<li><p>浏览器访问网址： <code>http://localhost:4000/</code></p>\n</li>\n</ol>\n<p>至此，您的Hexo博客已经搭建在本地。</p>\n<h4 id=\"实施方案\"><a href=\"#实施方案\" class=\"headerlink\" title=\"实施方案\"></a>实施方案</h4><h5 id=\"方案一：GithubPages\"><a href=\"#方案一：GithubPages\" class=\"headerlink\" title=\"方案一：GithubPages\"></a>方案一：GithubPages</h5><ol>\n<li><p>创建<a href=\"https://github.com/\" target=\"_blank\" rel=\"noopener\">Github</a>账号</p>\n</li>\n<li><p>创建仓库， 仓库名为：<github账号名称>.github.io</github账号名称></p>\n</li>\n<li><p>将本地Hexo博客推送到GithubPages</p>\n<p>3.1. 安装<code>hexo-deployer-git</code>插件。在命令行（即Git Bash）运行以下命令即可：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>\n<p>3.2. 添加SSH key。</p>\n<ul>\n<li><p>创建一个 SSH key 。在命令行（即Git Bash）输入以下命令， 回车三下即可：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ssh-keygen -t rsa -C &quot;邮箱地址&quot;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>添加到 github。 复制密钥文件内容（路径形如<code>C:\\Users\\Administrator\\.ssh\\id_rsa.pub</code>），粘贴到<a href=\"https://github.com/settings/keys\" target=\"_blank\" rel=\"noopener\">New SSH Key</a>即可。</p>\n</li>\n<li><p>测试是否添加成功。在命令行（即Git Bash）依次输入以下命令，返回“You’ve successfully authenticated”即成功：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ssh -T git@github.com</span><br><span class=\"line\">$ yes</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>3.3. 修改<code>_config.yml</code>（在站点目录下）。文件末尾修改为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Deployment</span><br><span class=\"line\">## Docs: https://hexo.io/docs/deployment.html</span><br><span class=\"line\">deploy:</span><br><span class=\"line\">  type: git</span><br><span class=\"line\">  repo: git@github.com:&lt;Github账号名称&gt;/&lt;Github账号名称&gt;.github.io.git</span><br><span class=\"line\">  branch: master</span><br></pre></td></tr></table></figure>\n<p>注意：上面仓库地址写ssh地址，不写http地址。</p>\n<p>3.4. 推送到GithubPages。在命令行（即Git Bash）依次输入以下命令， 返回<code>INFO Deploy done: git</code>即成功推送：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo g</span><br><span class=\"line\">$ hexo d</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>等待1分钟左右，浏览器访问网址： <code>https://&lt;Github账号名称&gt;.github.io</code></p>\n</li>\n</ol>\n<p>至此，您的Hexo博客已经搭建在GithubPages, 域名为<code>https://&lt;Github账号名称&gt;.github.io</code>。</p>\n<h5 id=\"方案二：GithubPages-域名\"><a href=\"#方案二：GithubPages-域名\" class=\"headerlink\" title=\"方案二：GithubPages + 域名\"></a>方案二：GithubPages + 域名</h5><p>在方案一的基础上，添加自定义域名（您购买的域名）。</p>\n<ol>\n<li><p>域名解析。</p>\n<p>类型选择为 CNAME；</p>\n<p>主机记录即域名前缀，填写为www；</p>\n<p>记录值填写为自定义域名；</p>\n<p>解析线路，TTL 默认即可。</p>\n</li>\n<li><p>仓库设置。</p>\n<p>2.1. 打开博客仓库设置：<code>https://github.com/&lt;Github账号名称&gt;/&lt;Github账号名称&gt;.github.io/settings</code></p>\n<p>2.2. 在Custom domain下，填写自定义域名，点击<code>save</code>。</p>\n<p>2.3. 在站点目录的<code>source</code>文件夹下，创建并打开<code>CNAME.txt</code>，写入你的域名（如<code>www.simon96.online</code>），保存，并重命名为<code>CNAME</code>。</p>\n</li>\n<li><p>等待10分钟左右。</p>\n<p>浏览器访问自定义域名。</p>\n<p>至此，您的Hexo博客已经解析到自定义域名，<code>https://&lt;Github账号名称&gt;.github.io</code>依然可用。</p>\n</li>\n</ol>\n<h5 id=\"方案三：GithubPages-CodingPages-域名\"><a href=\"#方案三：GithubPages-CodingPages-域名\" class=\"headerlink\" title=\"方案三：GithubPages + CodingPages + 域名\"></a>方案三：GithubPages + CodingPages + 域名</h5><p>GithubPages 在国内较慢，百度不收录，而CodingPages 在国外较快。所以在方案二的基础上，添加CodingPages 。</p>\n<ol>\n<li><p>创建<a href=\"https://coding.net/\" target=\"_blank\" rel=\"noopener\">Coding</a>账号</p>\n</li>\n<li><p>创建仓库， 仓库名为：<coding账号名称></coding账号名称></p>\n</li>\n<li><p>进入项目里『代码』页面，点击『一键开启静态 Pages』，稍等片刻CodingPages即可部署成功。</p>\n</li>\n<li><p>将本地Hexo博客推送到CodingPages</p>\n<p>4.1. 鉴于创建GithubPages 时，已经生成过公钥。可直接复制密钥文件内容（路径形如<code>C:\\Users\\Administrator\\.ssh\\id_rsa.pub</code>）， 粘贴到<a href=\"https://dev.tencent.com/user/account/setting/keys\" target=\"_blank\" rel=\"noopener\">新增公钥</a>。</p>\n<p>4.2. 测试是否添加成功。在命令行（即Git Bash）依次输入以下命令，返回“You’ve successfully authenticated”即成功：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ssh -T git@git.coding.net</span><br><span class=\"line\">$ yes</span><br></pre></td></tr></table></figure>\n<p>4.3. 修改<code>_config.yml</code>（在存放Hexo初始化文件的路径下）。文件末尾修改为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Deployment</span><br><span class=\"line\">## Docs: https://hexo.io/docs/deployment.html</span><br><span class=\"line\">deploy:</span><br><span class=\"line\">- type: git</span><br><span class=\"line\">  repo: git@github.com:&lt;Github账号名称&gt;/&lt;Github账号名称&gt;.github.io.git</span><br><span class=\"line\">  branch: master</span><br><span class=\"line\">- type: git</span><br><span class=\"line\">  repo: git@git.dev.tencent.com:&lt;Coding账号名称&gt;/&lt;Coding账号名称&gt;.git</span><br><span class=\"line\">  branch: master</span><br></pre></td></tr></table></figure>\n<p>4.4. 推送到GithubPages。在命令行（即Git Bash）依次输入以下命令， 返回<code>INFO Deploy done: git</code>即成功推送：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo g</span><br><span class=\"line\">$ hexo d</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>域名解析</p>\n<ol>\n<li><p>添加 CNAME 记录指向 <coding账号名称>.coding.me</coding账号名称></p>\n<p>类型选择为 CNAME；</p>\n<p>主机记录即域名前缀，填写为www；</p>\n<p>记录值填写为自定义域名；</p>\n<p>解析线路，TTL 默认即可。</p>\n</li>\n<li><p>添加 两条A 记录指向 192.30.252.153和192.30.252.154</p>\n<p>类型选择为 A；</p>\n<p>主机记录即域名前缀，填写为@；</p>\n<p>记录值填写为192.30.252.153和192.30.252.154；</p>\n<p>解析线路，境外或谷歌。</p>\n</li>\n<li><p>在『Pages 服务』设置页（<code>https://dev.tencent.com/u/&lt;Coding账号名称&gt;/p/&lt;Coding账号名称&gt;/git/pages/settings</code>）中绑定自定义域名。</p>\n</li>\n</ol>\n</li>\n</ol>\n<p>至此，您的Hexo博客已经解析到自定义域名，<code>https://&lt;Github账号名称&gt;.github.io</code>和<code>https://&lt;Coding账号名称&gt;.coding.me</code>依然可用。</p>\n<h5 id=\"方案四：云服务器-域名\"><a href=\"#方案四：云服务器-域名\" class=\"headerlink\" title=\"方案四：云服务器 + 域名\"></a>方案四：云服务器 + 域名</h5><p>该方案需要先购买云服务器和域名。</p>\n<ol>\n<li><p>在云服务器安装Git 和 Nginx。(Git 用于版本管理和部署，Nginx 用于静态博客托管。)</p>\n<p>登陆root用户，运行：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ yum -y update</span><br><span class=\"line\">$ yum install -y git nginx</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Nginx配置</p>\n<p>2.1. 创建文件目录(用于博客站点文件存放)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /usr/local/</span><br><span class=\"line\">mkdir hexo</span><br><span class=\"line\">chmod 775 -R /usr/local/hexo/</span><br></pre></td></tr></table></figure>\n<p>2.2. 添加 index.html(用于检测配置 Nginx 是否成功)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /usr/local/hexo/index.html</span><br></pre></td></tr></table></figure>\n<p>添加以下代码，并保存。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">  &lt;head&gt;</span><br><span class=\"line\">    &lt;title&gt;&lt;/title&gt;</span><br><span class=\"line\">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class=\"line\">  &lt;/head&gt;</span><br><span class=\"line\">  &lt;body&gt;</span><br><span class=\"line\">    &lt;p&gt;Nginx running&lt;/p&gt;</span><br><span class=\"line\">  &lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n<p>2.3. 配置 Nginx 服务器</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /etc/nginx/nginx.conf</span><br></pre></td></tr></table></figure>\n<p>修改server_name和root：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">      listen       80 default_server;</span><br><span class=\"line\">      listen       [::]:80 default_server;</span><br><span class=\"line\">      server_name  www.baidu.com; # 填个人域名      </span><br><span class=\"line\">      root         /usr/local/hexo/;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<p>2.4. 启动nginx服务；</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">service nginx start</span><br></pre></td></tr></table></figure>\n<p>2.5. 云服务器浏览器访问个人域名或IP，若跳转index.html，则配置完成，否则检查以上配置。</p>\n</li>\n<li><p>git配置</p>\n<p>3.1. 创建文件目录, 用于私人 Git 仓库搭建, 并更改目录读写权限。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /usr/local/</span><br><span class=\"line\">mkdir hexoRepo</span><br><span class=\"line\">chmod 775 -R /usr/local/hexoRepo/</span><br></pre></td></tr></table></figure>\n<p>3.2. Git 初始化裸库。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd hexoRepo/</span><br><span class=\"line\">git init --bare hexo.git</span><br></pre></td></tr></table></figure>\n<p>3.3. 创建 Git 钩子(hook)。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /usr/local/hexoRepo/hexo.git/hooks/post-receive</span><br></pre></td></tr></table></figure>\n<p>3.4. 输入以下信息，用于指定 Git 的源代码 和 Git 配置文件。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/bin/bash</span><br><span class=\"line\"></span><br><span class=\"line\">git --work-tree=/usr/local/hexo --git-dir=/usr/local/hexoRepo/hexo.git checkout -f</span><br></pre></td></tr></table></figure>\n<p>3.5. 保存并退出后, 给该文件添加可执行权限。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chmod +x /usr/local/hexoRepo/hexo.git/hooks/post-receive</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>本地博客推送到云服务器</p>\n<p>4.1. 安装<code>hexo-deployer-git</code>插件。在命令行（即Git Bash）运行以下命令即可：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>\n<p>4.2. 添加SSH key。</p>\n<ul>\n<li><p>创建一个 SSH key 。在命令行（即Git Bash）输入以下命令， 回车三下即可：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ssh-keygen -t rsa -C &quot;邮箱地址&quot;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>添加到 github。 复制密钥文件内容（路径形如<code>C:\\Users\\Administrator\\.ssh\\id_rsa.pub</code>），粘贴到<a href=\"https://github.com/settings/keys\" target=\"_blank\" rel=\"noopener\">New SSH Key</a>即可。</p>\n</li>\n<li><p>测试是否添加成功。在命令行（即Git Bash）依次输入以下命令，返回“You’ve successfully authenticated”即成功：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ssh -T git@github.com</span><br><span class=\"line\">$ yes</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>4.3. 修改<code>_config.yml</code>（在站点目录下）。文件末尾修改为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Deployment</span><br><span class=\"line\">## Docs: https://hexo.io/docs/deployment.html</span><br><span class=\"line\">deploy:</span><br><span class=\"line\">  type: git</span><br><span class=\"line\">  repo: root@xxx.xxx.xxx.xxx:/usr/local/hexoRepo/hexo  //用户名@域名或 IP 地址:/usr/local/hexoRepo/hexo</span><br><span class=\"line\">  branch: master</span><br></pre></td></tr></table></figure>\n<p>注意：上面仓库地址写ssh地址，不写http地址。</p>\n<p>4.4. 推送到GithubPages。在命令行（即Git Bash）依次输入以下命令， 返回<code>INFO Deploy done: git</code>即成功推送：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo g</span><br><span class=\"line\">$ hexo d</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>等待1分钟左右，浏览器访问个人域名。</p>\n<p>至此，您的Hexo博客已经搭建在云服务器, 域名为个人域名。</p>\n</li>\n</ol>\n<h3 id=\"主题优化\"><a href=\"#主题优化\" class=\"headerlink\" title=\"主题优化\"></a>主题优化</h3><h4 id=\"选择主题\"><a href=\"#选择主题\" class=\"headerlink\" title=\"选择主题\"></a>选择主题</h4><p>Hexo默认的主题是landscape，推荐以下主题：</p>\n<ol>\n<li><a href=\"https://github.com/shenliyang/hexo-theme-snippet#hexo-theme-snippet\" target=\"_blank\" rel=\"noopener\">snippet</a></li>\n<li><a href=\"https://github.com/iTimeTraveler/hexo-theme-hiero#hiero\" target=\"_blank\" rel=\"noopener\">Hiero</a></li>\n<li><a href=\"https://github.com/tangkunyin/hexo-theme-jsimple#jsimple\" target=\"_blank\" rel=\"noopener\">JSimple</a></li>\n<li><a href=\"https://github.com/chaooo/hexo-theme-BlueLake#bluelake\" target=\"_blank\" rel=\"noopener\">BlueLake</a></li>\n</ol>\n<h4 id=\"应用主题\"><a href=\"#应用主题\" class=\"headerlink\" title=\"应用主题\"></a>应用主题</h4><ol>\n<li>下载主题</li>\n<li>将下载好的主题文件夹，粘贴到站点目录的<code>themes</code>下。</li>\n<li>更改站点配置文件<code>_config.yml</code> 的theme字段，为主题文件夹的名称：</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Extensions</span><br><span class=\"line\">## Plugins: https://hexo.io/plugins/</span><br><span class=\"line\">## Themes: https://hexo.io/themes/</span><br><span class=\"line\">theme: &lt;主题文件夹的名称&gt;</span><br></pre></td></tr></table></figure>\n<h4 id=\"主题优化-1\"><a href=\"#主题优化-1\" class=\"headerlink\" title=\"主题优化\"></a>主题优化</h4><p>以上主题都有比较详细的说明文档，本节主要解决主题优化的常见问题。</p>\n<p>主题优化一般包括：</p>\n<ul>\n<li><p><strong>设置「RSS」</strong></p>\n</li>\n<li><p><strong>添加「标签」页面</strong></p>\n</li>\n<li><p><strong>添加「分类」页面</strong></p>\n</li>\n<li><p><strong>设置「字体」</strong></p>\n<p>问题：引用国外字体镜像较慢。</p>\n<p>解决：可以改用国内的。将\\themes*\\layout_partials\\head external-fonts.swig文件中fonts.google.com改成fonts.lug.ustc.edu.cn。</p>\n</li>\n<li><p><strong>设置「代码高亮主题」</strong></p>\n</li>\n<li><p><strong>侧边栏社交链接</strong></p>\n<p>问题：图标哪里找？</p>\n<p>解决：<a href=\"https://fontawesome.com/icons?d=gallery\" target=\"_blank\" rel=\"noopener\">Font Awesome</a></p>\n</li>\n<li><p><strong>开启打赏功能</strong></p>\n<p>问题：微信支付宝二维码不美观，规格不一。</p>\n<p>解决：<a href=\"https://cli.im/weixin\" target=\"_blank\" rel=\"noopener\">在线生成二维码</a></p>\n</li>\n<li><p><strong>设置友情链接</strong></p>\n</li>\n<li><p><strong>腾讯公益404页面</strong></p>\n</li>\n<li><p><strong>站点建立时间</strong></p>\n</li>\n<li><p><strong>订阅微信公众号</strong></p>\n</li>\n<li><p><strong>设置「动画效果」</strong></p>\n<p>问题：慢，需要等待 JavaScript 脚本完全加载完毕后才会显示内容。<br>解决：将主题配置文件<code>_config.yml</code>中，use_motion字段的值设为 <code>false</code> 来关闭动画。</p>\n</li>\n<li><p><strong>设置「背景动画」</strong></p>\n</li>\n</ul>\n<p>主题优化还包括：</p>\n<h5 id=\"添加背景图\"><a href=\"#添加背景图\" class=\"headerlink\" title=\"添加背景图\"></a>添加背景图</h5><p>在 themes/*/source/css/_custom/custom.styl 中添加如下代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">body&#123;</span><br><span class=\"line\">    background:url(/images/bg.jpg);</span><br><span class=\"line\">    background-size:cover;</span><br><span class=\"line\">    background-repeat:no-repeat;</span><br><span class=\"line\">    background-attachment:fixed;</span><br><span class=\"line\">    background-position:center;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"修改Logo字体\"><a href=\"#修改Logo字体\" class=\"headerlink\" title=\"修改Logo字体\"></a>修改Logo字体</h5><p>在 <code>themes/*/source/css/_custom/custom.styl</code> 中添加如下代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@font-face &#123;</span><br><span class=\"line\">    font-family: Zitiming;</span><br><span class=\"line\">    src: url(&apos;/fonts/Zitiming.ttf&apos;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.site-title &#123;</span><br><span class=\"line\">    font-size: 40px !important;</span><br><span class=\"line\">\tfont-family: &apos;Zitiming&apos; !important;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>其中字体文件在 <code>themes/next/source/fonts</code> 目录下，里面有个 <code>.gitkeep</code> 的隐藏文件，打开写入你要保留的字体文件，比如我的是就是写入 <code>Zitiming.ttf</code> ，具体字库自己从网上下载即可。</p>\n<h5 id=\"修改内容区域的宽度\"><a href=\"#修改内容区域的宽度\" class=\"headerlink\" title=\"修改内容区域的宽度\"></a>修改内容区域的宽度</h5><p>编辑主题的 <code>source/css/_variables/custom.styl</code> 文件，新增变量：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 修改成你期望的宽度</span><br><span class=\"line\">$content-desktop = 700px</span><br><span class=\"line\"></span><br><span class=\"line\">// 当视窗超过 1600px 后的宽度</span><br><span class=\"line\">$content-desktop-large = 900px</span><br></pre></td></tr></table></figure>\n<h5 id=\"网站标题栏背景颜色\"><a href=\"#网站标题栏背景颜色\" class=\"headerlink\" title=\"网站标题栏背景颜色\"></a>网站标题栏背景颜色</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.site-meta &#123;</span><br><span class=\"line\">  background: $blue; //修改为自己喜欢的颜色</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"自定义鼠标样式\"><a href=\"#自定义鼠标样式\" class=\"headerlink\" title=\"自定义鼠标样式\"></a>自定义鼠标样式</h5><p>打开 <code>themes/*/source/css/_custom/custom.styl</code> ,在里面写下如下代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 鼠标样式</span><br><span class=\"line\">  * &#123;</span><br><span class=\"line\">      cursor: url(&quot;http://om8u46rmb.bkt.clouddn.com/sword2.ico&quot;),auto!important</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  :active &#123;</span><br><span class=\"line\">      cursor: url(&quot;http://om8u46rmb.bkt.clouddn.com/sword1.ico&quot;),auto!important</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"文章加密访问\"><a href=\"#文章加密访问\" class=\"headerlink\" title=\"文章加密访问\"></a>文章加密访问</h5><p>打开 <code>themes/*/layout/_partials/head.swig</code>文件,在 ``之前插入代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">    (function()&#123;</span><br><span class=\"line\">        if(&apos;&#123;&#123; page.password &#125;&#125;&apos;)&#123;</span><br><span class=\"line\">            if (prompt(&apos;请输入密码&apos;) !== &apos;&#123;&#123; page.password &#125;&#125;&apos;)&#123;</span><br><span class=\"line\">                alert(&apos;密码错误&apos;);</span><br><span class=\"line\">                history.back();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)();</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<p>写文章时加上<code>password: *</code>：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title: 2018</span><br><span class=\"line\">date: 2018-10-25 16:10:03</span><br><span class=\"line\">password: 123456</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure>\n<h5 id=\"实现点击出现桃心效果\"><a href=\"#实现点击出现桃心效果\" class=\"headerlink\" title=\"实现点击出现桃心效果\"></a>实现点击出现桃心效果</h5><ol>\n<li>在<code>/themes/*/source/js/src</code>下新建文件<code>click.js</code>，接着把以下粘贴到<code>click.js</code>文件中。<br>代码如下：</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">!function(e,t,a)&#123;function n()&#123;c(&quot;.heart&#123;width: 10px;height: 10px;position: fixed;background: #f00;transform: rotate(45deg);-webkit-transform: rotate(45deg);-moz-transform: rotate(45deg);&#125;.heart:after,.heart:before&#123;content: &apos;&apos;;width: inherit;height: inherit;background: inherit;border-radius: 50%;-webkit-border-radius: 50%;-moz-border-radius: 50%;position: fixed;&#125;.heart:after&#123;top: -5px;&#125;.heart:before&#123;left: -5px;&#125;&quot;),o(),r()&#125;function r()&#123;for(var e=0;e&lt;d.length;e++)d[e].alpha&lt;=0?(t.body.removeChild(d[e].el),d.splice(e,1)):(d[e].y--,d[e].scale+=.004,d[e].alpha-=.013,d[e].el.style.cssText=&quot;left:&quot;+d[e].x+&quot;px;top:&quot;+d[e].y+&quot;px;opacity:&quot;+d[e].alpha+&quot;;transform:scale(&quot;+d[e].scale+&quot;,&quot;+d[e].scale+&quot;) rotate(45deg);background:&quot;+d[e].color+&quot;;z-index:99999&quot;);requestAnimationFrame(r)&#125;function o()&#123;var t=&quot;function&quot;==typeof e.onclick&amp;&amp;e.onclick;e.onclick=function(e)&#123;t&amp;&amp;t(),i(e)&#125;&#125;function i(e)&#123;var a=t.createElement(&quot;div&quot;);a.className=&quot;heart&quot;,d.push(&#123;el:a,x:e.clientX-5,y:e.clientY-5,scale:1,alpha:1,color:s()&#125;),t.body.appendChild(a)&#125;function c(e)&#123;var a=t.createElement(&quot;style&quot;);a.type=&quot;text/css&quot;;try&#123;a.appendChild(t.createTextNode(e))&#125;catch(t)&#123;a.styleSheet.cssText=e&#125;t.getElementsByTagName(&quot;head&quot;)[0].appendChild(a)&#125;function s()&#123;return&quot;rgb(&quot;+~~(255*Math.random())+&quot;,&quot;+~~(255*Math.random())+&quot;,&quot;+~~(255*Math.random())+&quot;)&quot;&#125;var d=[];e.requestAnimationFrame=function()&#123;return e.requestAnimationFrame||e.webkitRequestAnimationFrame||e.mozRequestAnimationFrame||e.oRequestAnimationFrame||e.msRequestAnimationFrame||function(e)&#123;setTimeout(e,1e3/60)&#125;&#125;(),n()&#125;(window,document);</span><br></pre></td></tr></table></figure>\n<ol>\n<li>在<code>\\themes\\*\\layout\\_layout.swig</code>文件末尾添加：</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- 页面点击小红心 --&gt;</span><br><span class=\"line\">&lt;script type=&quot;text/javascript&quot; src=&quot;/js/src/clicklove.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<h5 id=\"静态资源压缩\"><a href=\"#静态资源压缩\" class=\"headerlink\" title=\"静态资源压缩\"></a>静态资源压缩</h5><p>在站点目录下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install gulp -g</span><br></pre></td></tr></table></figure>\n<p>安装gulp插件：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install gulp-minify-css --save</span><br><span class=\"line\">npm install gulp-uglify --save</span><br><span class=\"line\">npm install gulp-htmlmin --save</span><br><span class=\"line\">npm install gulp-htmlclean --save</span><br><span class=\"line\">npm install gulp-imagemin --save</span><br></pre></td></tr></table></figure>\n<p>在 <code>Hexo</code> 站点下新建 <code>gulpfile.js</code>文件，文件内容如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var gulp = require(&apos;gulp&apos;);</span><br><span class=\"line\">var minifycss = require(&apos;gulp-minify-css&apos;);</span><br><span class=\"line\">var uglify = require(&apos;gulp-uglify&apos;);</span><br><span class=\"line\">var htmlmin = require(&apos;gulp-htmlmin&apos;);</span><br><span class=\"line\">var htmlclean = require(&apos;gulp-htmlclean&apos;);</span><br><span class=\"line\">var imagemin = require(&apos;gulp-imagemin&apos;);</span><br><span class=\"line\">// 压缩css文件</span><br><span class=\"line\">gulp.task(&apos;minify-css&apos;, function() &#123;</span><br><span class=\"line\">  return gulp.src(&apos;./public/**/*.css&apos;)</span><br><span class=\"line\">  .pipe(minifycss())</span><br><span class=\"line\">  .pipe(gulp.dest(&apos;./public&apos;));</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">// 压缩html文件</span><br><span class=\"line\">gulp.task(&apos;minify-html&apos;, function() &#123;</span><br><span class=\"line\">  return gulp.src(&apos;./public/**/*.html&apos;)</span><br><span class=\"line\">  .pipe(htmlclean())</span><br><span class=\"line\">  .pipe(htmlmin(&#123;</span><br><span class=\"line\">    removeComments: true,</span><br><span class=\"line\">    minifyJS: true,</span><br><span class=\"line\">    minifyCSS: true,</span><br><span class=\"line\">    minifyURLs: true,</span><br><span class=\"line\">  &#125;))</span><br><span class=\"line\">  .pipe(gulp.dest(&apos;./public&apos;))</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">// 压缩js文件</span><br><span class=\"line\">gulp.task(&apos;minify-js&apos;, function() &#123;</span><br><span class=\"line\">    return gulp.src([&apos;./public/**/.js&apos;,&apos;!./public/js/**/*min.js&apos;])</span><br><span class=\"line\">        .pipe(uglify())</span><br><span class=\"line\">        .pipe(gulp.dest(&apos;./public&apos;));</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">// 压缩 public/demo 目录内图片</span><br><span class=\"line\">gulp.task(&apos;minify-images&apos;, function() &#123;</span><br><span class=\"line\">    gulp.src(&apos;./public/demo/**/*.*&apos;)</span><br><span class=\"line\">        .pipe(imagemin(&#123;</span><br><span class=\"line\">           optimizationLevel: 5, //类型：Number  默认：3  取值范围：0-7（优化等级）</span><br><span class=\"line\">           progressive: true, //类型：Boolean 默认：false 无损压缩jpg图片</span><br><span class=\"line\">           interlaced: false, //类型：Boolean 默认：false 隔行扫描gif进行渲染</span><br><span class=\"line\">           multipass: false, //类型：Boolean 默认：false 多次优化svg直到完全优化</span><br><span class=\"line\">        &#125;))</span><br><span class=\"line\">        .pipe(gulp.dest(&apos;./public/uploads&apos;));</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">// 默认任务</span><br><span class=\"line\">gulp.task(&apos;default&apos;, [</span><br><span class=\"line\">  &apos;minify-html&apos;,&apos;minify-css&apos;,&apos;minify-js&apos;,&apos;minify-images&apos;</span><br><span class=\"line\">]);</span><br></pre></td></tr></table></figure>\n<p>只需要每次在执行 <code>generate</code> 命令后执行 <code>gulp</code> 就可以实现对静态资源的压缩，压缩完成后执行 <code>deploy</code> 命令同步到服务器：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo g</span><br><span class=\"line\">gulp</span><br><span class=\"line\">hexo d</span><br></pre></td></tr></table></figure>\n<h5 id=\"修改访问URL路径\"><a href=\"#修改访问URL路径\" class=\"headerlink\" title=\"修改访问URL路径\"></a>修改访问URL路径</h5><p>默认情况下访问URL路径为：<code>domain/2018/10/18/关于本站</code>,修改为 <code>domain/About/关于本站</code>。 编辑 <code>Hexo</code> 站点下的 <code>_config.yml</code> 文件，修改其中的 <code>permalink</code>字段：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">permalink: :category/:title/</span><br></pre></td></tr></table></figure>\n<h5 id=\"博文置顶\"><a href=\"#博文置顶\" class=\"headerlink\" title=\"博文置顶\"></a>博文置顶</h5><ol>\n<li><p>安装插件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm uninstall hexo-generator-index –save</span><br><span class=\"line\">$ npm install hexo-generator-index-pin-top –save</span><br></pre></td></tr></table></figure>\n<p>然后在需要置顶的文章的Front-matter中加上top即可：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title: 2018</span><br><span class=\"line\">date: 2018-10-25 16:10:03</span><br><span class=\"line\">top: 10</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>设置置顶标志</p>\n<p>打开：/themes/*/layout/_macro/post.swig，定位到<code>&lt;div class=&quot;post-meta&quot;&gt;</code>标签下，在此便签下行，插入如下代码：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&#123;%</span> <span class=\"string\">if</span> <span class=\"string\">post.top</span> <span class=\"string\">%&#125;</span></span><br><span class=\"line\">  <span class=\"string\">&lt;i</span> <span class=\"string\">class=\"fa</span> <span class=\"string\">fa-thumb-tack\"&gt;&lt;/i&gt;</span></span><br><span class=\"line\">  <span class=\"string\">&lt;font</span> <span class=\"string\">color=7D26CD&gt;置顶&lt;/font&gt;</span></span><br><span class=\"line\">  <span class=\"string\">&lt;span</span> <span class=\"string\">class=\"post-meta-divider\"&gt;|&lt;/span&gt;</span></span><br><span class=\"line\"><span class=\"string\">&#123;%</span> <span class=\"string\">endif</span> <span class=\"string\">%&#125;</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h5 id=\"在右上角或者左上角实现fork-me-on-github\"><a href=\"#在右上角或者左上角实现fork-me-on-github\" class=\"headerlink\" title=\"在右上角或者左上角实现fork me on github\"></a>在右上角或者左上角实现fork me on github</h5><ol>\n<li>选择样式<a href=\"https://blog.github.com/2008-12-19-github-ribbons/\" target=\"_blank\" rel=\"noopener\">GitHub Ribbons</a>,</li>\n<li>修改图片跳转链接,将<code>&lt;a href=&quot;https://github.com/you&quot;&gt;</code>中的链接换为自己Github链接：</li>\n<li>打开 <code>themes/next/layout/_layout.swig</code> 文件，把代码复制到<code>&lt;div class=&quot;headband&quot;&gt;&lt;/div&gt;</code>下面。</li>\n</ol>\n<h5 id=\"主页文章添加边框阴影效果\"><a href=\"#主页文章添加边框阴影效果\" class=\"headerlink\" title=\"主页文章添加边框阴影效果\"></a>主页文章添加边框阴影效果</h5><p>打开 <code>themes/*/source/css/_custom/custom.styl</code> ,向里面加代码:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 主页文章添加阴影效果</span><br><span class=\"line\">.post &#123;</span><br><span class=\"line\">   margin-top: 0px;</span><br><span class=\"line\">   margin-bottom: 60px;</span><br><span class=\"line\">   padding: 25px;</span><br><span class=\"line\">   -webkit-box-shadow: 0 0 5px rgba(202, 203, 203, .5);</span><br><span class=\"line\">   -moz-box-shadow: 0 0 5px rgba(202, 203, 204, .5);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"显示当前浏览进度\"><a href=\"#显示当前浏览进度\" class=\"headerlink\" title=\"显示当前浏览进度\"></a>显示当前浏览进度</h5><p>修改<code>themes/*/_config.yml</code>，把 <code>false</code> 改为 <code>true</code>：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Back to top in sidebar</span><br><span class=\"line\">b2t: true</span><br><span class=\"line\"></span><br><span class=\"line\"># Scroll percent label in b2t button</span><br><span class=\"line\">scrollpercent: true</span><br></pre></td></tr></table></figure>\n<h5 id=\"创建分类页\"><a href=\"#创建分类页\" class=\"headerlink\" title=\"创建分类页\"></a>创建分类页</h5><p>在终端窗口下，定位到 <code>Hexo</code> 站点目录下，新建：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cd &lt;站点目录&gt;</span><br><span class=\"line\">$ hexo new page categories</span><br></pre></td></tr></table></figure>\n<h5 id=\"加入-广告\"><a href=\"#加入-广告\" class=\"headerlink\" title=\"加入 广告\"></a>加入 广告</h5><p>主要有两种：<a href=\"https://ssp.baidu.com/static/register.html\" target=\"_blank\" rel=\"noopener\">百度SSP</a>和<a href=\"https://www.google.com/adsense/start/#/?modal_active=none\" target=\"_blank\" rel=\"noopener\">谷歌Adsense</a>。方法类似：</p>\n<ol>\n<li><p>注册，复制广告代码</p>\n</li>\n<li><p>部署到网站。</p>\n<p>2.1. 新建 <code>theme/*/layout/_custom/google_ad.swig</code>，将 AdSense 上的代码粘贴进去</p>\n<p>2.2. 头部。在 <code>theme/*/layout/_custom/head.swig</code> 中也粘贴一份</p>\n<p>2.3. 每篇博客。在 <code>theme/*/layout/post.swig</code> 里中在希望看到的地方加上：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% include &apos;_custom/google_ad.swig&apos; %&#125;</span><br></pre></td></tr></table></figure>\n<p>例如：在 <code>&lt;div id=&quot;posts&quot; class=&quot;posts-expand&quot;&gt; &lt;/div&gt;</code> 中间插入，总代码如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% block content %&#125;</span><br><span class=\"line\">  &lt;div id=&quot;posts&quot; class=&quot;posts-expand&quot;&gt;</span><br><span class=\"line\">    &#123;&#123; post_template.render(page) &#125;&#125;</span><br><span class=\"line\">    &#123;% include &apos;_custom/google_ad.swig&apos; %&#125;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>等待审核通过。如果失败，可再次申请。</p>\n</li>\n</ol>\n<h5 id=\"添加萌萌哒\"><a href=\"#添加萌萌哒\" class=\"headerlink\" title=\"添加萌萌哒\"></a>添加萌萌哒</h5><ol>\n<li><p>安装插件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --save hexo-helper-live2d</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>复制你喜欢的模型名字：</p>\n<p>Epsilon2.1</p>\n<p><a href=\"https://huaji8.top/img/live2d/Epsilon2.1.gif\" target=\"_blank\" rel=\"noopener\"><img src=\"Epsilon2.1.gif\" alt=\"img\"></a></p>\n<p>Gantzert_Felixander</p>\n<p><a href=\"https://huaji8.top/img/live2d/Gantzert_Felixander.gif\" target=\"_blank\" rel=\"noopener\"><img src=\"Gantzert_Felixander.gif\" alt=\"img\"></a></p>\n<p>haru</p>\n<p><a href=\"https://huaji8.top/img/live2d/haru.gif\" target=\"_blank\" rel=\"noopener\"><img src=\"haru.gif\" alt=\"img\"></a></p>\n<p>miku</p>\n<p><a href=\"https://huaji8.top/img/live2d/miku.gif\" target=\"_blank\" rel=\"noopener\"><img src=\"miku.gif\" alt=\"img\"></a></p>\n<p>ni-j</p>\n<p><a href=\"https://huaji8.top/img/live2d/ni-j.gif\" target=\"_blank\" rel=\"noopener\"><img src=\"ni-j.gif\" alt=\"img\"></a></p>\n<p>nico</p>\n<p><a href=\"https://huaji8.top/img/live2d/nico.gif\" target=\"_blank\" rel=\"noopener\"><img src=\"nico.gif\" alt=\"img\"></a></p>\n<p>nietzche</p>\n<p><a href=\"https://huaji8.top/img/live2d/nietzche.gif\" target=\"_blank\" rel=\"noopener\"><img src=\"nietzche.gif\" alt=\"img\"></a></p>\n<p>nipsilon</p>\n<p><a href=\"https://huaji8.top/img/live2d/nipsilon.gif\" target=\"_blank\" rel=\"noopener\"><img src=\"nipsilon.gif\" alt=\"img\"></a></p>\n<p>nito</p>\n<p><a href=\"https://huaji8.top/img/live2d/nito.gif\" target=\"_blank\" rel=\"noopener\"><img src=\"nito.gif\" alt=\"img\"></a></p>\n<p>shizuku</p>\n<p><a href=\"https://huaji8.top/img/live2d/shizuku.gif\" target=\"_blank\" rel=\"noopener\"><img src=\"shizuku.gif\" alt=\"img\"></a></p>\n<p>tsumiki</p>\n<p><a href=\"https://huaji8.top/img/live2d/tsumiki.gif\" target=\"_blank\" rel=\"noopener\"><img src=\"tsumiki.gif\" alt=\"img\"></a></p>\n<p>wanko</p>\n<p><a href=\"https://huaji8.top/img/live2d/wanko.gif\" target=\"_blank\" rel=\"noopener\"><img src=\"wanko.gif\" alt=\"img\"></a></p>\n<p>z16</p>\n<p><a href=\"https://huaji8.top/img/live2d/z16.gif\" target=\"_blank\" rel=\"noopener\"><img src=\"z16.gif\" alt=\"img\"></a></p>\n<p>hibiki</p>\n<p><a href=\"https://huaji8.top/img/live2d/hibiki.gif\" target=\"_blank\" rel=\"noopener\"><img src=\"hibiki.gif\" alt=\"img\"></a></p>\n<p>koharu</p>\n<p><a href=\"https://huaji8.top/img/live2d/koharu.gif\" target=\"_blank\" rel=\"noopener\"><img src=\"koharu.gif\" alt=\"img\"></a></p>\n<p>haruto</p>\n<p><a href=\"https://huaji8.top/img/live2d/haruto.gif\" target=\"_blank\" rel=\"noopener\"><img src=\"haruto.gif\" alt=\"img\"></a></p>\n<p>Unitychan</p>\n<p><a href=\"https://huaji8.top/img/live2d/Unitychan.gif\" target=\"_blank\" rel=\"noopener\"><img src=\"Unitychan.gif\" alt=\"img\"></a></p>\n<p>tororo</p>\n<p><a href=\"https://huaji8.top/img/live2d/tororo.gif\" target=\"_blank\" rel=\"noopener\"><img src=\"tororo.gif\" alt=\"img\"></a></p>\n<p>hijiki</p>\n<p><a href=\"https://huaji8.top/img/live2d/hijiki.gif\" target=\"_blank\" rel=\"noopener\"><img src=\"hijiki.gif\" alt=\"img\"></a></p>\n</li>\n<li><p>将以下代码添加到主题配置文件<code>_config.yml</code>，修改&lt;你喜欢的模型名字&gt;：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">live2d:</span><br><span class=\"line\">  enable: true</span><br><span class=\"line\">  scriptFrom: local</span><br><span class=\"line\">  pluginRootPath: live2dw/</span><br><span class=\"line\">  pluginJsPath: lib/</span><br><span class=\"line\">  pluginModelPath: assets/</span><br><span class=\"line\">  tagMode: false</span><br><span class=\"line\">  log: false</span><br><span class=\"line\">  model:</span><br><span class=\"line\">    use: live2d-widget-model-&lt;你喜欢的模型名字&gt;</span><br><span class=\"line\">  display:</span><br><span class=\"line\">    position: right</span><br><span class=\"line\">    width: 150</span><br><span class=\"line\">    height: 300</span><br><span class=\"line\">  mobile:</span><br><span class=\"line\">    show: true</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>建配置文件</p>\n<p>4.1. 在站点目录下建文件夹<code>live2d_models</code>，</p>\n<p>4.2. 再在<code>live2d_models</code>下建文件夹<code>&lt;你喜欢的模型名字&gt;</code>,</p>\n<p>4.3. 再在<code>&lt;你喜欢的模型名字&gt;</code>下建json文件：&lt;你喜欢的模型名字&gt;.model.json</p>\n</li>\n<li><p>安装模型。在命令行（即Git Bash）运行以下命令即可：</p>\n<blockquote>\n<p>npm install –save live2d-widget-model-&lt;你喜欢的模型名字&gt;</p>\n</blockquote>\n</li>\n<li><p>在命令行（即Git Bash）运行以下命令， 在<code>http://127.0.0.1:4000/</code>查看测试结果:</p>\n<blockquote>\n<p>hexo clean &amp;&amp; hexo g &amp;&amp; hexo s</p>\n</blockquote>\n</li>\n</ol>\n<h3 id=\"插件配置\"><a href=\"#插件配置\" class=\"headerlink\" title=\"插件配置\"></a>插件配置</h3><p>以下插件（评论系统、数据统计与分析、内容分享服务、搜索服务）各选一个即可。</p>\n<h4 id=\"评论系统\"><a href=\"#评论系统\" class=\"headerlink\" title=\"评论系统\"></a>评论系统</h4><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th></th>\n<th>推荐指数</th>\n<th>优点</th>\n<th>缺点</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"https://valine.js.org/\" target=\"_blank\" rel=\"noopener\">Valine</a></td>\n<td>4</td>\n<td>每天30000条评论，10GB的储存</td>\n<td>作者评论无标识</td>\n</tr>\n<tr>\n<td><a href=\"https://livere.com/\" target=\"_blank\" rel=\"noopener\">来必力/livere</a></td>\n<td>4</td>\n<td>多种账号登录</td>\n<td>评论无法导出</td>\n</tr>\n<tr>\n<td><a href=\"http://changyan.kuaizhan.com/\" target=\"_blank\" rel=\"noopener\">畅言</a></td>\n<td>3</td>\n<td>美观</td>\n<td>必须备案域名</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/imsun/gitment\" target=\"_blank\" rel=\"noopener\">gitment</a></td>\n<td>3</td>\n<td>简洁</td>\n<td>只能登陆github评论</td>\n</tr>\n<tr>\n<td>Disqus</td>\n<td>1</td>\n<td></td>\n<td>需要翻*墙</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h5 id=\"Valine\"><a href=\"#Valine\" class=\"headerlink\" title=\"Valine\"></a>Valine</h5><p>1.1. 获取APP ID 和 APP Key</p>\n<p>请先登录或注册 <a href=\"https://leancloud.cn/\" target=\"_blank\" rel=\"noopener\">LeanCloud</a>, 进入控制台后点击左下角创建应用，</p>\n<p>进入刚刚创建的应用，选择左下角的<code>设置</code>&gt;<code>应用Key</code>，然后就能看到你的<code>APP ID</code>和<code>APP Key</code>了。</p>\n<p>1.2. 填写APP ID 和 APP Key到主题配置文件<code>_config.yml</code></p>\n<p>1.3. 运行<code>hexo g&amp;&amp;hexo d</code>推送到博客。</p>\n<h5 id=\"来必力-livere\"><a href=\"#来必力-livere\" class=\"headerlink\" title=\"来必力/livere\"></a>来必力/livere</h5><p>2.1. 登陆 <a href=\"https://livere.com/\" target=\"_blank\" rel=\"noopener\">来必力</a> 获取你的 LiveRe UID。</p>\n<p>2.2. 填写LiveRe UID到主题配置文件<code>_config.yml</code></p>\n<h5 id=\"畅言\"><a href=\"#畅言\" class=\"headerlink\" title=\"畅言\"></a>畅言</h5><p>3.1.获取APP ID 和 APP Key</p>\n<p>请先登录或注册 <a href=\"http://changyan.kuaizhan.com/\" target=\"_blank\" rel=\"noopener\">畅言</a>, 点击“立即免费获取畅言”，</p>\n<p>新建站点，点击管理，点击评论插件&gt;评论管理，</p>\n<p>点击后台总览，然后就能看到你的<code>APP ID</code>和<code>APP Key</code>了。</p>\n<p>3.2. 填写APP ID 和 APP Key到主题配置文件<code>_config.yml</code></p>\n<p>3.3. 运行<code>hexo g&amp;&amp;hexo d</code>推送到博客。</p>\n<h5 id=\"gitment\"><a href=\"#gitment\" class=\"headerlink\" title=\"gitment\"></a>gitment</h5><p>4.1. 安装插件：</p>\n<blockquote>\n<p>npm i –save gitment</p>\n</blockquote>\n<p>4.2. 申请应用</p>\n<p>在<a href=\"https://github.com/settings/applications/new\" target=\"_blank\" rel=\"noopener\">New OAuth App</a>为你的博客应用一个密钥:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Application name:随便写</span><br><span class=\"line\">Homepage URL:这个也可以随意写,就写你的博客地址就行</span><br><span class=\"line\">Application description:描述,也可以随意写</span><br><span class=\"line\">Authorization callback URL:这个必须写你的博客地址</span><br></pre></td></tr></table></figure>\n<p>4.3. 配置</p>\n<p>编辑主题配置文件<code>themes/*/_config.yml</code>:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Gitment</span><br><span class=\"line\"># Introduction: https://imsun.net/posts/gitment-introduction/</span><br><span class=\"line\">gitment:</span><br><span class=\"line\">  enable: true</span><br><span class=\"line\">  mint: true # RECOMMEND, A mint on Gitment, to support count, language and proxy_gateway</span><br><span class=\"line\">  count: true # Show comments count in post meta area</span><br><span class=\"line\">  lazy: false # Comments lazy loading with a button</span><br><span class=\"line\">  cleanly: false # Hide &apos;Powered by ...&apos; on footer, and more</span><br><span class=\"line\">  language: # Force language, or auto switch by theme</span><br><span class=\"line\">  github_user: &#123;you github user id&#125;</span><br><span class=\"line\">  github_repo: 公开的git仓库,评论会作为那个项目的issue</span><br><span class=\"line\">  client_id: &#123;刚才申请的ClientID&#125;</span><br><span class=\"line\">  client_secret: &#123;刚才申请的Client Secret&#125;</span><br><span class=\"line\">  proxy_gateway: # Address of api proxy, See: https://github.com/aimingoo/intersect</span><br><span class=\"line\">  redirect_protocol: # Protocol of redirect_uri with force_redirect_pro</span><br></pre></td></tr></table></figure>\n<h5 id=\"Disqus\"><a href=\"#Disqus\" class=\"headerlink\" title=\"Disqus\"></a>Disqus</h5><p>编辑 主题配置文件<code>themes/*/_config.yml</code>， 将 disqus 下的 enable 设定为 true，同时提供您的 shortname。count 用于指定是否显示评论数量。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">disqus:</span><br><span class=\"line\">  enable: false</span><br><span class=\"line\">  shortname:</span><br><span class=\"line\">  count: true</span><br></pre></td></tr></table></figure>\n<h4 id=\"数据统计与分析\"><a href=\"#数据统计与分析\" class=\"headerlink\" title=\"数据统计与分析\"></a>数据统计与分析</h4><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th></th>\n<th>推荐指数</th>\n<th>优点</th>\n<th>缺点</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"http://ibruce.info/2015/04/04/busuanzi/\" target=\"_blank\" rel=\"noopener\">不蒜子</a></td>\n<td>4</td>\n<td>可直接将访问次数显示在您在网页上（也可不显示）</td>\n<td>只计数</td>\n</tr>\n<tr>\n<td>百度统计</td>\n<td>3</td>\n<td></td>\n<td>收录慢</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h5 id=\"不蒜子\"><a href=\"#不蒜子\" class=\"headerlink\" title=\"不蒜子\"></a>不蒜子</h5><p>编辑 主题配置文件 <code>themes/*/_config.yml</code>中的<code>busuanzi_count</code>的配置项即可。</p>\n<ul>\n<li>当<code>enable: true</code>时，代表开启全局开关。</li>\n<li>若<code>site_uv</code>（本站访客数）、<code>site_pv</code>（本站访客数）、<code>page_pv</code>（本文总阅读量）的值均为<code>false</code>时，不蒜子仅作记录而不会在页面上显示。</li>\n</ul>\n<p>注意：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">不蒜子官方因七牛强制过期原有的『dn-lbstatics.qbox.me』域名（预计2018年10月初），与客服沟通数次无果，即使我提出为此付费也不行，只能更换域名到『busuanzi.ibruce.info』！</span><br></pre></td></tr></table></figure>\n<p>解决办法：</p>\n<ol>\n<li><p>找到主题调用不蒜子的swig文件。一般在”\\themes*\\layout_third-party\\analytics\\busuanzi-counter.swig”</p>\n</li>\n<li><p>更改域名</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">把原有的：</span><br><span class=\"line\">&lt;script async src=&quot;\u0001\u0001//dn-lbstatics.qbox.me/busuanzi/2.3/busuanzi.pure.mini.js\u0002\u0002&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">域名改一下即可：</span><br><span class=\"line\">&lt;script async src=&quot;\u0001\u0001//busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js\u0002\u0002&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h5 id=\"百度统计\"><a href=\"#百度统计\" class=\"headerlink\" title=\"百度统计\"></a>百度统计</h5><ol>\n<li><p>登录 <a href=\"http://tongji.baidu.com/\" target=\"_blank\" rel=\"noopener\">百度统计</a>，定位到站点的代码获取页面</p>\n</li>\n<li><p>复制统计脚本 id，如图：</p>\n<p><a href=\"http://theme-next.iissnan.com/uploads/five-minutes-setup/analytics-baidu-id.png\" target=\"_blank\" rel=\"noopener\"><img src=\"analytics-baidu-id.png\" alt=\"img\"></a></p>\n</li>\n<li><p>编辑 主题配置文件<code>themes/*/_config.yml</code>，修改字段 <code>google_analytics</code>，值设置成你的统计脚本 id。</p>\n</li>\n</ol>\n<h4 id=\"内容分享服务\"><a href=\"#内容分享服务\" class=\"headerlink\" title=\"内容分享服务\"></a>内容分享服务</h4><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th></th>\n<th>推荐指数</th>\n<th>优点</th>\n<th>缺点</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"http://share.baidu.com/\" target=\"_blank\" rel=\"noopener\">百度分享</a></td>\n<td>4</td>\n<td>稳定</td>\n<td>不太美观</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/revir/need-more-share2\" target=\"_blank\" rel=\"noopener\">need-more-share2</a></td>\n<td>4</td>\n<td>美观</td>\n<td>更新不及时（比如微信分享API）</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h5 id=\"百度分享\"><a href=\"#百度分享\" class=\"headerlink\" title=\"百度分享\"></a>百度分享</h5><p>编辑 主题配置文件，添加/修改字段 <code>baidushare</code>，值为 <code>true</code>即可。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 百度分享服务</span><br><span class=\"line\">baidushare: true</span><br></pre></td></tr></table></figure>\n<h5 id=\"need-more-share2\"><a href=\"#need-more-share2\" class=\"headerlink\" title=\"need-more-share2\"></a>need-more-share2</h5><p>编辑 主题配置文件，添加/修改字段 <code>needmoreshare2</code>，值为 <code>true</code>即可。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">needmoreshare2:</span><br><span class=\"line\">  enable: true</span><br></pre></td></tr></table></figure>\n<h4 id=\"搜索服务\"><a href=\"#搜索服务\" class=\"headerlink\" title=\"搜索服务\"></a>搜索服务</h4><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th></th>\n<th>推荐指数</th>\n<th>优点</th>\n<th>缺点</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Local Search</td>\n<td>4</td>\n<td>配置方便</td>\n<td></td>\n</tr>\n<tr>\n<td>Swiftype</td>\n<td>2</td>\n<td></td>\n<td>需注册</td>\n</tr>\n<tr>\n<td>Algolia</td>\n<td>2</td>\n<td></td>\n<td>需注册</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h5 id=\"Local-Search\"><a href=\"#Local-Search\" class=\"headerlink\" title=\"Local Search\"></a>Local Search</h5><p>添加百度/谷歌/本地 自定义站点内容搜索</p>\n<ol>\n<li><p>安装 <code>hexo-generator-searchdb</code>，在站点的根目录下执行以下命令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install hexo-generator-searchdb --save</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>编辑 站点配置文件，新增以下内容到任意位置：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">search:</span><br><span class=\"line\">  path: search.xml</span><br><span class=\"line\">  field: post</span><br><span class=\"line\">  format: html</span><br><span class=\"line\">  limit: 10000</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>编辑 主题配置文件，启用本地搜索功能：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Local search</span><br><span class=\"line\">local_search:</span><br><span class=\"line\">  enable: true</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h3 id=\"错误分析\"><a href=\"#错误分析\" class=\"headerlink\" title=\"错误分析\"></a>错误分析</h3><p>如果你使用Hexo遇到同样的问题,这里有一些常见问题的解决方案。</p>\n<h4 id=\"YAML-Parsing-Error\"><a href=\"#YAML-Parsing-Error\" class=\"headerlink\" title=\"YAML Parsing Error\"></a>YAML Parsing Error</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">JS-YAML: incomplete explicit mapping pair; a key node is missed at line 18, column 29:</span><br><span class=\"line\">      last_updated: Last updated: %s</span><br></pre></td></tr></table></figure>\n<ol>\n<li>参数中包含冒号，请用加引号，如<code>Last updated: %s</code></li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">JS-YAML: bad indentation of a mapping entry at line 18, column 31:</span><br><span class=\"line\">      last_updated：&quot;Last updated: %s&quot;</span><br></pre></td></tr></table></figure>\n<ol>\n<li>字段后面的冒号必须为<strong>英文冒号</strong>，如：last_updated:</li>\n<li>字段冒号后面必须跟一个空格，如：last_updated: “Last updated: %s”</li>\n</ol>\n<h4 id=\"EMFILE-Error\"><a href=\"#EMFILE-Error\" class=\"headerlink\" title=\"EMFILE Error\"></a>EMFILE Error</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Error: EMFILE, too many open files</span><br></pre></td></tr></table></figure>\n<p>生成大量的文件时，可能遇到EMFILE错误。</p>\n<p>可以运行以下命令来增加允许同步I / O操作的数量。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ulimit -n 10000</span><br></pre></td></tr></table></figure>\n<h4 id=\"Process-Out-of-Memory\"><a href=\"#Process-Out-of-Memory\" class=\"headerlink\" title=\"Process Out of Memory\"></a>Process Out of Memory</h4><p>当<code>hexo g</code>时，遇到以下错误：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FATAL ERROR: CALL_AND_RETRY_LAST Allocation failed - process out of memory</span><br></pre></td></tr></table></figure>\n<p>如下，更改<code>hexo-cli</code>文件的第一行，来增大nodejs堆内存.该bug已在<a href=\"https://github.com/hexojs/hexo/issues/1735\" target=\"_blank\" rel=\"noopener\">新版本</a>修复。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/usr/bin/env node --max_old_space_size=8192</span><br></pre></td></tr></table></figure>\n<h4 id=\"Git-Deployment-Problems\"><a href=\"#Git-Deployment-Problems\" class=\"headerlink\" title=\"Git Deployment Problems\"></a>Git Deployment Problems</h4><ol>\n<li><p><strong>RPC failed</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">error: RPC failed; result=22, HTTP code = 403</span><br><span class=\"line\"></span><br><span class=\"line\">fatal: &apos;username.github.io&apos; does not appear to be a git repository</span><br></pre></td></tr></table></figure>\n<p>确保你有你的电脑上设置git正确或尝试使用HTTPS存储库URL。</p>\n</li>\n<li><p><strong>Error: ENOENT: no such file or directory</strong></p>\n</li>\n</ol>\n<p>这个需要有一定的git的知识，因为可能是由于写错了标签,类别,或文件名，导致本地和github冲突了，Git不能自动合并这一变化所以它打破了自动分支。</p>\n<p><strong>解决办法：</strong></p>\n<ol>\n<li>检查文章的标签和类别,确保本地和github上是相同的。</li>\n<li>合并分支（Commit）。</li>\n<li>清除，重构。在站点目录下，命令行（即Git Bash）运行<code>hexo clean</code>和<code>hexo g</code></li>\n<li>手动将站点目录下的<code>public</code>文件夹复制到您的桌面</li>\n<li>从你的master分支切换到部署在本地分支。</li>\n<li>从桌面复制<code>public</code>文件夹到本地分支。</li>\n<li>合并分支到github（Commit）。</li>\n<li>切回master分支。</li>\n</ol>\n<h4 id=\"Server-Problems\"><a href=\"#Server-Problems\" class=\"headerlink\" title=\"Server Problems\"></a>Server Problems</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Error: listen EADDRINUSE</span><br></pre></td></tr></table></figure>\n<p>你可能使用相同的端口，同时开启了两个Hexo服务器。如果需要同时开启，可以尝试修改端口设置：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server -p 5000</span><br></pre></td></tr></table></figure>\n<h4 id=\"Plugin-Installation-Problems\"><a href=\"#Plugin-Installation-Problems\" class=\"headerlink\" title=\"Plugin Installation Problems\"></a>Plugin Installation Problems</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm ERR! node-waf configure build</span><br></pre></td></tr></table></figure>\n<p>这个错误可能发生在试图安装一个用Cc++或另一个javascript语言编写的插件。确保您已经安装了正确的编译器在您的计算机上。</p>\n<h4 id=\"Error-with-DTrace-Mac-OS-X\"><a href=\"#Error-with-DTrace-Mac-OS-X\" class=\"headerlink\" title=\"Error with DTrace (Mac OS X)\"></a>Error with DTrace (Mac OS X)</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123; [Error: Cannot find module &apos;./build/Release/DTraceProviderBindings&apos;] code: &apos;MODULE_NOT_FOUND&apos; &#125;</span><br><span class=\"line\">&#123; [Error: Cannot find module &apos;./build/default/DTraceProviderBindings&apos;] code: &apos;MODULE_NOT_FOUND&apos; &#125;</span><br><span class=\"line\">&#123; [Error: Cannot find module &apos;./build/Debug/DTraceProviderBindings&apos;] code: &apos;MODULE_NOT_FOUND&apos; &#125;</span><br></pre></td></tr></table></figure>\n<p>DTrace安装可能有问题，重装:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install hexo --no-optional</span><br></pre></td></tr></table></figure>\n<p>详见 <a href=\"https://github.com/hexojs/hexo/issues/1326#issuecomment-113871796\" target=\"_blank\" rel=\"noopener\">#1326</a></p>\n<h4 id=\"Iterate-Data-Model-on-Jade-or-Swig\"><a href=\"#Iterate-Data-Model-on-Jade-or-Swig\" class=\"headerlink\" title=\"Iterate Data Model on Jade or Swig\"></a>Iterate Data Model on Jade or Swig</h4><p>Hexo使用仓库的数据模型。这不是一个数组,所以你可能需要将对象转换为iterable。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% for post in site.posts.toArray() %&#125;</span><br><span class=\"line\">&#123;% endfor %&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"Data-Not-Updated\"><a href=\"#Data-Not-Updated\" class=\"headerlink\" title=\"Data Not Updated\"></a>Data Not Updated</h4><p>一些数据不能更新或新生成的文件的最后一个版本完全相同。清理缓存，再试一次：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo clean</span><br></pre></td></tr></table></figure>\n<h4 id=\"No-command-is-executed\"><a href=\"#No-command-is-executed\" class=\"headerlink\" title=\"No command is executed\"></a>No command is executed</h4><p>那个不能使用除<code>help</code>、<code>init</code>和<code>version</code>以外的命令行（即Git Bash）时, 有可能时站点目录下的<code>package.json</code>文件，缺少<code>hexo</code> ，如下:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;hexo&quot;: &#123;</span><br><span class=\"line\">    &quot;version&quot;: &quot;3.2.2&quot;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"Escape-Contents\"><a href=\"#Escape-Contents\" class=\"headerlink\" title=\"Escape Contents\"></a>Escape Contents</h4><p>Hexo使用Nunjucks渲染的页面. <code>{ { } }</code>或<code>{ % % }</code>将解析和可能会引起麻烦， 如果要在博文中出现，必须使用三引号：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Hello &#123;&#123; sensitive &#125;&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#### ENOSPC Error (Linux)</span><br><span class=\"line\"></span><br><span class=\"line\">如果运行命令`$ hexo server` 返回一个错误:</span><br><span class=\"line\">Error: watch ENOSPC …</span><br><span class=\"line\">可以通过运行`$ npm dedupe`或者以下命令行（即Git Bash）：</span><br><span class=\"line\">$ echo fs.inotify.max_user_watches=524288 | sudo tee -a /etc/sysctl.conf &amp;&amp; sudo sysctl -p</span><br><span class=\"line\">来增加测试时，你可以看见的文件数量。</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#### EMPERM Error (Windows Subsystem for Linux)</span><br><span class=\"line\"></span><br><span class=\"line\">如果在Windows Subsystem for Linux，运行命令`$ hexo server` 返回这个错误:</span><br><span class=\"line\">Error: watch /path/to/hexo/theme/ EMPERM</span><br><span class=\"line\"></span><br><span class=\"line\">因为目前在Windows Subsystem for Linux中，有些内容更改时，还不能实时更新到hexo服务器。</span><br><span class=\"line\">所以需要重新编译，再启动服务器：</span><br><span class=\"line\">$ hexo generate</span><br><span class=\"line\">$ hexo server -s</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#### Template render error</span><br><span class=\"line\"></span><br><span class=\"line\">有时运行命令`$ hexo generate` 返回一个错误:</span><br><span class=\"line\">FATAL Something’s wrong. Maybe you can find the solution here: http://hexo.io/docs/troubleshooting.html</span><br><span class=\"line\">Template render error: (unknown path)</span><br><span class=\"line\"></span><br><span class=\"line\">这意味着有些认不出来单词在你的文件，并且很可能在你的新博文,或者配置文件`_config.yml`中，比如缩进错误：</span><br></pre></td></tr></table></figure>\n<h3 id=\"常用操作\"><a href=\"#常用操作\" class=\"headerlink\" title=\"常用操作\"></a>常用操作</h3><h4 id=\"创建文章\"><a href=\"#创建文章\" class=\"headerlink\" title=\"创建文章\"></a>创建文章</h4><p>命令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new [layout] &lt;title&gt;</span><br></pre></td></tr></table></figure>\n<p>参数说明：</p>\n<ul>\n<li>[layout]可以为以下三种：</li>\n</ul>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>参数名</th>\n<th>功能</th>\n<th>文章路径</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>post</td>\n<td>新建博文</td>\n<td>source/_posts</td>\n</tr>\n<tr>\n<td>page</td>\n<td>新建页面（如404，分类）</td>\n<td>source</td>\n</tr>\n<tr>\n<td>draft</td>\n<td>草稿</td>\n<td>source/_drafts</td>\n</tr>\n</tbody>\n</table>\n</div>\n<p>草稿可通过一下命令发布：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo publish [layout] &lt;title&gt;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>title注意：</p>\n<p>不是博文标题，</p>\n<p>是博文markdown文件的名字，</p>\n<p>也是博文链接的后缀（如<code>https://www.simon96.online/2018/10/12/hexo-tutorial/</code>中的hexo-tutorial）</p>\n</li>\n</ul>\n<h4 id=\"文章模版\"><a href=\"#文章模版\" class=\"headerlink\" title=\"文章模版\"></a>文章模版</h4><ul>\n<li><p>创建模版</p>\n<p>在新建文章时，Hexo 会根据 <code>scaffolds</code> 文件夹内相对应的文件来建立文件，例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new blog “simon”</span><br></pre></td></tr></table></figure>\n<p> 在执行这行指令时，Hexo 会尝试在 <code>scaffolds</code> 文件夹中寻找 <code>blog.md</code>，并根据其内容建立文章。</p>\n</li>\n<li><p>修改参数</p>\n<p>以下是您可以在模版中使用的变量：</p>\n</li>\n</ul>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>变量</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>layout</td>\n<td>布局</td>\n</tr>\n<tr>\n<td>title</td>\n<td>标题</td>\n</tr>\n<tr>\n<td>date</td>\n<td>文件建立日期</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h4 id=\"Front-matter\"><a href=\"#Front-matter\" class=\"headerlink\" title=\"Front-matter\"></a>Front-matter</h4><p>就是博文最上方以 <code>---</code> 分隔的那部分。</p>\n<p>默认可以使用的Front-matter：</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>描述</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>layout</code></td>\n<td>布局</td>\n<td></td>\n</tr>\n<tr>\n<td><code>title</code></td>\n<td>标题</td>\n<td></td>\n</tr>\n<tr>\n<td><code>date</code></td>\n<td>建立日期</td>\n<td>文件建立日期</td>\n</tr>\n<tr>\n<td><code>updated</code></td>\n<td>更新日期</td>\n<td>文件更新日期</td>\n</tr>\n<tr>\n<td><code>comments</code></td>\n<td>开启文章的评论功能</td>\n<td>true</td>\n</tr>\n<tr>\n<td><code>tags</code></td>\n<td>标签（不适用于分页）</td>\n<td></td>\n</tr>\n<tr>\n<td><code>categories</code></td>\n<td>分类（不适用于分页）</td>\n<td></td>\n</tr>\n<tr>\n<td><code>permalink</code></td>\n<td>覆盖文章网址</td>\n</tr>\n</tbody>\n</table>\n</div>\n<hr>\n"},{"title":"GitHub  Blog架构","mathjax":false,"typora-root-url":"GitHubBlog","typora-copy-images-to":"GitHubBlog","abbrlink":3884487082,"date":"2018-12-11T18:35:46.000Z","updated":"2018-12-11T18:35:51.000Z","top":null,"_content":"\n# GitHub  Blog架构\n\n## 参考方案\n\n\n\n### 环境配置\n\n**博客程序** ： [hexo](https://hexo.io/zh-cn/)  -  静态站点生成器\n\n**写作程序** ： [Typora](https://www.typora.io/)  -  makedown 编辑器\n\n**持续集成** ： [Travis-ci](https://travis-ci.com)  - 用于构建项目的开源持续集成环境\n\n\n\n### 项目规划\n\n#### Blog仓库\n\nBlog仓库名：`KumaNNN.github.io`\n\n* 此为用户站点，通过各分支进行管理。\n\n* **master**  ： 内容发布分支。\n\n* **\\<blog\\>**  ： blog源程序分支（以 blog源程序的名称命名，如 `Hexo`）\n\n  * `source_md/<SubModules>`  ：内容源，子模块，拉取文档库中可引用的分支(默认：`md`)\n\n    * 本地管理时，用子模块方式；\n    * 集成环境，~~直接当作仓库管理~~  [Travis CI默认克隆git子模块](https://docs.travis-ci.com/user/customizing-the-build/#git-submodules)  ，且集成环境中并不需要操作此目录。\n\n  * `source/_post`  ： hexo内容源，通过一定的脚本自动化将`source_md/<SubModules>`  的内容复制到此。\n\n    * 因为hexo每次生成时都需要修改源文件，所有分开存放。 \n\n  * `themes/<SubModules>  `  ：主题源，子模块，拉取主题库中的`MyMaster`分支。\n\n  * `Script`  ： 脚本存放目录，存放相关的自定义脚本或钩子脚本。\n\n  * `public`  ：  hexo发布目录。子模块(或git仓库)，已配置将其下内容发布到本仓库`master`分支。\n\n    * 当作 子模块，易于管理，因为子模块提交记录不在当前分支。\n    * 使用`hexo g`生成内容前，通常需要使用`hexo clean` 清除此文件夹及其内容，以确保更改达到预期效果。这样会将此文件夹下的版本数据库`.git`也删除，如果每次都初始化，将不能保留提交记录。\n      * **本地**： \n        * 方案一：(当作git仓库时) 手动执行脚本，在其它地方克隆并检出`master` 分支，并复制`.git` 目录到`public`下。 \n          * 会产生git嵌套，在管理上带来一定的麻烦，慎用。\n          * 在线上，只提交了此文件夹的内容，而放弃其它内容，倒无所谓。\n        * 方案二：(当作子模块时) 用脚本修复`public/.git` 文件。==使用中== \n        * 在不使用线上的 **持续集成** 时，可这样做。\n        * 使用线上的 **持续集成** 时，放弃此子模块的提交。\n      * **线上**： 已在配置文件中配置，可保留提交记录。\n        * Travis-ci 根据配置，克隆并检出指定分支(`Hexo`) ，安装依赖，`hexo g`生成内容，在其它地方克隆并检出`master` 分支并复制`.git` 目录到`public`下，最后只提交并推送`public`下的内容到`master`分支，放弃其它内容。\n\n    \n\n#### 文档(子仓库)和主题\n\n==修正==：**文档(子仓库)** 已采用单分支(`master`) ，子模块化到`source_md/<SubModules>` ，再通过脚本复制`source_md/<SubModules>/doc/md/*` 到 `source/<SubModules>/` \n\n\n\n**注意**： 文档和主题 ，可用组织进行管理\n\n* 文档<组织名>： `KumaDocCenter`\n  * 管理库[^1]： `KumaDocCenter.github.io`\n  * 文档分库存储，~~特定目录（如，md）新建分支(`md`)，以便引用。~~  已采用单分支\n  * ~~保持数据一致性：`md分支` 定期合并到master分支，或参考 [git从其他分支checkout文件到当前分支](#git从其他分支checkout文件到当前分支)。~~ 已采用单分支\n* 主题<组织名>：`BlogThemes<blog源程序名称>`    如，`BlogThemesHexo`\n  * 管理库[^1]： `BlogThemes<blog源程序名称>.github.io`     如，`BlogThemesHexo.github.io`\n  * blog源程序的主题，Fork成独立库，以便管理。\n  * 库命名格式：\n    * `<username>_<blog源程序名称>_主题名称`\n    * `<orgname>_<blog源程序名称>_主题名称`\n  * 从`master`新建分支`mymaster`，作为自己的博客主题，所有配置在此分支。\n\n\n\n\n\n## 工作流\n\n注： ==推荐每个分支一个目录，而不是在同一目录切换分支==。\n\n`staged`  :  暂存。在此脚本中通常用于待处理目录。\n\n\n\n### 本地\n\n#### 子仓库初始化\n\n* 复制父项目下的`Start.bat`文件和`Script`文件夹到未初始化的子仓库，并运行`Start.bat`文件\n* ~~修改某些子仓库的名称和git地址。嵌套领域可用`.`连结，如 `Apache.httpd`~~  已通过脚本实现\n  * ~~需修改的文件：`*.add` `*.init` `*.del`  `*.updata`  `.git/config`~~ 已通过脚本实现\n  * git嵌套： 可以忽略整个子目录\n    * 因为文件夹已嵌套，且用`.`连结作为仓库名，已便于区分，才可以这样做。\n    * 适用于，想把上级目录也用git管理的情景。\n* 根据名称，建立远端仓库，并进行推送，以便子模块拉取。\n* **多分支脚本流程**：\n  1. 检测`.git` 文件，存在则退出脚本。不存在则继续执行脚本。\n  2. 特定目录处理。\n     * 一些不存在的目录会自动创建，如 `doc/md`  `doc/Readme`\n  3. 空目录处理。\n     * 因为git会自动忽略空目录。\n     * 对于空目录，添加 .gitkeep 文件\n  4. 仓库配置。\n     * 初始化仓库，配置用户名，邮箱，添加远程仓库等等。\n  5. 首次提交\n     * 提交空白仓库，只包含 .gitignore 文件\n     * 提交信息： `Commit_0 : init`\n  6. 第2次提交 + 新建分支\n     * 增加 doc/md 和 Script目录，并依此新建md分支\n     * 提交信息： `Commit_1 : + doc/md/* and Script`\n  7. 第3次提交\n     * 添加所有文件\n     * 提交信息：`Commit_2 : + All file`\n  8. 复制钩子\n     * ~~==提交钩子(post-commit)==~~  子仓库暂无\n  9. YAML输出\n  10. 输出子模块批处理配置文件\n     * 手动复制此配置文件到其它地方。\n  11. 结果输出\n* **单分支脚本流程**：\n  1. 检测`.git` 文件，存在则退出脚本。不存在则继续执行脚本。\n  2. 特定目录处理。\n     * 一些不存在的目录会自动创建，如 `doc/md`  `doc/Readme`\n  3. 空目录处理。\n     * 因为git会自动忽略空目录。\n     * 对于空目录，添加 .gitkeep 文件\n  4. 仓库配置。\n     * 初始化仓库，配置用户名，邮箱，添加远程仓库等等。\n  5. 首次提交\n     * 提交空白仓库，只包含 .gitignore 文件\n     * 提交信息： `Commit_0 : init`\n  6. 第2次提交\n     * 添加所有文件\n     * 提交信息：`Commit_1 : + All file`\n  7. 复制钩子\n     * ~~==提交钩子(post-commit)==~~  子仓库暂无\n  8. YAML输出\n  9. 输出子模块批处理配置文件\n    * 手动复制此配置文件到其它地方。\n  10. 结果输出\n\n\n\n**产生的文件有：**\n\n* `init.log`  ： 仓库初始化日志，转移\n  * 管理库： `data\\SubRepo\\init`\n* `*.[Repo]add` `*.init` `*.[Repo]del`  `*.[Repo]updata`  ： 子模块批处理配置文件，转移\n  * 父项目： `.git\\myconf\\submodule\\staged`\n  * 管理库： `data\\SubRepo\\conf`\n* `doc/md/*.YAML`  ：(`md` 分支或`doc/md`) md 文件的YAML头，处理后删除\n  * 将其内容复制到相应的md文件头部，然后删除此`*.YAML`文件，最后git提交。\n\n\n\n\n\n#### 父项目添加子模块(子仓库)\n\n* 运行脚本 `Script\\sh\\submodule_batch.bat` ，添加子模块。\n* 子模块稀疏检出(`doc/md`)\n* 复制钩子\n  * ==提交钩子(post-commit)== ，在配置文件中已配置，脚本会自动复制此钩子。\n* 脚本配置如下\n  * 配置读取目录  ： `.git\\myconf\\submodule\\staged` \n    * 从该目录下读取子模块批处理配置文件\n  * 完成目录  ： `.git\\myconf\\submodule\\ok`\n    * 处理完毕后，将配置文件移动到此。\n* 配置文件格式参考  `Script\\sh\\git_submodule\\Template` \n* 注： 子模块git数据库在父项目下的.git目录下。\n\n\n\n\n\n#### 写作在子仓库\n\n* 完全可当做为普通git仓库来管理。\n* (==单分支==)子仓库有`master`分支。\n* (==多分支==)子仓库有`master`分支和`md` 分支。\n  * `md` 分支源自`master`分支的`doc/md` ，最终需要将最新的数据合并到`master`分支，以作存储。\n  * 所以`doc/md`的更改推荐在`md`分支下进行，然后定期合并到`master`分支\n  * `master`分支==不能==合并到`md` 分支，会造成结构不符合当初预期。\n  * 若需要从`master`分支检出`md` 分支所需的最新数据，可通过其它方法，如[git从其他分支checkout文件到当前分支](#git从其他分支checkout文件到当前分支)\n* git提交并推送。\n\n\n\n\n\n#### 写作在子模块\n\n* 进入子模块，当做为普通git仓库来管理单分支。\n* (==单分支==)子模块只检出`master` 分支，且==禁止==检出其它分支。\n* (==多分支==)子模块只检出`md` 分支，且==禁止==检出其它分支。\n  * `md` 分支源自`master`分支的`doc/md` ，最终需要将最新的数据合并到`master`分支，以作存储。\n  * 所以`doc/md`的更改推荐在`md`分支下进行，然后定期合并到`master`分支\n  * `master`分支==不能==合并到`md` 分支，会造成结构不符合当初预期。\n  * 若需要从`master`分支检出`md` 分支所需的最新数据，可通过其它方法，如[git从其他分支checkout文件到当前分支](#git从其他分支checkout文件到当前分支)\n* git提交\n* 触发==提交钩子(post-commit)== ，写入`复制状态` 数据到子模块git数据库目录下。\n* git推送。\n\n\n\n\n\n#### 写作在父仓库\n\n> 可能某些内容并没有依赖子仓库，是在本项目中(`source/*`)，此时，就需要在父仓库中写在。\n\n* 在父仓库 `source/*` 下更改内容 ，git提交并推送。\n  * 使用线上持续集成时： 提交当前分支(`Hexo`) ，忽略`public` 子模块。\n    * 需要配置，参考 [忽略submodule中的修改或新增文件](#忽略submodule中的修改或新增文件)。\n  * 不使用线上持续集成时： 先提交`public`子模块，再提交当前分支(`Hexo`) 。\n* git提交之前，触发==预提交钩子(pre-commit)==，调用脚本，读取配置(`copy.conf`) ，按需复制 `source_md/<SubModuleName>/doc/md/` 下的内容到 `source/_posts/Dev/<SubModuleName>` \n\n\n\n\n\n### 线上\n\n#### 使用 Travis-ci 持续集成\n\n已配置如下流程\n\n* Travis-ci 检测仓库接收的推送。\n\n  * 拉取博客程序分支(`Hexo`)\n  * 安装依赖，`hexo g`生成内容\n  * 在其它地方克隆并检出`master` 分支并复制`.git` 目录到`public`下\n  * 最后只提交并推送`public`下的内容到`master`分支，放弃其它内容。\n\n  \n\n\n\n## Build\n\n### bat脚本\n\n* 子模块(子仓库)，==提交钩子(post-commit)==，写入数据到配置文件中（包含`状态`，`路径` 等信息）\n* 父仓库(Hexo)，==预提交钩子(pre-commit)==   , for   读取（遍历）子仓库中配置文件的变量，根据status参数，直接执行相应的命令。\n\n  \n\n\n\n### shell 脚本\n\ngit钩子的shell脚本，用`#!/bin/sh` ，而大部分任务流有bat脚本完成。\n\n根据shell脚本调用方式，最终选择 fork方式。\n\n这样能保证shell后面的命令继续执行，但不能获取子 Shell 中的环境变量\n\n> 如\n>\n> ```\n> #!/bin/sh\n> \n> ./out.bat $@\n> echo AAAAA\n> ```\n>\n> * $# 是传给脚本的参数个数\n> * $0 是脚本本身的名字\n> * $1 是传递给该shell脚本的第一个参数\n> * $2 是传递给该shell脚本的第二个参数\n> * $@ 是传给脚本的所有参数的列表\n\n\n\n[Shell 脚本中调用另一个 Shell 脚本的三种方式](https://www.cnblogs.com/insane-Mr-Li/p/9095668.html) \n\n> 主要以下有几种方式：    \n>\n> | 命令   | 说明                                                         |\n> | ------ | ------------------------------------------------------------ |\n> | fork   | 新开一个子 Shell 执行，子 Shell 可以从父 Shell 继承环境变量，但是子 Shell 中的环境变量不会带回给父 Shell。<br />fork 是最普通的, 就是直接在脚本里面用 path/to/foo.sh 来调用 ，不需 fork 关键字 |\n> | exec   | 在同一个 Shell 内执行，但是父脚本中 exec 行之后的内容就不会再执行了 |\n> | source | 在同一个 Shell 中执行，在被调用的脚本中声明的变量和环境变量, 都可以在主脚本中进行获取和使用，相当于合并两个脚本在执行 |\n\n\n\n### 涉及的命令\n\nfor\n\nxcopy\n\n```\nxcopy 1\\* 11 /eiy\n\n/E           复制目录和子目录，包括空目录。\n/I           如果目标不存在，且要复制多个文件，则假定目标必须是目录。\n/Y           取消提示以确认要覆盖现有目标文件。\n```\n\n复制1目录下的所有，不包含隐藏文件夹，到 11 目录\n\n\n\n\n\n----\n\n## 参考阅读\n\n[^1]: 管理组织内所有库，默认为 `<orgname>.github.io`  ，`<orgname>`不用下划线等特殊字符\n\n[把 git 仓库的子目录独立成新仓库](https://segmentfault.com/a/1190000012277504)\n\n[Git 仓库拆拆拆](https://segmentfault.com/a/1190000002548731)\n\n\n\n\n> ### git从其他分支checkout文件到当前分支\n>\n> 使用场景，把当前分支的某个文件替换为其他分支的文件\n>\n> 执行命令\n>\n> ```git\n> git checkout <branch name> -- path\n> ```\n>\n> path 就是你想要替换的目录或文件\n\n\n\n> ### 忽略submodule中的修改或新增文件\n>\n> 我们要做的就是在`.gitmodules`的`[submodule “ProjectName”]`中添加一个`ignore`子项，这个ignore子项可以有3个可选的值，`untracked`, `dirty`和`all`, 它们的意思分别是：\n>\n> * **untracked** ：忽略 在子模块 新添加的，未受版本控制内容\n> * **dirty** ： 忽略对\\<ProjectName>目录下受版本控制的内容进行了修改\n> * **all** ： 同时忽略untracked和dirty","source":"_posts/Pre/GitHubBlog架构.md","raw":"---\ntitle: GitHub  Blog架构\nmathjax: false\ncategories:\n  - Pre\ntypora-root-url: GitHubBlog\ntypora-copy-images-to: GitHubBlog\nabbrlink: 3884487082\ndate: 2018-12-12 02:35:46\nupdated: 2018-12-12 02:35:51\ntags:\ntop:\n---\n\n# GitHub  Blog架构\n\n## 参考方案\n\n\n\n### 环境配置\n\n**博客程序** ： [hexo](https://hexo.io/zh-cn/)  -  静态站点生成器\n\n**写作程序** ： [Typora](https://www.typora.io/)  -  makedown 编辑器\n\n**持续集成** ： [Travis-ci](https://travis-ci.com)  - 用于构建项目的开源持续集成环境\n\n\n\n### 项目规划\n\n#### Blog仓库\n\nBlog仓库名：`KumaNNN.github.io`\n\n* 此为用户站点，通过各分支进行管理。\n\n* **master**  ： 内容发布分支。\n\n* **\\<blog\\>**  ： blog源程序分支（以 blog源程序的名称命名，如 `Hexo`）\n\n  * `source_md/<SubModules>`  ：内容源，子模块，拉取文档库中可引用的分支(默认：`md`)\n\n    * 本地管理时，用子模块方式；\n    * 集成环境，~~直接当作仓库管理~~  [Travis CI默认克隆git子模块](https://docs.travis-ci.com/user/customizing-the-build/#git-submodules)  ，且集成环境中并不需要操作此目录。\n\n  * `source/_post`  ： hexo内容源，通过一定的脚本自动化将`source_md/<SubModules>`  的内容复制到此。\n\n    * 因为hexo每次生成时都需要修改源文件，所有分开存放。 \n\n  * `themes/<SubModules>  `  ：主题源，子模块，拉取主题库中的`MyMaster`分支。\n\n  * `Script`  ： 脚本存放目录，存放相关的自定义脚本或钩子脚本。\n\n  * `public`  ：  hexo发布目录。子模块(或git仓库)，已配置将其下内容发布到本仓库`master`分支。\n\n    * 当作 子模块，易于管理，因为子模块提交记录不在当前分支。\n    * 使用`hexo g`生成内容前，通常需要使用`hexo clean` 清除此文件夹及其内容，以确保更改达到预期效果。这样会将此文件夹下的版本数据库`.git`也删除，如果每次都初始化，将不能保留提交记录。\n      * **本地**： \n        * 方案一：(当作git仓库时) 手动执行脚本，在其它地方克隆并检出`master` 分支，并复制`.git` 目录到`public`下。 \n          * 会产生git嵌套，在管理上带来一定的麻烦，慎用。\n          * 在线上，只提交了此文件夹的内容，而放弃其它内容，倒无所谓。\n        * 方案二：(当作子模块时) 用脚本修复`public/.git` 文件。==使用中== \n        * 在不使用线上的 **持续集成** 时，可这样做。\n        * 使用线上的 **持续集成** 时，放弃此子模块的提交。\n      * **线上**： 已在配置文件中配置，可保留提交记录。\n        * Travis-ci 根据配置，克隆并检出指定分支(`Hexo`) ，安装依赖，`hexo g`生成内容，在其它地方克隆并检出`master` 分支并复制`.git` 目录到`public`下，最后只提交并推送`public`下的内容到`master`分支，放弃其它内容。\n\n    \n\n#### 文档(子仓库)和主题\n\n==修正==：**文档(子仓库)** 已采用单分支(`master`) ，子模块化到`source_md/<SubModules>` ，再通过脚本复制`source_md/<SubModules>/doc/md/*` 到 `source/<SubModules>/` \n\n\n\n**注意**： 文档和主题 ，可用组织进行管理\n\n* 文档<组织名>： `KumaDocCenter`\n  * 管理库[^1]： `KumaDocCenter.github.io`\n  * 文档分库存储，~~特定目录（如，md）新建分支(`md`)，以便引用。~~  已采用单分支\n  * ~~保持数据一致性：`md分支` 定期合并到master分支，或参考 [git从其他分支checkout文件到当前分支](#git从其他分支checkout文件到当前分支)。~~ 已采用单分支\n* 主题<组织名>：`BlogThemes<blog源程序名称>`    如，`BlogThemesHexo`\n  * 管理库[^1]： `BlogThemes<blog源程序名称>.github.io`     如，`BlogThemesHexo.github.io`\n  * blog源程序的主题，Fork成独立库，以便管理。\n  * 库命名格式：\n    * `<username>_<blog源程序名称>_主题名称`\n    * `<orgname>_<blog源程序名称>_主题名称`\n  * 从`master`新建分支`mymaster`，作为自己的博客主题，所有配置在此分支。\n\n\n\n\n\n## 工作流\n\n注： ==推荐每个分支一个目录，而不是在同一目录切换分支==。\n\n`staged`  :  暂存。在此脚本中通常用于待处理目录。\n\n\n\n### 本地\n\n#### 子仓库初始化\n\n* 复制父项目下的`Start.bat`文件和`Script`文件夹到未初始化的子仓库，并运行`Start.bat`文件\n* ~~修改某些子仓库的名称和git地址。嵌套领域可用`.`连结，如 `Apache.httpd`~~  已通过脚本实现\n  * ~~需修改的文件：`*.add` `*.init` `*.del`  `*.updata`  `.git/config`~~ 已通过脚本实现\n  * git嵌套： 可以忽略整个子目录\n    * 因为文件夹已嵌套，且用`.`连结作为仓库名，已便于区分，才可以这样做。\n    * 适用于，想把上级目录也用git管理的情景。\n* 根据名称，建立远端仓库，并进行推送，以便子模块拉取。\n* **多分支脚本流程**：\n  1. 检测`.git` 文件，存在则退出脚本。不存在则继续执行脚本。\n  2. 特定目录处理。\n     * 一些不存在的目录会自动创建，如 `doc/md`  `doc/Readme`\n  3. 空目录处理。\n     * 因为git会自动忽略空目录。\n     * 对于空目录，添加 .gitkeep 文件\n  4. 仓库配置。\n     * 初始化仓库，配置用户名，邮箱，添加远程仓库等等。\n  5. 首次提交\n     * 提交空白仓库，只包含 .gitignore 文件\n     * 提交信息： `Commit_0 : init`\n  6. 第2次提交 + 新建分支\n     * 增加 doc/md 和 Script目录，并依此新建md分支\n     * 提交信息： `Commit_1 : + doc/md/* and Script`\n  7. 第3次提交\n     * 添加所有文件\n     * 提交信息：`Commit_2 : + All file`\n  8. 复制钩子\n     * ~~==提交钩子(post-commit)==~~  子仓库暂无\n  9. YAML输出\n  10. 输出子模块批处理配置文件\n     * 手动复制此配置文件到其它地方。\n  11. 结果输出\n* **单分支脚本流程**：\n  1. 检测`.git` 文件，存在则退出脚本。不存在则继续执行脚本。\n  2. 特定目录处理。\n     * 一些不存在的目录会自动创建，如 `doc/md`  `doc/Readme`\n  3. 空目录处理。\n     * 因为git会自动忽略空目录。\n     * 对于空目录，添加 .gitkeep 文件\n  4. 仓库配置。\n     * 初始化仓库，配置用户名，邮箱，添加远程仓库等等。\n  5. 首次提交\n     * 提交空白仓库，只包含 .gitignore 文件\n     * 提交信息： `Commit_0 : init`\n  6. 第2次提交\n     * 添加所有文件\n     * 提交信息：`Commit_1 : + All file`\n  7. 复制钩子\n     * ~~==提交钩子(post-commit)==~~  子仓库暂无\n  8. YAML输出\n  9. 输出子模块批处理配置文件\n    * 手动复制此配置文件到其它地方。\n  10. 结果输出\n\n\n\n**产生的文件有：**\n\n* `init.log`  ： 仓库初始化日志，转移\n  * 管理库： `data\\SubRepo\\init`\n* `*.[Repo]add` `*.init` `*.[Repo]del`  `*.[Repo]updata`  ： 子模块批处理配置文件，转移\n  * 父项目： `.git\\myconf\\submodule\\staged`\n  * 管理库： `data\\SubRepo\\conf`\n* `doc/md/*.YAML`  ：(`md` 分支或`doc/md`) md 文件的YAML头，处理后删除\n  * 将其内容复制到相应的md文件头部，然后删除此`*.YAML`文件，最后git提交。\n\n\n\n\n\n#### 父项目添加子模块(子仓库)\n\n* 运行脚本 `Script\\sh\\submodule_batch.bat` ，添加子模块。\n* 子模块稀疏检出(`doc/md`)\n* 复制钩子\n  * ==提交钩子(post-commit)== ，在配置文件中已配置，脚本会自动复制此钩子。\n* 脚本配置如下\n  * 配置读取目录  ： `.git\\myconf\\submodule\\staged` \n    * 从该目录下读取子模块批处理配置文件\n  * 完成目录  ： `.git\\myconf\\submodule\\ok`\n    * 处理完毕后，将配置文件移动到此。\n* 配置文件格式参考  `Script\\sh\\git_submodule\\Template` \n* 注： 子模块git数据库在父项目下的.git目录下。\n\n\n\n\n\n#### 写作在子仓库\n\n* 完全可当做为普通git仓库来管理。\n* (==单分支==)子仓库有`master`分支。\n* (==多分支==)子仓库有`master`分支和`md` 分支。\n  * `md` 分支源自`master`分支的`doc/md` ，最终需要将最新的数据合并到`master`分支，以作存储。\n  * 所以`doc/md`的更改推荐在`md`分支下进行，然后定期合并到`master`分支\n  * `master`分支==不能==合并到`md` 分支，会造成结构不符合当初预期。\n  * 若需要从`master`分支检出`md` 分支所需的最新数据，可通过其它方法，如[git从其他分支checkout文件到当前分支](#git从其他分支checkout文件到当前分支)\n* git提交并推送。\n\n\n\n\n\n#### 写作在子模块\n\n* 进入子模块，当做为普通git仓库来管理单分支。\n* (==单分支==)子模块只检出`master` 分支，且==禁止==检出其它分支。\n* (==多分支==)子模块只检出`md` 分支，且==禁止==检出其它分支。\n  * `md` 分支源自`master`分支的`doc/md` ，最终需要将最新的数据合并到`master`分支，以作存储。\n  * 所以`doc/md`的更改推荐在`md`分支下进行，然后定期合并到`master`分支\n  * `master`分支==不能==合并到`md` 分支，会造成结构不符合当初预期。\n  * 若需要从`master`分支检出`md` 分支所需的最新数据，可通过其它方法，如[git从其他分支checkout文件到当前分支](#git从其他分支checkout文件到当前分支)\n* git提交\n* 触发==提交钩子(post-commit)== ，写入`复制状态` 数据到子模块git数据库目录下。\n* git推送。\n\n\n\n\n\n#### 写作在父仓库\n\n> 可能某些内容并没有依赖子仓库，是在本项目中(`source/*`)，此时，就需要在父仓库中写在。\n\n* 在父仓库 `source/*` 下更改内容 ，git提交并推送。\n  * 使用线上持续集成时： 提交当前分支(`Hexo`) ，忽略`public` 子模块。\n    * 需要配置，参考 [忽略submodule中的修改或新增文件](#忽略submodule中的修改或新增文件)。\n  * 不使用线上持续集成时： 先提交`public`子模块，再提交当前分支(`Hexo`) 。\n* git提交之前，触发==预提交钩子(pre-commit)==，调用脚本，读取配置(`copy.conf`) ，按需复制 `source_md/<SubModuleName>/doc/md/` 下的内容到 `source/_posts/Dev/<SubModuleName>` \n\n\n\n\n\n### 线上\n\n#### 使用 Travis-ci 持续集成\n\n已配置如下流程\n\n* Travis-ci 检测仓库接收的推送。\n\n  * 拉取博客程序分支(`Hexo`)\n  * 安装依赖，`hexo g`生成内容\n  * 在其它地方克隆并检出`master` 分支并复制`.git` 目录到`public`下\n  * 最后只提交并推送`public`下的内容到`master`分支，放弃其它内容。\n\n  \n\n\n\n## Build\n\n### bat脚本\n\n* 子模块(子仓库)，==提交钩子(post-commit)==，写入数据到配置文件中（包含`状态`，`路径` 等信息）\n* 父仓库(Hexo)，==预提交钩子(pre-commit)==   , for   读取（遍历）子仓库中配置文件的变量，根据status参数，直接执行相应的命令。\n\n  \n\n\n\n### shell 脚本\n\ngit钩子的shell脚本，用`#!/bin/sh` ，而大部分任务流有bat脚本完成。\n\n根据shell脚本调用方式，最终选择 fork方式。\n\n这样能保证shell后面的命令继续执行，但不能获取子 Shell 中的环境变量\n\n> 如\n>\n> ```\n> #!/bin/sh\n> \n> ./out.bat $@\n> echo AAAAA\n> ```\n>\n> * $# 是传给脚本的参数个数\n> * $0 是脚本本身的名字\n> * $1 是传递给该shell脚本的第一个参数\n> * $2 是传递给该shell脚本的第二个参数\n> * $@ 是传给脚本的所有参数的列表\n\n\n\n[Shell 脚本中调用另一个 Shell 脚本的三种方式](https://www.cnblogs.com/insane-Mr-Li/p/9095668.html) \n\n> 主要以下有几种方式：    \n>\n> | 命令   | 说明                                                         |\n> | ------ | ------------------------------------------------------------ |\n> | fork   | 新开一个子 Shell 执行，子 Shell 可以从父 Shell 继承环境变量，但是子 Shell 中的环境变量不会带回给父 Shell。<br />fork 是最普通的, 就是直接在脚本里面用 path/to/foo.sh 来调用 ，不需 fork 关键字 |\n> | exec   | 在同一个 Shell 内执行，但是父脚本中 exec 行之后的内容就不会再执行了 |\n> | source | 在同一个 Shell 中执行，在被调用的脚本中声明的变量和环境变量, 都可以在主脚本中进行获取和使用，相当于合并两个脚本在执行 |\n\n\n\n### 涉及的命令\n\nfor\n\nxcopy\n\n```\nxcopy 1\\* 11 /eiy\n\n/E           复制目录和子目录，包括空目录。\n/I           如果目标不存在，且要复制多个文件，则假定目标必须是目录。\n/Y           取消提示以确认要覆盖现有目标文件。\n```\n\n复制1目录下的所有，不包含隐藏文件夹，到 11 目录\n\n\n\n\n\n----\n\n## 参考阅读\n\n[^1]: 管理组织内所有库，默认为 `<orgname>.github.io`  ，`<orgname>`不用下划线等特殊字符\n\n[把 git 仓库的子目录独立成新仓库](https://segmentfault.com/a/1190000012277504)\n\n[Git 仓库拆拆拆](https://segmentfault.com/a/1190000002548731)\n\n\n\n\n> ### git从其他分支checkout文件到当前分支\n>\n> 使用场景，把当前分支的某个文件替换为其他分支的文件\n>\n> 执行命令\n>\n> ```git\n> git checkout <branch name> -- path\n> ```\n>\n> path 就是你想要替换的目录或文件\n\n\n\n> ### 忽略submodule中的修改或新增文件\n>\n> 我们要做的就是在`.gitmodules`的`[submodule “ProjectName”]`中添加一个`ignore`子项，这个ignore子项可以有3个可选的值，`untracked`, `dirty`和`all`, 它们的意思分别是：\n>\n> * **untracked** ：忽略 在子模块 新添加的，未受版本控制内容\n> * **dirty** ： 忽略对\\<ProjectName>目录下受版本控制的内容进行了修改\n> * **all** ： 同时忽略untracked和dirty","slug":"Pre/GitHubBlog架构","published":1,"_id":"cjpz9phz50000t8fiu41zhb2m","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"GitHub-Blog架构\"><a href=\"#GitHub-Blog架构\" class=\"headerlink\" title=\"GitHub  Blog架构\"></a>GitHub  Blog架构</h1><h2 id=\"参考方案\"><a href=\"#参考方案\" class=\"headerlink\" title=\"参考方案\"></a>参考方案</h2><h3 id=\"环境配置\"><a href=\"#环境配置\" class=\"headerlink\" title=\"环境配置\"></a>环境配置</h3><p><strong>博客程序</strong> ： <a href=\"https://hexo.io/zh-cn/\" target=\"_blank\" rel=\"noopener\">hexo</a>  -  静态站点生成器</p>\n<p><strong>写作程序</strong> ： <a href=\"https://www.typora.io/\" target=\"_blank\" rel=\"noopener\">Typora</a>  -  makedown 编辑器</p>\n<p><strong>持续集成</strong> ： <a href=\"https://travis-ci.com\" target=\"_blank\" rel=\"noopener\">Travis-ci</a>  - 用于构建项目的开源持续集成环境</p>\n<h3 id=\"项目规划\"><a href=\"#项目规划\" class=\"headerlink\" title=\"项目规划\"></a>项目规划</h3><h4 id=\"Blog仓库\"><a href=\"#Blog仓库\" class=\"headerlink\" title=\"Blog仓库\"></a>Blog仓库</h4><p>Blog仓库名：<code>KumaNNN.github.io</code></p>\n<ul>\n<li><p>此为用户站点，通过各分支进行管理。</p>\n</li>\n<li><p><strong>master</strong>  ： 内容发布分支。</p>\n</li>\n<li><p><strong>\\<blog\\></blog\\></strong>  ： blog源程序分支（以 blog源程序的名称命名，如 <code>Hexo</code>）</p>\n<ul>\n<li><p><code>source_md/&lt;SubModules&gt;</code>  ：内容源，子模块，拉取文档库中可引用的分支(默认：<code>md</code>)</p>\n<ul>\n<li>本地管理时，用子模块方式；</li>\n<li>集成环境，<del>直接当作仓库管理</del>  <a href=\"https://docs.travis-ci.com/user/customizing-the-build/#git-submodules\" target=\"_blank\" rel=\"noopener\">Travis CI默认克隆git子模块</a>  ，且集成环境中并不需要操作此目录。</li>\n</ul>\n</li>\n<li><p><code>source/_post</code>  ： hexo内容源，通过一定的脚本自动化将<code>source_md/&lt;SubModules&gt;</code>  的内容复制到此。</p>\n<ul>\n<li>因为hexo每次生成时都需要修改源文件，所有分开存放。 </li>\n</ul>\n</li>\n<li><p><code>themes/&lt;SubModules&gt;</code>  ：主题源，子模块，拉取主题库中的<code>MyMaster</code>分支。</p>\n</li>\n<li><p><code>Script</code>  ： 脚本存放目录，存放相关的自定义脚本或钩子脚本。</p>\n</li>\n<li><p><code>public</code>  ：  hexo发布目录。子模块(或git仓库)，已配置将其下内容发布到本仓库<code>master</code>分支。</p>\n<ul>\n<li>当作 子模块，易于管理，因为子模块提交记录不在当前分支。</li>\n<li>使用<code>hexo g</code>生成内容前，通常需要使用<code>hexo clean</code> 清除此文件夹及其内容，以确保更改达到预期效果。这样会将此文件夹下的版本数据库<code>.git</code>也删除，如果每次都初始化，将不能保留提交记录。<ul>\n<li><strong>本地</strong>： <ul>\n<li>方案一：(当作git仓库时) 手动执行脚本，在其它地方克隆并检出<code>master</code> 分支，并复制<code>.git</code> 目录到<code>public</code>下。 <ul>\n<li>会产生git嵌套，在管理上带来一定的麻烦，慎用。</li>\n<li>在线上，只提交了此文件夹的内容，而放弃其它内容，倒无所谓。</li>\n</ul>\n</li>\n<li>方案二：(当作子模块时) 用脚本修复<code>public/.git</code> 文件。==使用中== </li>\n<li>在不使用线上的 <strong>持续集成</strong> 时，可这样做。</li>\n<li>使用线上的 <strong>持续集成</strong> 时，放弃此子模块的提交。</li>\n</ul>\n</li>\n<li><strong>线上</strong>： 已在配置文件中配置，可保留提交记录。<ul>\n<li>Travis-ci 根据配置，克隆并检出指定分支(<code>Hexo</code>) ，安装依赖，<code>hexo g</code>生成内容，在其它地方克隆并检出<code>master</code> 分支并复制<code>.git</code> 目录到<code>public</code>下，最后只提交并推送<code>public</code>下的内容到<code>master</code>分支，放弃其它内容。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"文档-子仓库-和主题\"><a href=\"#文档-子仓库-和主题\" class=\"headerlink\" title=\"文档(子仓库)和主题\"></a>文档(子仓库)和主题</h4><p>==修正==：<strong>文档(子仓库)</strong> 已采用单分支(<code>master</code>) ，子模块化到<code>source_md/&lt;SubModules&gt;</code> ，再通过脚本复制<code>source_md/&lt;SubModules&gt;/doc/md/*</code> 到 <code>source/&lt;SubModules&gt;/</code> </p>\n<p><strong>注意</strong>： 文档和主题 ，可用组织进行管理</p>\n<ul>\n<li>文档&lt;组织名&gt;： <code>KumaDocCenter</code><ul>\n<li>管理库<sup><a href=\"#fn_1\" id=\"reffn_1\">1</a></sup>： <code>KumaDocCenter.github.io</code></li>\n<li>文档分库存储，<del>特定目录（如，md）新建分支(<code>md</code>)，以便引用。</del>  已采用单分支</li>\n<li><del>保持数据一致性：<code>md分支</code> 定期合并到master分支，或参考 <a href=\"#git从其他分支checkout文件到当前分支\">git从其他分支checkout文件到当前分支</a>。</del> 已采用单分支</li>\n</ul>\n</li>\n<li>主题&lt;组织名&gt;：<code>BlogThemes&lt;blog源程序名称&gt;</code>    如，<code>BlogThemesHexo</code><ul>\n<li>管理库<sup><a href=\"#fn_1\" id=\"reffn_1\">1</a></sup>： <code>BlogThemes&lt;blog源程序名称&gt;.github.io</code>     如，<code>BlogThemesHexo.github.io</code></li>\n<li>blog源程序的主题，Fork成独立库，以便管理。</li>\n<li>库命名格式：<ul>\n<li><code>&lt;username&gt;_&lt;blog源程序名称&gt;_主题名称</code></li>\n<li><code>&lt;orgname&gt;_&lt;blog源程序名称&gt;_主题名称</code></li>\n</ul>\n</li>\n<li>从<code>master</code>新建分支<code>mymaster</code>，作为自己的博客主题，所有配置在此分支。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"工作流\"><a href=\"#工作流\" class=\"headerlink\" title=\"工作流\"></a>工作流</h2><p>注： ==推荐每个分支一个目录，而不是在同一目录切换分支==。</p>\n<p><code>staged</code>  :  暂存。在此脚本中通常用于待处理目录。</p>\n<h3 id=\"本地\"><a href=\"#本地\" class=\"headerlink\" title=\"本地\"></a>本地</h3><h4 id=\"子仓库初始化\"><a href=\"#子仓库初始化\" class=\"headerlink\" title=\"子仓库初始化\"></a>子仓库初始化</h4><ul>\n<li>复制父项目下的<code>Start.bat</code>文件和<code>Script</code>文件夹到未初始化的子仓库，并运行<code>Start.bat</code>文件</li>\n<li><del>修改某些子仓库的名称和git地址。嵌套领域可用<code>.</code>连结，如 <code>Apache.httpd</code></del>  已通过脚本实现<ul>\n<li><del>需修改的文件：<code>*.add</code> <code>*.init</code> <code>*.del</code>  <code>*.updata</code>  <code>.git/config</code></del> 已通过脚本实现</li>\n<li>git嵌套： 可以忽略整个子目录<ul>\n<li>因为文件夹已嵌套，且用<code>.</code>连结作为仓库名，已便于区分，才可以这样做。</li>\n<li>适用于，想把上级目录也用git管理的情景。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>根据名称，建立远端仓库，并进行推送，以便子模块拉取。</li>\n<li><strong>多分支脚本流程</strong>：<ol>\n<li>检测<code>.git</code> 文件，存在则退出脚本。不存在则继续执行脚本。</li>\n<li>特定目录处理。<ul>\n<li>一些不存在的目录会自动创建，如 <code>doc/md</code>  <code>doc/Readme</code></li>\n</ul>\n</li>\n<li>空目录处理。<ul>\n<li>因为git会自动忽略空目录。</li>\n<li>对于空目录，添加 .gitkeep 文件</li>\n</ul>\n</li>\n<li>仓库配置。<ul>\n<li>初始化仓库，配置用户名，邮箱，添加远程仓库等等。</li>\n</ul>\n</li>\n<li>首次提交<ul>\n<li>提交空白仓库，只包含 .gitignore 文件</li>\n<li>提交信息： <code>Commit_0 : init</code></li>\n</ul>\n</li>\n<li>第2次提交 + 新建分支<ul>\n<li>增加 doc/md 和 Script目录，并依此新建md分支</li>\n<li>提交信息： <code>Commit_1 : + doc/md/* and Script</code></li>\n</ul>\n</li>\n<li>第3次提交<ul>\n<li>添加所有文件</li>\n<li>提交信息：<code>Commit_2 : + All file</code></li>\n</ul>\n</li>\n<li>复制钩子<ul>\n<li><del>==提交钩子(post-commit)==</del>  子仓库暂无</li>\n</ul>\n</li>\n<li>YAML输出</li>\n<li>输出子模块批处理配置文件<ul>\n<li>手动复制此配置文件到其它地方。</li>\n</ul>\n</li>\n<li>结果输出</li>\n</ol>\n</li>\n<li><strong>单分支脚本流程</strong>：<ol>\n<li>检测<code>.git</code> 文件，存在则退出脚本。不存在则继续执行脚本。</li>\n<li>特定目录处理。<ul>\n<li>一些不存在的目录会自动创建，如 <code>doc/md</code>  <code>doc/Readme</code></li>\n</ul>\n</li>\n<li>空目录处理。<ul>\n<li>因为git会自动忽略空目录。</li>\n<li>对于空目录，添加 .gitkeep 文件</li>\n</ul>\n</li>\n<li>仓库配置。<ul>\n<li>初始化仓库，配置用户名，邮箱，添加远程仓库等等。</li>\n</ul>\n</li>\n<li>首次提交<ul>\n<li>提交空白仓库，只包含 .gitignore 文件</li>\n<li>提交信息： <code>Commit_0 : init</code></li>\n</ul>\n</li>\n<li>第2次提交<ul>\n<li>添加所有文件</li>\n<li>提交信息：<code>Commit_1 : + All file</code></li>\n</ul>\n</li>\n<li>复制钩子<ul>\n<li><del>==提交钩子(post-commit)==</del>  子仓库暂无</li>\n</ul>\n</li>\n<li>YAML输出</li>\n<li>输出子模块批处理配置文件<ul>\n<li>手动复制此配置文件到其它地方。</li>\n</ul>\n</li>\n<li>结果输出</li>\n</ol>\n</li>\n</ul>\n<p><strong>产生的文件有：</strong></p>\n<ul>\n<li><code>init.log</code>  ： 仓库初始化日志，转移<ul>\n<li>管理库： <code>data\\SubRepo\\init</code></li>\n</ul>\n</li>\n<li><code>*.[Repo]add</code> <code>*.init</code> <code>*.[Repo]del</code>  <code>*.[Repo]updata</code>  ： 子模块批处理配置文件，转移<ul>\n<li>父项目： <code>.git\\myconf\\submodule\\staged</code></li>\n<li>管理库： <code>data\\SubRepo\\conf</code></li>\n</ul>\n</li>\n<li><code>doc/md/*.YAML</code>  ：(<code>md</code> 分支或<code>doc/md</code>) md 文件的YAML头，处理后删除<ul>\n<li>将其内容复制到相应的md文件头部，然后删除此<code>*.YAML</code>文件，最后git提交。</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"父项目添加子模块-子仓库\"><a href=\"#父项目添加子模块-子仓库\" class=\"headerlink\" title=\"父项目添加子模块(子仓库)\"></a>父项目添加子模块(子仓库)</h4><ul>\n<li>运行脚本 <code>Script\\sh\\submodule_batch.bat</code> ，添加子模块。</li>\n<li>子模块稀疏检出(<code>doc/md</code>)</li>\n<li>复制钩子<ul>\n<li>==提交钩子(post-commit)== ，在配置文件中已配置，脚本会自动复制此钩子。</li>\n</ul>\n</li>\n<li>脚本配置如下<ul>\n<li>配置读取目录  ： <code>.git\\myconf\\submodule\\staged</code> <ul>\n<li>从该目录下读取子模块批处理配置文件</li>\n</ul>\n</li>\n<li>完成目录  ： <code>.git\\myconf\\submodule\\ok</code><ul>\n<li>处理完毕后，将配置文件移动到此。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>配置文件格式参考  <code>Script\\sh\\git_submodule\\Template</code> </li>\n<li>注： 子模块git数据库在父项目下的.git目录下。</li>\n</ul>\n<h4 id=\"写作在子仓库\"><a href=\"#写作在子仓库\" class=\"headerlink\" title=\"写作在子仓库\"></a>写作在子仓库</h4><ul>\n<li>完全可当做为普通git仓库来管理。</li>\n<li>(==单分支==)子仓库有<code>master</code>分支。</li>\n<li>(==多分支==)子仓库有<code>master</code>分支和<code>md</code> 分支。<ul>\n<li><code>md</code> 分支源自<code>master</code>分支的<code>doc/md</code> ，最终需要将最新的数据合并到<code>master</code>分支，以作存储。</li>\n<li>所以<code>doc/md</code>的更改推荐在<code>md</code>分支下进行，然后定期合并到<code>master</code>分支</li>\n<li><code>master</code>分支==不能==合并到<code>md</code> 分支，会造成结构不符合当初预期。</li>\n<li>若需要从<code>master</code>分支检出<code>md</code> 分支所需的最新数据，可通过其它方法，如<a href=\"#git从其他分支checkout文件到当前分支\">git从其他分支checkout文件到当前分支</a></li>\n</ul>\n</li>\n<li>git提交并推送。</li>\n</ul>\n<h4 id=\"写作在子模块\"><a href=\"#写作在子模块\" class=\"headerlink\" title=\"写作在子模块\"></a>写作在子模块</h4><ul>\n<li>进入子模块，当做为普通git仓库来管理单分支。</li>\n<li>(==单分支==)子模块只检出<code>master</code> 分支，且==禁止==检出其它分支。</li>\n<li>(==多分支==)子模块只检出<code>md</code> 分支，且==禁止==检出其它分支。<ul>\n<li><code>md</code> 分支源自<code>master</code>分支的<code>doc/md</code> ，最终需要将最新的数据合并到<code>master</code>分支，以作存储。</li>\n<li>所以<code>doc/md</code>的更改推荐在<code>md</code>分支下进行，然后定期合并到<code>master</code>分支</li>\n<li><code>master</code>分支==不能==合并到<code>md</code> 分支，会造成结构不符合当初预期。</li>\n<li>若需要从<code>master</code>分支检出<code>md</code> 分支所需的最新数据，可通过其它方法，如<a href=\"#git从其他分支checkout文件到当前分支\">git从其他分支checkout文件到当前分支</a></li>\n</ul>\n</li>\n<li>git提交</li>\n<li>触发==提交钩子(post-commit)== ，写入<code>复制状态</code> 数据到子模块git数据库目录下。</li>\n<li>git推送。</li>\n</ul>\n<h4 id=\"写作在父仓库\"><a href=\"#写作在父仓库\" class=\"headerlink\" title=\"写作在父仓库\"></a>写作在父仓库</h4><blockquote>\n<p>可能某些内容并没有依赖子仓库，是在本项目中(<code>source/*</code>)，此时，就需要在父仓库中写在。</p>\n</blockquote>\n<ul>\n<li>在父仓库 <code>source/*</code> 下更改内容 ，git提交并推送。<ul>\n<li>使用线上持续集成时： 提交当前分支(<code>Hexo</code>) ，忽略<code>public</code> 子模块。<ul>\n<li>需要配置，参考 <a href=\"#忽略submodule中的修改或新增文件\">忽略submodule中的修改或新增文件</a>。</li>\n</ul>\n</li>\n<li>不使用线上持续集成时： 先提交<code>public</code>子模块，再提交当前分支(<code>Hexo</code>) 。</li>\n</ul>\n</li>\n<li>git提交之前，触发==预提交钩子(pre-commit)==，调用脚本，读取配置(<code>copy.conf</code>) ，按需复制 <code>source_md/&lt;SubModuleName&gt;/doc/md/</code> 下的内容到 <code>source/_posts/Dev/&lt;SubModuleName&gt;</code> </li>\n</ul>\n<h3 id=\"线上\"><a href=\"#线上\" class=\"headerlink\" title=\"线上\"></a>线上</h3><h4 id=\"使用-Travis-ci-持续集成\"><a href=\"#使用-Travis-ci-持续集成\" class=\"headerlink\" title=\"使用 Travis-ci 持续集成\"></a>使用 Travis-ci 持续集成</h4><p>已配置如下流程</p>\n<ul>\n<li><p>Travis-ci 检测仓库接收的推送。</p>\n<ul>\n<li>拉取博客程序分支(<code>Hexo</code>)</li>\n<li>安装依赖，<code>hexo g</code>生成内容</li>\n<li>在其它地方克隆并检出<code>master</code> 分支并复制<code>.git</code> 目录到<code>public</code>下</li>\n<li>最后只提交并推送<code>public</code>下的内容到<code>master</code>分支，放弃其它内容。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Build\"><a href=\"#Build\" class=\"headerlink\" title=\"Build\"></a>Build</h2><h3 id=\"bat脚本\"><a href=\"#bat脚本\" class=\"headerlink\" title=\"bat脚本\"></a>bat脚本</h3><ul>\n<li>子模块(子仓库)，==提交钩子(post-commit)==，写入数据到配置文件中（包含<code>状态</code>，<code>路径</code> 等信息）</li>\n<li>父仓库(Hexo)，==预提交钩子(pre-commit)==   , for   读取（遍历）子仓库中配置文件的变量，根据status参数，直接执行相应的命令。</li>\n</ul>\n<h3 id=\"shell-脚本\"><a href=\"#shell-脚本\" class=\"headerlink\" title=\"shell 脚本\"></a>shell 脚本</h3><p>git钩子的shell脚本，用<code>#!/bin/sh</code> ，而大部分任务流有bat脚本完成。</p>\n<p>根据shell脚本调用方式，最终选择 fork方式。</p>\n<p>这样能保证shell后面的命令继续执行，但不能获取子 Shell 中的环境变量</p>\n<blockquote>\n<p>如</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; #!/bin/sh</span><br><span class=\"line\">&gt; </span><br><span class=\"line\">&gt; ./out.bat $@</span><br><span class=\"line\">&gt; echo AAAAA</span><br><span class=\"line\">&gt;</span><br></pre></td></tr></table></figure>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<ul>\n<li>$# 是传给脚本的参数个数</li>\n<li>$0 是脚本本身的名字</li>\n<li>$1 是传递给该shell脚本的第一个参数</li>\n<li>$2 是传递给该shell脚本的第二个参数</li>\n<li>$@ 是传给脚本的所有参数的列表</li>\n</ul>\n</blockquote>\n<p><a href=\"https://www.cnblogs.com/insane-Mr-Li/p/9095668.html\" target=\"_blank\" rel=\"noopener\">Shell 脚本中调用另一个 Shell 脚本的三种方式</a> </p>\n<blockquote>\n<p>主要以下有几种方式：    </p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>命令</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>fork</td>\n<td>新开一个子 Shell 执行，子 Shell 可以从父 Shell 继承环境变量，但是子 Shell 中的环境变量不会带回给父 Shell。<br>fork 是最普通的, 就是直接在脚本里面用 path/to/foo.sh 来调用 ，不需 fork 关键字</td>\n</tr>\n<tr>\n<td>exec</td>\n<td>在同一个 Shell 内执行，但是父脚本中 exec 行之后的内容就不会再执行了</td>\n</tr>\n<tr>\n<td>source</td>\n<td>在同一个 Shell 中执行，在被调用的脚本中声明的变量和环境变量, 都可以在主脚本中进行获取和使用，相当于合并两个脚本在执行</td>\n</tr>\n</tbody>\n</table>\n</div>\n</blockquote>\n<h3 id=\"涉及的命令\"><a href=\"#涉及的命令\" class=\"headerlink\" title=\"涉及的命令\"></a>涉及的命令</h3><p>for</p>\n<p>xcopy</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">xcopy 1\\* 11 /eiy</span><br><span class=\"line\"></span><br><span class=\"line\">/E           复制目录和子目录，包括空目录。</span><br><span class=\"line\">/I           如果目标不存在，且要复制多个文件，则假定目标必须是目录。</span><br><span class=\"line\">/Y           取消提示以确认要覆盖现有目标文件。</span><br></pre></td></tr></table></figure>\n<p>复制1目录下的所有，不包含隐藏文件夹，到 11 目录</p>\n<hr>\n<h2 id=\"参考阅读\"><a href=\"#参考阅读\" class=\"headerlink\" title=\"参考阅读\"></a>参考阅读</h2><blockquote id=\"fn_1\">\n<sup>1</sup>. 管理组织内所有库，默认为 <code>&lt;orgname&gt;.github.io</code>  ，<code>&lt;orgname&gt;</code>不用下划线等特殊字符<a href=\"#reffn_1\" title=\"Jump back to footnote [1] in the text.\"> &#8617;</a>\n</blockquote>\n<p><a href=\"https://segmentfault.com/a/1190000012277504\" target=\"_blank\" rel=\"noopener\">把 git 仓库的子目录独立成新仓库</a></p>\n<p><a href=\"https://segmentfault.com/a/1190000002548731\" target=\"_blank\" rel=\"noopener\">Git 仓库拆拆拆</a></p>\n<blockquote>\n<h3 id=\"git从其他分支checkout文件到当前分支\"><a href=\"#git从其他分支checkout文件到当前分支\" class=\"headerlink\" title=\"git从其他分支checkout文件到当前分支\"></a>git从其他分支checkout文件到当前分支</h3><p>使用场景，把当前分支的某个文件替换为其他分支的文件</p>\n<p>执行命令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; git checkout &lt;branch name&gt; -- path</span><br><span class=\"line\">&gt;</span><br></pre></td></tr></table></figure>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<p>path 就是你想要替换的目录或文件</p>\n<h3 id=\"忽略submodule中的修改或新增文件\"><a href=\"#忽略submodule中的修改或新增文件\" class=\"headerlink\" title=\"忽略submodule中的修改或新增文件\"></a>忽略submodule中的修改或新增文件</h3><p>我们要做的就是在<code>.gitmodules</code>的<code>[submodule “ProjectName”]</code>中添加一个<code>ignore</code>子项，这个ignore子项可以有3个可选的值，<code>untracked</code>, <code>dirty</code>和<code>all</code>, 它们的意思分别是：</p>\n<ul>\n<li><strong>untracked</strong> ：忽略 在子模块 新添加的，未受版本控制内容</li>\n<li><strong>dirty</strong> ： 忽略对\\<projectname>目录下受版本控制的内容进行了修改</projectname></li>\n<li><strong>all</strong> ： 同时忽略untracked和dirty</li>\n</ul>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"GitHub-Blog架构\"><a href=\"#GitHub-Blog架构\" class=\"headerlink\" title=\"GitHub  Blog架构\"></a>GitHub  Blog架构</h1><h2 id=\"参考方案\"><a href=\"#参考方案\" class=\"headerlink\" title=\"参考方案\"></a>参考方案</h2><h3 id=\"环境配置\"><a href=\"#环境配置\" class=\"headerlink\" title=\"环境配置\"></a>环境配置</h3><p><strong>博客程序</strong> ： <a href=\"https://hexo.io/zh-cn/\" target=\"_blank\" rel=\"noopener\">hexo</a>  -  静态站点生成器</p>\n<p><strong>写作程序</strong> ： <a href=\"https://www.typora.io/\" target=\"_blank\" rel=\"noopener\">Typora</a>  -  makedown 编辑器</p>\n<p><strong>持续集成</strong> ： <a href=\"https://travis-ci.com\" target=\"_blank\" rel=\"noopener\">Travis-ci</a>  - 用于构建项目的开源持续集成环境</p>\n<h3 id=\"项目规划\"><a href=\"#项目规划\" class=\"headerlink\" title=\"项目规划\"></a>项目规划</h3><h4 id=\"Blog仓库\"><a href=\"#Blog仓库\" class=\"headerlink\" title=\"Blog仓库\"></a>Blog仓库</h4><p>Blog仓库名：<code>KumaNNN.github.io</code></p>\n<ul>\n<li><p>此为用户站点，通过各分支进行管理。</p>\n</li>\n<li><p><strong>master</strong>  ： 内容发布分支。</p>\n</li>\n<li><p><strong>\\<blog\\></blog\\></strong>  ： blog源程序分支（以 blog源程序的名称命名，如 <code>Hexo</code>）</p>\n<ul>\n<li><p><code>source_md/&lt;SubModules&gt;</code>  ：内容源，子模块，拉取文档库中可引用的分支(默认：<code>md</code>)</p>\n<ul>\n<li>本地管理时，用子模块方式；</li>\n<li>集成环境，<del>直接当作仓库管理</del>  <a href=\"https://docs.travis-ci.com/user/customizing-the-build/#git-submodules\" target=\"_blank\" rel=\"noopener\">Travis CI默认克隆git子模块</a>  ，且集成环境中并不需要操作此目录。</li>\n</ul>\n</li>\n<li><p><code>source/_post</code>  ： hexo内容源，通过一定的脚本自动化将<code>source_md/&lt;SubModules&gt;</code>  的内容复制到此。</p>\n<ul>\n<li>因为hexo每次生成时都需要修改源文件，所有分开存放。 </li>\n</ul>\n</li>\n<li><p><code>themes/&lt;SubModules&gt;</code>  ：主题源，子模块，拉取主题库中的<code>MyMaster</code>分支。</p>\n</li>\n<li><p><code>Script</code>  ： 脚本存放目录，存放相关的自定义脚本或钩子脚本。</p>\n</li>\n<li><p><code>public</code>  ：  hexo发布目录。子模块(或git仓库)，已配置将其下内容发布到本仓库<code>master</code>分支。</p>\n<ul>\n<li>当作 子模块，易于管理，因为子模块提交记录不在当前分支。</li>\n<li>使用<code>hexo g</code>生成内容前，通常需要使用<code>hexo clean</code> 清除此文件夹及其内容，以确保更改达到预期效果。这样会将此文件夹下的版本数据库<code>.git</code>也删除，如果每次都初始化，将不能保留提交记录。<ul>\n<li><strong>本地</strong>： <ul>\n<li>方案一：(当作git仓库时) 手动执行脚本，在其它地方克隆并检出<code>master</code> 分支，并复制<code>.git</code> 目录到<code>public</code>下。 <ul>\n<li>会产生git嵌套，在管理上带来一定的麻烦，慎用。</li>\n<li>在线上，只提交了此文件夹的内容，而放弃其它内容，倒无所谓。</li>\n</ul>\n</li>\n<li>方案二：(当作子模块时) 用脚本修复<code>public/.git</code> 文件。==使用中== </li>\n<li>在不使用线上的 <strong>持续集成</strong> 时，可这样做。</li>\n<li>使用线上的 <strong>持续集成</strong> 时，放弃此子模块的提交。</li>\n</ul>\n</li>\n<li><strong>线上</strong>： 已在配置文件中配置，可保留提交记录。<ul>\n<li>Travis-ci 根据配置，克隆并检出指定分支(<code>Hexo</code>) ，安装依赖，<code>hexo g</code>生成内容，在其它地方克隆并检出<code>master</code> 分支并复制<code>.git</code> 目录到<code>public</code>下，最后只提交并推送<code>public</code>下的内容到<code>master</code>分支，放弃其它内容。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"文档-子仓库-和主题\"><a href=\"#文档-子仓库-和主题\" class=\"headerlink\" title=\"文档(子仓库)和主题\"></a>文档(子仓库)和主题</h4><p>==修正==：<strong>文档(子仓库)</strong> 已采用单分支(<code>master</code>) ，子模块化到<code>source_md/&lt;SubModules&gt;</code> ，再通过脚本复制<code>source_md/&lt;SubModules&gt;/doc/md/*</code> 到 <code>source/&lt;SubModules&gt;/</code> </p>\n<p><strong>注意</strong>： 文档和主题 ，可用组织进行管理</p>\n<ul>\n<li>文档&lt;组织名&gt;： <code>KumaDocCenter</code><ul>\n<li>管理库<sup><a href=\"#fn_1\" id=\"reffn_1\">1</a></sup>： <code>KumaDocCenter.github.io</code></li>\n<li>文档分库存储，<del>特定目录（如，md）新建分支(<code>md</code>)，以便引用。</del>  已采用单分支</li>\n<li><del>保持数据一致性：<code>md分支</code> 定期合并到master分支，或参考 <a href=\"#git从其他分支checkout文件到当前分支\">git从其他分支checkout文件到当前分支</a>。</del> 已采用单分支</li>\n</ul>\n</li>\n<li>主题&lt;组织名&gt;：<code>BlogThemes&lt;blog源程序名称&gt;</code>    如，<code>BlogThemesHexo</code><ul>\n<li>管理库<sup><a href=\"#fn_1\" id=\"reffn_1\">1</a></sup>： <code>BlogThemes&lt;blog源程序名称&gt;.github.io</code>     如，<code>BlogThemesHexo.github.io</code></li>\n<li>blog源程序的主题，Fork成独立库，以便管理。</li>\n<li>库命名格式：<ul>\n<li><code>&lt;username&gt;_&lt;blog源程序名称&gt;_主题名称</code></li>\n<li><code>&lt;orgname&gt;_&lt;blog源程序名称&gt;_主题名称</code></li>\n</ul>\n</li>\n<li>从<code>master</code>新建分支<code>mymaster</code>，作为自己的博客主题，所有配置在此分支。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"工作流\"><a href=\"#工作流\" class=\"headerlink\" title=\"工作流\"></a>工作流</h2><p>注： ==推荐每个分支一个目录，而不是在同一目录切换分支==。</p>\n<p><code>staged</code>  :  暂存。在此脚本中通常用于待处理目录。</p>\n<h3 id=\"本地\"><a href=\"#本地\" class=\"headerlink\" title=\"本地\"></a>本地</h3><h4 id=\"子仓库初始化\"><a href=\"#子仓库初始化\" class=\"headerlink\" title=\"子仓库初始化\"></a>子仓库初始化</h4><ul>\n<li>复制父项目下的<code>Start.bat</code>文件和<code>Script</code>文件夹到未初始化的子仓库，并运行<code>Start.bat</code>文件</li>\n<li><del>修改某些子仓库的名称和git地址。嵌套领域可用<code>.</code>连结，如 <code>Apache.httpd</code></del>  已通过脚本实现<ul>\n<li><del>需修改的文件：<code>*.add</code> <code>*.init</code> <code>*.del</code>  <code>*.updata</code>  <code>.git/config</code></del> 已通过脚本实现</li>\n<li>git嵌套： 可以忽略整个子目录<ul>\n<li>因为文件夹已嵌套，且用<code>.</code>连结作为仓库名，已便于区分，才可以这样做。</li>\n<li>适用于，想把上级目录也用git管理的情景。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>根据名称，建立远端仓库，并进行推送，以便子模块拉取。</li>\n<li><strong>多分支脚本流程</strong>：<ol>\n<li>检测<code>.git</code> 文件，存在则退出脚本。不存在则继续执行脚本。</li>\n<li>特定目录处理。<ul>\n<li>一些不存在的目录会自动创建，如 <code>doc/md</code>  <code>doc/Readme</code></li>\n</ul>\n</li>\n<li>空目录处理。<ul>\n<li>因为git会自动忽略空目录。</li>\n<li>对于空目录，添加 .gitkeep 文件</li>\n</ul>\n</li>\n<li>仓库配置。<ul>\n<li>初始化仓库，配置用户名，邮箱，添加远程仓库等等。</li>\n</ul>\n</li>\n<li>首次提交<ul>\n<li>提交空白仓库，只包含 .gitignore 文件</li>\n<li>提交信息： <code>Commit_0 : init</code></li>\n</ul>\n</li>\n<li>第2次提交 + 新建分支<ul>\n<li>增加 doc/md 和 Script目录，并依此新建md分支</li>\n<li>提交信息： <code>Commit_1 : + doc/md/* and Script</code></li>\n</ul>\n</li>\n<li>第3次提交<ul>\n<li>添加所有文件</li>\n<li>提交信息：<code>Commit_2 : + All file</code></li>\n</ul>\n</li>\n<li>复制钩子<ul>\n<li><del>==提交钩子(post-commit)==</del>  子仓库暂无</li>\n</ul>\n</li>\n<li>YAML输出</li>\n<li>输出子模块批处理配置文件<ul>\n<li>手动复制此配置文件到其它地方。</li>\n</ul>\n</li>\n<li>结果输出</li>\n</ol>\n</li>\n<li><strong>单分支脚本流程</strong>：<ol>\n<li>检测<code>.git</code> 文件，存在则退出脚本。不存在则继续执行脚本。</li>\n<li>特定目录处理。<ul>\n<li>一些不存在的目录会自动创建，如 <code>doc/md</code>  <code>doc/Readme</code></li>\n</ul>\n</li>\n<li>空目录处理。<ul>\n<li>因为git会自动忽略空目录。</li>\n<li>对于空目录，添加 .gitkeep 文件</li>\n</ul>\n</li>\n<li>仓库配置。<ul>\n<li>初始化仓库，配置用户名，邮箱，添加远程仓库等等。</li>\n</ul>\n</li>\n<li>首次提交<ul>\n<li>提交空白仓库，只包含 .gitignore 文件</li>\n<li>提交信息： <code>Commit_0 : init</code></li>\n</ul>\n</li>\n<li>第2次提交<ul>\n<li>添加所有文件</li>\n<li>提交信息：<code>Commit_1 : + All file</code></li>\n</ul>\n</li>\n<li>复制钩子<ul>\n<li><del>==提交钩子(post-commit)==</del>  子仓库暂无</li>\n</ul>\n</li>\n<li>YAML输出</li>\n<li>输出子模块批处理配置文件<ul>\n<li>手动复制此配置文件到其它地方。</li>\n</ul>\n</li>\n<li>结果输出</li>\n</ol>\n</li>\n</ul>\n<p><strong>产生的文件有：</strong></p>\n<ul>\n<li><code>init.log</code>  ： 仓库初始化日志，转移<ul>\n<li>管理库： <code>data\\SubRepo\\init</code></li>\n</ul>\n</li>\n<li><code>*.[Repo]add</code> <code>*.init</code> <code>*.[Repo]del</code>  <code>*.[Repo]updata</code>  ： 子模块批处理配置文件，转移<ul>\n<li>父项目： <code>.git\\myconf\\submodule\\staged</code></li>\n<li>管理库： <code>data\\SubRepo\\conf</code></li>\n</ul>\n</li>\n<li><code>doc/md/*.YAML</code>  ：(<code>md</code> 分支或<code>doc/md</code>) md 文件的YAML头，处理后删除<ul>\n<li>将其内容复制到相应的md文件头部，然后删除此<code>*.YAML</code>文件，最后git提交。</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"父项目添加子模块-子仓库\"><a href=\"#父项目添加子模块-子仓库\" class=\"headerlink\" title=\"父项目添加子模块(子仓库)\"></a>父项目添加子模块(子仓库)</h4><ul>\n<li>运行脚本 <code>Script\\sh\\submodule_batch.bat</code> ，添加子模块。</li>\n<li>子模块稀疏检出(<code>doc/md</code>)</li>\n<li>复制钩子<ul>\n<li>==提交钩子(post-commit)== ，在配置文件中已配置，脚本会自动复制此钩子。</li>\n</ul>\n</li>\n<li>脚本配置如下<ul>\n<li>配置读取目录  ： <code>.git\\myconf\\submodule\\staged</code> <ul>\n<li>从该目录下读取子模块批处理配置文件</li>\n</ul>\n</li>\n<li>完成目录  ： <code>.git\\myconf\\submodule\\ok</code><ul>\n<li>处理完毕后，将配置文件移动到此。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>配置文件格式参考  <code>Script\\sh\\git_submodule\\Template</code> </li>\n<li>注： 子模块git数据库在父项目下的.git目录下。</li>\n</ul>\n<h4 id=\"写作在子仓库\"><a href=\"#写作在子仓库\" class=\"headerlink\" title=\"写作在子仓库\"></a>写作在子仓库</h4><ul>\n<li>完全可当做为普通git仓库来管理。</li>\n<li>(==单分支==)子仓库有<code>master</code>分支。</li>\n<li>(==多分支==)子仓库有<code>master</code>分支和<code>md</code> 分支。<ul>\n<li><code>md</code> 分支源自<code>master</code>分支的<code>doc/md</code> ，最终需要将最新的数据合并到<code>master</code>分支，以作存储。</li>\n<li>所以<code>doc/md</code>的更改推荐在<code>md</code>分支下进行，然后定期合并到<code>master</code>分支</li>\n<li><code>master</code>分支==不能==合并到<code>md</code> 分支，会造成结构不符合当初预期。</li>\n<li>若需要从<code>master</code>分支检出<code>md</code> 分支所需的最新数据，可通过其它方法，如<a href=\"#git从其他分支checkout文件到当前分支\">git从其他分支checkout文件到当前分支</a></li>\n</ul>\n</li>\n<li>git提交并推送。</li>\n</ul>\n<h4 id=\"写作在子模块\"><a href=\"#写作在子模块\" class=\"headerlink\" title=\"写作在子模块\"></a>写作在子模块</h4><ul>\n<li>进入子模块，当做为普通git仓库来管理单分支。</li>\n<li>(==单分支==)子模块只检出<code>master</code> 分支，且==禁止==检出其它分支。</li>\n<li>(==多分支==)子模块只检出<code>md</code> 分支，且==禁止==检出其它分支。<ul>\n<li><code>md</code> 分支源自<code>master</code>分支的<code>doc/md</code> ，最终需要将最新的数据合并到<code>master</code>分支，以作存储。</li>\n<li>所以<code>doc/md</code>的更改推荐在<code>md</code>分支下进行，然后定期合并到<code>master</code>分支</li>\n<li><code>master</code>分支==不能==合并到<code>md</code> 分支，会造成结构不符合当初预期。</li>\n<li>若需要从<code>master</code>分支检出<code>md</code> 分支所需的最新数据，可通过其它方法，如<a href=\"#git从其他分支checkout文件到当前分支\">git从其他分支checkout文件到当前分支</a></li>\n</ul>\n</li>\n<li>git提交</li>\n<li>触发==提交钩子(post-commit)== ，写入<code>复制状态</code> 数据到子模块git数据库目录下。</li>\n<li>git推送。</li>\n</ul>\n<h4 id=\"写作在父仓库\"><a href=\"#写作在父仓库\" class=\"headerlink\" title=\"写作在父仓库\"></a>写作在父仓库</h4><blockquote>\n<p>可能某些内容并没有依赖子仓库，是在本项目中(<code>source/*</code>)，此时，就需要在父仓库中写在。</p>\n</blockquote>\n<ul>\n<li>在父仓库 <code>source/*</code> 下更改内容 ，git提交并推送。<ul>\n<li>使用线上持续集成时： 提交当前分支(<code>Hexo</code>) ，忽略<code>public</code> 子模块。<ul>\n<li>需要配置，参考 <a href=\"#忽略submodule中的修改或新增文件\">忽略submodule中的修改或新增文件</a>。</li>\n</ul>\n</li>\n<li>不使用线上持续集成时： 先提交<code>public</code>子模块，再提交当前分支(<code>Hexo</code>) 。</li>\n</ul>\n</li>\n<li>git提交之前，触发==预提交钩子(pre-commit)==，调用脚本，读取配置(<code>copy.conf</code>) ，按需复制 <code>source_md/&lt;SubModuleName&gt;/doc/md/</code> 下的内容到 <code>source/_posts/Dev/&lt;SubModuleName&gt;</code> </li>\n</ul>\n<h3 id=\"线上\"><a href=\"#线上\" class=\"headerlink\" title=\"线上\"></a>线上</h3><h4 id=\"使用-Travis-ci-持续集成\"><a href=\"#使用-Travis-ci-持续集成\" class=\"headerlink\" title=\"使用 Travis-ci 持续集成\"></a>使用 Travis-ci 持续集成</h4><p>已配置如下流程</p>\n<ul>\n<li><p>Travis-ci 检测仓库接收的推送。</p>\n<ul>\n<li>拉取博客程序分支(<code>Hexo</code>)</li>\n<li>安装依赖，<code>hexo g</code>生成内容</li>\n<li>在其它地方克隆并检出<code>master</code> 分支并复制<code>.git</code> 目录到<code>public</code>下</li>\n<li>最后只提交并推送<code>public</code>下的内容到<code>master</code>分支，放弃其它内容。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Build\"><a href=\"#Build\" class=\"headerlink\" title=\"Build\"></a>Build</h2><h3 id=\"bat脚本\"><a href=\"#bat脚本\" class=\"headerlink\" title=\"bat脚本\"></a>bat脚本</h3><ul>\n<li>子模块(子仓库)，==提交钩子(post-commit)==，写入数据到配置文件中（包含<code>状态</code>，<code>路径</code> 等信息）</li>\n<li>父仓库(Hexo)，==预提交钩子(pre-commit)==   , for   读取（遍历）子仓库中配置文件的变量，根据status参数，直接执行相应的命令。</li>\n</ul>\n<h3 id=\"shell-脚本\"><a href=\"#shell-脚本\" class=\"headerlink\" title=\"shell 脚本\"></a>shell 脚本</h3><p>git钩子的shell脚本，用<code>#!/bin/sh</code> ，而大部分任务流有bat脚本完成。</p>\n<p>根据shell脚本调用方式，最终选择 fork方式。</p>\n<p>这样能保证shell后面的命令继续执行，但不能获取子 Shell 中的环境变量</p>\n<blockquote>\n<p>如</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; #!/bin/sh</span><br><span class=\"line\">&gt; </span><br><span class=\"line\">&gt; ./out.bat $@</span><br><span class=\"line\">&gt; echo AAAAA</span><br><span class=\"line\">&gt;</span><br></pre></td></tr></table></figure>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<ul>\n<li>$# 是传给脚本的参数个数</li>\n<li>$0 是脚本本身的名字</li>\n<li>$1 是传递给该shell脚本的第一个参数</li>\n<li>$2 是传递给该shell脚本的第二个参数</li>\n<li>$@ 是传给脚本的所有参数的列表</li>\n</ul>\n</blockquote>\n<p><a href=\"https://www.cnblogs.com/insane-Mr-Li/p/9095668.html\" target=\"_blank\" rel=\"noopener\">Shell 脚本中调用另一个 Shell 脚本的三种方式</a> </p>\n<blockquote>\n<p>主要以下有几种方式：    </p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>命令</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>fork</td>\n<td>新开一个子 Shell 执行，子 Shell 可以从父 Shell 继承环境变量，但是子 Shell 中的环境变量不会带回给父 Shell。<br>fork 是最普通的, 就是直接在脚本里面用 path/to/foo.sh 来调用 ，不需 fork 关键字</td>\n</tr>\n<tr>\n<td>exec</td>\n<td>在同一个 Shell 内执行，但是父脚本中 exec 行之后的内容就不会再执行了</td>\n</tr>\n<tr>\n<td>source</td>\n<td>在同一个 Shell 中执行，在被调用的脚本中声明的变量和环境变量, 都可以在主脚本中进行获取和使用，相当于合并两个脚本在执行</td>\n</tr>\n</tbody>\n</table>\n</div>\n</blockquote>\n<h3 id=\"涉及的命令\"><a href=\"#涉及的命令\" class=\"headerlink\" title=\"涉及的命令\"></a>涉及的命令</h3><p>for</p>\n<p>xcopy</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">xcopy 1\\* 11 /eiy</span><br><span class=\"line\"></span><br><span class=\"line\">/E           复制目录和子目录，包括空目录。</span><br><span class=\"line\">/I           如果目标不存在，且要复制多个文件，则假定目标必须是目录。</span><br><span class=\"line\">/Y           取消提示以确认要覆盖现有目标文件。</span><br></pre></td></tr></table></figure>\n<p>复制1目录下的所有，不包含隐藏文件夹，到 11 目录</p>\n<hr>\n<h2 id=\"参考阅读\"><a href=\"#参考阅读\" class=\"headerlink\" title=\"参考阅读\"></a>参考阅读</h2><blockquote id=\"fn_1\">\n<sup>1</sup>. 管理组织内所有库，默认为 <code>&lt;orgname&gt;.github.io</code>  ，<code>&lt;orgname&gt;</code>不用下划线等特殊字符<a href=\"#reffn_1\" title=\"Jump back to footnote [1] in the text.\"> &#8617;</a>\n</blockquote>\n<p><a href=\"https://segmentfault.com/a/1190000012277504\" target=\"_blank\" rel=\"noopener\">把 git 仓库的子目录独立成新仓库</a></p>\n<p><a href=\"https://segmentfault.com/a/1190000002548731\" target=\"_blank\" rel=\"noopener\">Git 仓库拆拆拆</a></p>\n<blockquote>\n<h3 id=\"git从其他分支checkout文件到当前分支\"><a href=\"#git从其他分支checkout文件到当前分支\" class=\"headerlink\" title=\"git从其他分支checkout文件到当前分支\"></a>git从其他分支checkout文件到当前分支</h3><p>使用场景，把当前分支的某个文件替换为其他分支的文件</p>\n<p>执行命令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; git checkout &lt;branch name&gt; -- path</span><br><span class=\"line\">&gt;</span><br></pre></td></tr></table></figure>\n</blockquote>\n<p>&gt;</p>\n<blockquote>\n<p>path 就是你想要替换的目录或文件</p>\n<h3 id=\"忽略submodule中的修改或新增文件\"><a href=\"#忽略submodule中的修改或新增文件\" class=\"headerlink\" title=\"忽略submodule中的修改或新增文件\"></a>忽略submodule中的修改或新增文件</h3><p>我们要做的就是在<code>.gitmodules</code>的<code>[submodule “ProjectName”]</code>中添加一个<code>ignore</code>子项，这个ignore子项可以有3个可选的值，<code>untracked</code>, <code>dirty</code>和<code>all</code>, 它们的意思分别是：</p>\n<ul>\n<li><strong>untracked</strong> ：忽略 在子模块 新添加的，未受版本控制内容</li>\n<li><strong>dirty</strong> ： 忽略对\\<projectname>目录下受版本控制的内容进行了修改</projectname></li>\n<li><strong>all</strong> ： 同时忽略untracked和dirty</li>\n</ul>\n</blockquote>\n"}],"PostAsset":[{"_id":"source/_posts/Dev/nodejs/nodejs05/image7.png","slug":"image7.png","post":"cjoncnbrc000o2gfi9kivkl57","modified":0,"renderable":0},{"_id":"source/_posts/Dev/nodejs/nodejs03/image14.png","slug":"image14.png","post":"cjoncnbro000v2gfia3vc7ha1","modified":0,"renderable":0},{"_id":"source/_posts/Dev/nodejs/nodejs06/1542533881927.png","slug":"1542533881927.png","post":"cjoncnbr9000l2gfi4kvs8o1l","modified":0,"renderable":0},{"_id":"source/_posts/Dev/nodejs/nodejs06/image2.png","slug":"image2.png","post":"cjoncnbr9000l2gfi4kvs8o1l","modified":0,"renderable":0},{"_id":"source/_posts/Dev/nodejs/nodejs06/image3.png","slug":"image3.png","post":"cjoncnbr9000l2gfi4kvs8o1l","modified":0,"renderable":0},{"_id":"source/_posts/Dev/nodejs/nodejs06/image4.png","slug":"image4.png","post":"cjoncnbr9000l2gfi4kvs8o1l","modified":0,"renderable":0},{"_id":"source/_posts/Dev/nodejs/nodejs06/image5.png","slug":"image5.png","post":"cjoncnbr9000l2gfi4kvs8o1l","modified":0,"renderable":0},{"_id":"source/_posts/Dev/nodejs/nodejs04/image2.png","slug":"image2.png","post":"cjoncnbrb000m2gfipk3bycr6","modified":0,"renderable":0},{"_id":"source/_posts/Dev/nodejs/nodejs04/image3.png","slug":"image3.png","post":"cjoncnbrb000m2gfipk3bycr6","modified":0,"renderable":0},{"_id":"source/_posts/Dev/nodejs/nodejs04/image4.png","slug":"image4.png","post":"cjoncnbrb000m2gfipk3bycr6","modified":0,"renderable":0},{"_id":"source/_posts/Dev/nodejs/nodejs04/image5.png","slug":"image5.png","post":"cjoncnbrb000m2gfipk3bycr6","modified":0,"renderable":0},{"_id":"source/_posts/Dev/nodejs/nodejs04/image6.png","slug":"image6.png","post":"cjoncnbrb000m2gfipk3bycr6","modified":0,"renderable":0},{"_id":"source/_posts/Dev/nodejs/nodejs04/image7.png","slug":"image7.png","post":"cjoncnbrb000m2gfipk3bycr6","modified":0,"renderable":0},{"_id":"source/_posts/Dev/nodejs/nodejs04/image8.png","slug":"image8.png","post":"cjoncnbrb000m2gfipk3bycr6","modified":0,"renderable":0},{"_id":"source/_posts/Dev/nodejs/nodejs05/image10.png","slug":"image10.png","post":"cjoncnbrc000o2gfi9kivkl57","modified":0,"renderable":0},{"_id":"source/_posts/Dev/nodejs/nodejs05/image11.png","slug":"image11.png","post":"cjoncnbrc000o2gfi9kivkl57","modified":0,"renderable":0},{"_id":"source/_posts/Dev/nodejs/nodejs05/image2.png","slug":"image2.png","post":"cjoncnbrc000o2gfi9kivkl57","modified":0,"renderable":0},{"_id":"source/_posts/Dev/nodejs/nodejs05/image3.png","slug":"image3.png","post":"cjoncnbrc000o2gfi9kivkl57","modified":0,"renderable":0},{"_id":"source/_posts/Dev/nodejs/nodejs05/image4.png","slug":"image4.png","post":"cjoncnbrc000o2gfi9kivkl57","modified":0,"renderable":0},{"_id":"source/_posts/Dev/nodejs/nodejs05/image5.png","slug":"image5.png","post":"cjoncnbrc000o2gfi9kivkl57","modified":0,"renderable":0},{"_id":"source/_posts/Dev/nodejs/nodejs05/image6.png","slug":"image6.png","post":"cjoncnbrc000o2gfi9kivkl57","modified":0,"renderable":0},{"_id":"source/_posts/Dev/nodejs/nodejs05/image8.png","slug":"image8.png","post":"cjoncnbrc000o2gfi9kivkl57","modified":0,"renderable":0},{"_id":"source/_posts/Dev/nodejs/nodejs05/image9.png","slug":"image9.png","post":"cjoncnbrc000o2gfi9kivkl57","modified":0,"renderable":0},{"_id":"source/_posts/Dev/nodejs/nodejs02/image10.png","slug":"image10.png","post":"cjoncnbrn000u2gfi4cpw9o6w","modified":0,"renderable":0},{"_id":"source/_posts/Dev/nodejs/nodejs02/image11.png","slug":"image11.png","post":"cjoncnbrn000u2gfi4cpw9o6w","modified":0,"renderable":0},{"_id":"source/_posts/Dev/nodejs/nodejs02/image12.png","slug":"image12.png","post":"cjoncnbrn000u2gfi4cpw9o6w","modified":0,"renderable":0},{"_id":"source/_posts/Dev/nodejs/nodejs02/image13.png","slug":"image13.png","post":"cjoncnbrn000u2gfi4cpw9o6w","modified":0,"renderable":0},{"_id":"source/_posts/Dev/nodejs/nodejs02/image14.png","slug":"image14.png","post":"cjoncnbrn000u2gfi4cpw9o6w","modified":0,"renderable":0},{"_id":"source/_posts/Dev/nodejs/nodejs02/image15.png","slug":"image15.png","post":"cjoncnbrn000u2gfi4cpw9o6w","modified":0,"renderable":0},{"_id":"source/_posts/Dev/nodejs/nodejs02/image16.png","slug":"image16.png","post":"cjoncnbrn000u2gfi4cpw9o6w","modified":0,"renderable":0},{"_id":"source/_posts/Dev/nodejs/nodejs02/image17.png","slug":"image17.png","post":"cjoncnbrn000u2gfi4cpw9o6w","modified":0,"renderable":0},{"_id":"source/_posts/Dev/nodejs/nodejs02/image18.png","slug":"image18.png","post":"cjoncnbrn000u2gfi4cpw9o6w","modified":0,"renderable":0},{"_id":"source/_posts/Dev/nodejs/nodejs02/image19.png","slug":"image19.png","post":"cjoncnbrn000u2gfi4cpw9o6w","modified":0,"renderable":0},{"_id":"source/_posts/Dev/nodejs/nodejs02/image20.png","slug":"image20.png","post":"cjoncnbrn000u2gfi4cpw9o6w","modified":0,"renderable":0},{"_id":"source/_posts/Dev/nodejs/nodejs02/image21.png","slug":"image21.png","post":"cjoncnbrn000u2gfi4cpw9o6w","modified":0,"renderable":0},{"_id":"source/_posts/Dev/nodejs/nodejs02/image22.png","slug":"image22.png","post":"cjoncnbrn000u2gfi4cpw9o6w","modified":0,"renderable":0},{"_id":"source/_posts/Dev/nodejs/nodejs03/image10.png","slug":"image10.png","post":"cjoncnbro000v2gfia3vc7ha1","modified":0,"renderable":0},{"_id":"source/_posts/Dev/nodejs/nodejs03/image11.png","slug":"image11.png","post":"cjoncnbro000v2gfia3vc7ha1","modified":0,"renderable":0},{"_id":"source/_posts/Dev/nodejs/nodejs03/image12.png","slug":"image12.png","post":"cjoncnbro000v2gfia3vc7ha1","modified":0,"renderable":0},{"_id":"source/_posts/Dev/nodejs/nodejs03/image13.png","slug":"image13.png","post":"cjoncnbro000v2gfia3vc7ha1","modified":0,"renderable":0},{"_id":"source/_posts/Dev/nodejs/nodejs03/image15.png","slug":"image15.png","post":"cjoncnbro000v2gfia3vc7ha1","modified":0,"renderable":0},{"_id":"source/_posts/Dev/nodejs/nodejs03/image16.png","slug":"image16.png","post":"cjoncnbro000v2gfia3vc7ha1","modified":0,"renderable":0},{"_id":"source/_posts/Dev/nodejs/nodejs03/image17.png","slug":"image17.png","post":"cjoncnbro000v2gfia3vc7ha1","modified":0,"renderable":0},{"_id":"source/_posts/Dev/nodejs/nodejs03/image18.png","slug":"image18.png","post":"cjoncnbro000v2gfia3vc7ha1","modified":0,"renderable":0},{"_id":"source/_posts/Dev/nodejs/nodejs03/image19.png","slug":"image19.png","post":"cjoncnbro000v2gfia3vc7ha1","modified":0,"renderable":0},{"_id":"source/_posts/Dev/nodejs/nodejs03/image2.png","slug":"image2.png","post":"cjoncnbro000v2gfia3vc7ha1","modified":0,"renderable":0},{"_id":"source/_posts/Dev/nodejs/nodejs03/image20.png","slug":"image20.png","post":"cjoncnbro000v2gfia3vc7ha1","modified":0,"renderable":0},{"_id":"source/_posts/Dev/nodejs/nodejs03/image21.png","slug":"image21.png","post":"cjoncnbro000v2gfia3vc7ha1","modified":0,"renderable":0},{"_id":"source/_posts/Dev/nodejs/nodejs03/image22.png","slug":"image22.png","post":"cjoncnbro000v2gfia3vc7ha1","modified":0,"renderable":0},{"_id":"source/_posts/Dev/nodejs/nodejs03/image23.png","slug":"image23.png","post":"cjoncnbro000v2gfia3vc7ha1","modified":0,"renderable":0},{"_id":"source/_posts/Dev/nodejs/nodejs03/image3.png","slug":"image3.png","post":"cjoncnbro000v2gfia3vc7ha1","modified":0,"renderable":0},{"_id":"source/_posts/Dev/nodejs/nodejs03/image4.jpeg","slug":"image4.jpeg","post":"cjoncnbro000v2gfia3vc7ha1","modified":0,"renderable":0},{"_id":"source/_posts/Dev/nodejs/nodejs03/image5.png","slug":"image5.png","post":"cjoncnbro000v2gfia3vc7ha1","modified":0,"renderable":0},{"_id":"source/_posts/Dev/nodejs/nodejs03/image6.png","slug":"image6.png","post":"cjoncnbro000v2gfia3vc7ha1","modified":0,"renderable":0},{"_id":"source/_posts/Dev/nodejs/nodejs03/image7.png","slug":"image7.png","post":"cjoncnbro000v2gfia3vc7ha1","modified":0,"renderable":0},{"_id":"source/_posts/Dev/nodejs/nodejs03/image8.png","slug":"image8.png","post":"cjoncnbro000v2gfia3vc7ha1","modified":0,"renderable":0},{"_id":"source/_posts/Dev/nodejs/nodejs03/image9.png","slug":"image9.png","post":"cjoncnbro000v2gfia3vc7ha1","modified":0,"renderable":0},{"_id":"source/_posts/Dev/nodejs/nodejs01/image10.png","slug":"image10.png","post":"cjoncnbs0000y2gfilvi9ko47","modified":0,"renderable":0},{"_id":"source/_posts/Dev/nodejs/nodejs01/image11.png","slug":"image11.png","post":"cjoncnbs0000y2gfilvi9ko47","modified":0,"renderable":0},{"_id":"source/_posts/Dev/nodejs/nodejs01/image12.png","slug":"image12.png","post":"cjoncnbs0000y2gfilvi9ko47","modified":0,"renderable":0},{"_id":"source/_posts/Dev/nodejs/nodejs01/image13.png","slug":"image13.png","post":"cjoncnbs0000y2gfilvi9ko47","modified":0,"renderable":0},{"_id":"source/_posts/Dev/nodejs/nodejs01/image14.png","slug":"image14.png","post":"cjoncnbs0000y2gfilvi9ko47","modified":0,"renderable":0},{"_id":"source/_posts/Dev/nodejs/nodejs01/image15.png","slug":"image15.png","post":"cjoncnbs0000y2gfilvi9ko47","modified":0,"renderable":0},{"_id":"source/_posts/Dev/nodejs/nodejs01/image16.png","slug":"image16.png","post":"cjoncnbs0000y2gfilvi9ko47","modified":0,"renderable":0},{"_id":"source/_posts/Dev/nodejs/nodejs01/image17.png","slug":"image17.png","post":"cjoncnbs0000y2gfilvi9ko47","modified":0,"renderable":0},{"_id":"source/_posts/Dev/nodejs/nodejs01/image18.png","slug":"image18.png","post":"cjoncnbs0000y2gfilvi9ko47","modified":0,"renderable":0},{"_id":"source/_posts/Dev/nodejs/nodejs01/image19.png","slug":"image19.png","post":"cjoncnbs0000y2gfilvi9ko47","modified":0,"renderable":0},{"_id":"source/_posts/Dev/nodejs/nodejs01/image2.png","slug":"image2.png","post":"cjoncnbs0000y2gfilvi9ko47","modified":0,"renderable":0},{"_id":"source/_posts/Dev/nodejs/nodejs01/image20.png","slug":"image20.png","post":"cjoncnbs0000y2gfilvi9ko47","modified":0,"renderable":0},{"_id":"source/_posts/Dev/nodejs/nodejs01/image21.png","slug":"image21.png","post":"cjoncnbs0000y2gfilvi9ko47","modified":0,"renderable":0},{"_id":"source/_posts/Dev/nodejs/nodejs01/image22.png","slug":"image22.png","post":"cjoncnbs0000y2gfilvi9ko47","modified":0,"renderable":0},{"_id":"source/_posts/Dev/nodejs/nodejs01/image23.png","slug":"image23.png","post":"cjoncnbs0000y2gfilvi9ko47","modified":0,"renderable":0},{"_id":"source/_posts/Dev/nodejs/nodejs01/image24.png","slug":"image24.png","post":"cjoncnbs0000y2gfilvi9ko47","modified":0,"renderable":0},{"_id":"source/_posts/Dev/nodejs/nodejs01/image25.png","slug":"image25.png","post":"cjoncnbs0000y2gfilvi9ko47","modified":0,"renderable":0},{"_id":"source/_posts/Dev/nodejs/nodejs01/image26.png","slug":"image26.png","post":"cjoncnbs0000y2gfilvi9ko47","modified":0,"renderable":0},{"_id":"source/_posts/Dev/nodejs/nodejs01/image27.png","slug":"image27.png","post":"cjoncnbs0000y2gfilvi9ko47","modified":0,"renderable":0},{"_id":"source/_posts/Dev/nodejs/nodejs01/image28.png","slug":"image28.png","post":"cjoncnbs0000y2gfilvi9ko47","modified":0,"renderable":0},{"_id":"source/_posts/Dev/nodejs/nodejs01/image29.png","slug":"image29.png","post":"cjoncnbs0000y2gfilvi9ko47","modified":0,"renderable":0},{"_id":"source/_posts/Dev/nodejs/nodejs01/image3.png","slug":"image3.png","post":"cjoncnbs0000y2gfilvi9ko47","modified":0,"renderable":0},{"_id":"source/_posts/Dev/nodejs/nodejs01/image30.png","slug":"image30.png","post":"cjoncnbs0000y2gfilvi9ko47","modified":0,"renderable":0},{"_id":"source/_posts/Dev/nodejs/nodejs01/image31.png","slug":"image31.png","post":"cjoncnbs0000y2gfilvi9ko47","modified":0,"renderable":0},{"_id":"source/_posts/Dev/nodejs/nodejs01/image32.png","slug":"image32.png","post":"cjoncnbs0000y2gfilvi9ko47","modified":0,"renderable":0},{"_id":"source/_posts/Dev/nodejs/nodejs01/image33.png","slug":"image33.png","post":"cjoncnbs0000y2gfilvi9ko47","modified":0,"renderable":0},{"_id":"source/_posts/Dev/nodejs/nodejs01/image34.png","slug":"image34.png","post":"cjoncnbs0000y2gfilvi9ko47","modified":0,"renderable":0},{"_id":"source/_posts/Dev/nodejs/nodejs01/image35.png","slug":"image35.png","post":"cjoncnbs0000y2gfilvi9ko47","modified":0,"renderable":0},{"_id":"source/_posts/Dev/nodejs/nodejs01/image36.png","slug":"image36.png","post":"cjoncnbs0000y2gfilvi9ko47","modified":0,"renderable":0},{"_id":"source/_posts/Dev/nodejs/nodejs01/image37.png","slug":"image37.png","post":"cjoncnbs0000y2gfilvi9ko47","modified":0,"renderable":0},{"_id":"source/_posts/Dev/nodejs/nodejs01/image38.png","slug":"image38.png","post":"cjoncnbs0000y2gfilvi9ko47","modified":0,"renderable":0},{"_id":"source/_posts/Dev/nodejs/nodejs01/image39.png","slug":"image39.png","post":"cjoncnbs0000y2gfilvi9ko47","modified":0,"renderable":0},{"_id":"source/_posts/Dev/nodejs/nodejs01/image4.png","slug":"image4.png","post":"cjoncnbs0000y2gfilvi9ko47","modified":0,"renderable":0},{"_id":"source/_posts/Dev/nodejs/nodejs01/image40.png","slug":"image40.png","post":"cjoncnbs0000y2gfilvi9ko47","modified":0,"renderable":0},{"_id":"source/_posts/Dev/nodejs/nodejs01/image41.png","slug":"image41.png","post":"cjoncnbs0000y2gfilvi9ko47","modified":0,"renderable":0},{"_id":"source/_posts/Dev/nodejs/nodejs01/image42.png","slug":"image42.png","post":"cjoncnbs0000y2gfilvi9ko47","modified":0,"renderable":0},{"_id":"source/_posts/Dev/nodejs/nodejs01/image43.png","slug":"image43.png","post":"cjoncnbs0000y2gfilvi9ko47","modified":0,"renderable":0},{"_id":"source/_posts/Dev/nodejs/nodejs01/image44.png","slug":"image44.png","post":"cjoncnbs0000y2gfilvi9ko47","modified":0,"renderable":0},{"_id":"source/_posts/Dev/nodejs/nodejs01/image45.png","slug":"image45.png","post":"cjoncnbs0000y2gfilvi9ko47","modified":0,"renderable":0},{"_id":"source/_posts/Dev/nodejs/nodejs01/image46.png","slug":"image46.png","post":"cjoncnbs0000y2gfilvi9ko47","modified":0,"renderable":0},{"_id":"source/_posts/Dev/nodejs/nodejs01/image47.png","slug":"image47.png","post":"cjoncnbs0000y2gfilvi9ko47","modified":0,"renderable":0},{"_id":"source/_posts/Dev/nodejs/nodejs01/image5.png","slug":"image5.png","post":"cjoncnbs0000y2gfilvi9ko47","modified":0,"renderable":0},{"_id":"source/_posts/Dev/nodejs/nodejs01/image6.png","slug":"image6.png","post":"cjoncnbs0000y2gfilvi9ko47","modified":0,"renderable":0},{"_id":"source/_posts/Dev/nodejs/nodejs01/image7.png","slug":"image7.png","post":"cjoncnbs0000y2gfilvi9ko47","modified":0,"renderable":0},{"_id":"source/_posts/Dev/nodejs/nodejs01/image8.png","slug":"image8.png","post":"cjoncnbs0000y2gfilvi9ko47","modified":0,"renderable":0},{"_id":"source/_posts/Dev/nodejs/nodejs01/image9.png","slug":"image9.png","post":"cjoncnbs0000y2gfilvi9ko47","modified":0,"renderable":0},{"_id":"source/_posts/Dev/hexo/hexo-tutorial/Epsilon2.1.gif","slug":"Epsilon2.1.gif","post":"cjoncnbs900102gfi9b03xa8z","modified":0,"renderable":0},{"_id":"source/_posts/Dev/hexo/hexo-tutorial/Gantzert_Felixander.gif","slug":"Gantzert_Felixander.gif","post":"cjoncnbs900102gfi9b03xa8z","modified":0,"renderable":0},{"_id":"source/_posts/Dev/hexo/hexo-tutorial/Unitychan.gif","slug":"Unitychan.gif","post":"cjoncnbs900102gfi9b03xa8z","modified":0,"renderable":0},{"_id":"source/_posts/Dev/hexo/hexo-tutorial/analytics-baidu-id.png","slug":"analytics-baidu-id.png","post":"cjoncnbs900102gfi9b03xa8z","modified":0,"renderable":0},{"_id":"source/_posts/Dev/hexo/hexo-tutorial/haru.gif","slug":"haru.gif","post":"cjoncnbs900102gfi9b03xa8z","modified":0,"renderable":0},{"_id":"source/_posts/Dev/hexo/hexo-tutorial/haruto.gif","slug":"haruto.gif","post":"cjoncnbs900102gfi9b03xa8z","modified":0,"renderable":0},{"_id":"source/_posts/Dev/hexo/hexo-tutorial/hibiki.gif","slug":"hibiki.gif","post":"cjoncnbs900102gfi9b03xa8z","modified":0,"renderable":0},{"_id":"source/_posts/Dev/hexo/hexo-tutorial/hijiki.gif","slug":"hijiki.gif","post":"cjoncnbs900102gfi9b03xa8z","modified":0,"renderable":0},{"_id":"source/_posts/Dev/hexo/hexo-tutorial/koharu.gif","slug":"koharu.gif","post":"cjoncnbs900102gfi9b03xa8z","modified":0,"renderable":0},{"_id":"source/_posts/Dev/hexo/hexo-tutorial/miku.gif","slug":"miku.gif","post":"cjoncnbs900102gfi9b03xa8z","modified":0,"renderable":0},{"_id":"source/_posts/Dev/hexo/hexo-tutorial/ni-j.gif","slug":"ni-j.gif","post":"cjoncnbs900102gfi9b03xa8z","modified":0,"renderable":0},{"_id":"source/_posts/Dev/hexo/hexo-tutorial/nico.gif","slug":"nico.gif","post":"cjoncnbs900102gfi9b03xa8z","modified":0,"renderable":0},{"_id":"source/_posts/Dev/hexo/hexo-tutorial/nietzche.gif","slug":"nietzche.gif","post":"cjoncnbs900102gfi9b03xa8z","modified":0,"renderable":0},{"_id":"source/_posts/Dev/hexo/hexo-tutorial/nipsilon.gif","slug":"nipsilon.gif","post":"cjoncnbs900102gfi9b03xa8z","modified":0,"renderable":0},{"_id":"source/_posts/Dev/hexo/hexo-tutorial/nito.gif","slug":"nito.gif","post":"cjoncnbs900102gfi9b03xa8z","modified":0,"renderable":0},{"_id":"source/_posts/Dev/hexo/hexo-tutorial/shizuku.gif","slug":"shizuku.gif","post":"cjoncnbs900102gfi9b03xa8z","modified":0,"renderable":0},{"_id":"source/_posts/Dev/hexo/hexo-tutorial/tororo.gif","slug":"tororo.gif","post":"cjoncnbs900102gfi9b03xa8z","modified":0,"renderable":0},{"_id":"source/_posts/Dev/hexo/hexo-tutorial/tsumiki.gif","slug":"tsumiki.gif","post":"cjoncnbs900102gfi9b03xa8z","modified":0,"renderable":0},{"_id":"source/_posts/Dev/hexo/hexo-tutorial/wanko.gif","slug":"wanko.gif","post":"cjoncnbs900102gfi9b03xa8z","modified":0,"renderable":0},{"_id":"source/_posts/Dev/hexo/hexo-tutorial/z16.gif","slug":"z16.gif","post":"cjoncnbs900102gfi9b03xa8z","modified":0,"renderable":0}],"PostCategory":[{"post_id":"cjoncnbku00052gfiqgya8jf9","category_id":"cjoncnbl300072gfiq4pyfrcg","_id":"cjoncnblb000b2gfi7nae8nuf"},{"post_id":"cjoncnbl000062gfib3elxtvn","category_id":"cjoncnbl300072gfiq4pyfrcg","_id":"cjoncnblc000d2gficrdtnl2v"},{"post_id":"cjoncnbr9000l2gfi4kvs8o1l","category_id":"cjoncnbrc000n2gfipdjt4amj","_id":"cjoncnbre000r2gfizzl9qyng"},{"post_id":"cjoncnbrb000m2gfipk3bycr6","category_id":"cjoncnbrc000n2gfipdjt4amj","_id":"cjoncnbrf000s2gfitrehz4d4"},{"post_id":"cjoncnbrc000o2gfi9kivkl57","category_id":"cjoncnbrc000n2gfipdjt4amj","_id":"cjoncnbrf000t2gfi50z6yj2j"},{"post_id":"cjoncnbrn000u2gfi4cpw9o6w","category_id":"cjoncnbrc000n2gfipdjt4amj","_id":"cjoncnbrt000w2gfie732o1i4"},{"post_id":"cjoncnbro000v2gfia3vc7ha1","category_id":"cjoncnbrc000n2gfipdjt4amj","_id":"cjoncnbru000x2gfixhsi7wdf"},{"post_id":"cjoncnbs0000y2gfilvi9ko47","category_id":"cjoncnbrc000n2gfipdjt4amj","_id":"cjoncnbs4000z2gfiuknlta7l"},{"post_id":"cjoncnbs900102gfi9b03xa8z","category_id":"cjoncnbsc00112gfi79fz5baz","_id":"cjoncnbsg00142gfiwlmuucbw"},{"post_id":"cjpz9phz50000t8fiu41zhb2m","category_id":"cjpz9po6t0001t8fir6lq0d8z","_id":"cjpz9po6u0002t8fik90db8b8"}],"PostTag":[{"post_id":"cjoncnbku00052gfiqgya8jf9","tag_id":"cjoncnbl600082gfiubxdmaso","_id":"cjoncnbld000f2gfihz4mlntz"},{"post_id":"cjoncnbku00052gfiqgya8jf9","tag_id":"cjoncnbl8000a2gfirg0xvc7d","_id":"cjoncnbld000g2gfid27it8fy"},{"post_id":"cjoncnbku00052gfiqgya8jf9","tag_id":"cjoncnblb000c2gfieap0v410","_id":"cjoncnble000i2gfib49ukfo0"},{"post_id":"cjoncnbl000062gfib3elxtvn","tag_id":"cjoncnblc000e2gfivv084s85","_id":"cjoncnblf000j2gfitfud46d5"},{"post_id":"cjoncnbl000062gfib3elxtvn","tag_id":"cjoncnble000h2gfiweuol120","_id":"cjoncnblf000k2gfiruvxvmfu"},{"post_id":"cjoncnbs900102gfi9b03xa8z","tag_id":"cjoncnbsc00122gfiom55mpf5","_id":"cjoncnbsf00132gfi5re4068v"}],"Tag":[{"name":"test3","_id":"cjoncnbl600082gfiubxdmaso"},{"name":"t2","_id":"cjoncnbl8000a2gfirg0xvc7d"},{"name":"t","_id":"cjoncnblb000c2gfieap0v410"},{"name":"test1","_id":"cjoncnblc000e2gfivv084s85"},{"name":"test2","_id":"cjoncnble000h2gfiweuol120"},{"name":"hexo","_id":"cjoncnbsc00122gfiom55mpf5"}]}}